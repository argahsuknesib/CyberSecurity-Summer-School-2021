package com.miui.tsmclient.seitsm;

import android.support.v4.app.NotificationCompat;
import com.google.android.exoplayer2.C;
import com.google.android.exoplayer2.source.ExtractorMediaSource;
import com.google.protobuf.AbstractParser;
import com.google.protobuf.ByteString;
import com.google.protobuf.CodedInputStream;
import com.google.protobuf.CodedOutputStream;
import com.google.protobuf.Descriptors;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.ExtensionRegistryLite;
import com.google.protobuf.GeneratedMessage;
import com.google.protobuf.Internal;
import com.google.protobuf.InvalidProtocolBufferException;
import com.google.protobuf.LazyStringArrayList;
import com.google.protobuf.LazyStringList;
import com.google.protobuf.Message;
import com.google.protobuf.MessageOrBuilder;
import com.google.protobuf.Parser;
import com.google.protobuf.ProtocolMessageEnum;
import com.google.protobuf.RepeatedFieldBuilder;
import com.google.protobuf.SingleFieldBuilder;
import com.google.protobuf.UnknownFieldSet;
import com.google.protobuf.UnmodifiableLazyStringList;
import com.xiaomi.account.openauth.XiaomiOAuthConstants;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectStreamException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.List;
import no.nordicsemi.android.dfu.DfuSettingsConstants;

public final class TsmRpcModels {
    public static Descriptors.FileDescriptor descriptor;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_BankCardInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_BankCardInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_CommonResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_CommonResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_DeviceInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_DeviceInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_EidInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_EidInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_IdentityResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_IdentityResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_InAppPayResult_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_InAppPayResult_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_InAppTransData_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_InAppTransData_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_MifareCardParam_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_MifareCardParam_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QrCardInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QrCardInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_RiskInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_RiskInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_SeInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_SeInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_SeOperation_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_SeOperation_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TopUpOperation_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TopUpOperation_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TsmLibData_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TsmLibData_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_fieldAccessorTable;
    public static Descriptors.Descriptor internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_descriptor;
    public static GeneratedMessage.FieldAccessorTable internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_fieldAccessorTable;

    public static final class AddCardForQrRequest extends GeneratedMessage implements AddCardForQrRequestOrBuilder {
        public static Parser<AddCardForQrRequest> PARSER = new AbstractParser<AddCardForQrRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.AddCardForQrRequest.AnonymousClass1 */

            public final AddCardForQrRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new AddCardForQrRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final AddCardForQrRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public ByteString cardInfo_;
        public ByteString cvn2_;
        public Object deviceId_;
        public Object issuerId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public RiskInfo riskInfo_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements AddCardForQrRequestOrBuilder {
            private int bitField0_;
            private ByteString cardInfo_;
            private ByteString cvn2_;
            private Object deviceId_;
            private Object issuerId_;
            private SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> riskInfoBuilder_;
            private RiskInfo riskInfo_;

            private Builder() {
                this.deviceId_ = "";
                this.cardInfo_ = ByteString.EMPTY;
                this.cvn2_ = ByteString.EMPTY;
                this.riskInfo_ = RiskInfo.getDefaultInstance();
                this.issuerId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceId_ = "";
                this.cardInfo_ = ByteString.EMPTY;
                this.cvn2_ = ByteString.EMPTY;
                this.riskInfo_ = RiskInfo.getDefaultInstance();
                this.issuerId_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_descriptor;
            }

            private SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> getRiskInfoFieldBuilder() {
                if (this.riskInfoBuilder_ == null) {
                    this.riskInfoBuilder_ = new SingleFieldBuilder<>(this.riskInfo_, getParentForChildren(), isClean());
                    this.riskInfo_ = null;
                }
                return this.riskInfoBuilder_;
            }

            private void maybeForceBuilderInitialization() {
                if (AddCardForQrRequest.alwaysUseFieldBuilders) {
                    getRiskInfoFieldBuilder();
                }
            }

            public final AddCardForQrRequest build() {
                AddCardForQrRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final AddCardForQrRequest buildPartial() {
                AddCardForQrRequest addCardForQrRequest = new AddCardForQrRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                addCardForQrRequest.deviceId_ = this.deviceId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                addCardForQrRequest.cardInfo_ = this.cardInfo_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                addCardForQrRequest.cvn2_ = this.cvn2_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                addCardForQrRequest.riskInfo_ = singleFieldBuilder == null ? this.riskInfo_ : singleFieldBuilder.build();
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                addCardForQrRequest.issuerId_ = this.issuerId_;
                addCardForQrRequest.bitField0_ = i2;
                onBuilt();
                return addCardForQrRequest;
            }

            public final Builder clear() {
                super.clear();
                this.deviceId_ = "";
                this.bitField0_ &= -2;
                this.cardInfo_ = ByteString.EMPTY;
                this.bitField0_ &= -3;
                this.cvn2_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = RiskInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                this.issuerId_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clearCardInfo() {
                this.bitField0_ &= -3;
                this.cardInfo_ = AddCardForQrRequest.getDefaultInstance().getCardInfo();
                onChanged();
                return this;
            }

            public final Builder clearCvn2() {
                this.bitField0_ &= -5;
                this.cvn2_ = AddCardForQrRequest.getDefaultInstance().getCvn2();
                onChanged();
                return this;
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -2;
                this.deviceId_ = AddCardForQrRequest.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder clearIssuerId() {
                this.bitField0_ &= -17;
                this.issuerId_ = AddCardForQrRequest.getDefaultInstance().getIssuerId();
                onChanged();
                return this;
            }

            public final Builder clearRiskInfo() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = RiskInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final ByteString getCardInfo() {
                return this.cardInfo_;
            }

            public final ByteString getCvn2() {
                return this.cvn2_;
            }

            public final AddCardForQrRequest getDefaultInstanceForType() {
                return AddCardForQrRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_descriptor;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getIssuerId() {
                Object obj = this.issuerId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.issuerId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIssuerIdBytes() {
                Object obj = this.issuerId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.issuerId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final RiskInfo getRiskInfo() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                return singleFieldBuilder == null ? this.riskInfo_ : singleFieldBuilder.getMessage();
            }

            public final RiskInfo.Builder getRiskInfoBuilder() {
                this.bitField0_ |= 8;
                onChanged();
                return getRiskInfoFieldBuilder().getBuilder();
            }

            public final RiskInfoOrBuilder getRiskInfoOrBuilder() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                return singleFieldBuilder != null ? singleFieldBuilder.getMessageOrBuilder() : this.riskInfo_;
            }

            public final boolean hasCardInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasCvn2() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasIssuerId() {
                return (this.bitField0_ & 16) == 16;
            }

            public final boolean hasRiskInfo() {
                return (this.bitField0_ & 8) == 8;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AddCardForQrRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                AddCardForQrRequest addCardForQrRequest;
                AddCardForQrRequest addCardForQrRequest2 = null;
                try {
                    AddCardForQrRequest parsePartialFrom = AddCardForQrRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    addCardForQrRequest = (AddCardForQrRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    addCardForQrRequest2 = addCardForQrRequest;
                }
                if (addCardForQrRequest2 != null) {
                    mergeFrom(addCardForQrRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof AddCardForQrRequest) {
                    return mergeFrom((AddCardForQrRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(AddCardForQrRequest addCardForQrRequest) {
                if (addCardForQrRequest == AddCardForQrRequest.getDefaultInstance()) {
                    return this;
                }
                if (addCardForQrRequest.hasDeviceId()) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = addCardForQrRequest.deviceId_;
                    onChanged();
                }
                if (addCardForQrRequest.hasCardInfo()) {
                    setCardInfo(addCardForQrRequest.getCardInfo());
                }
                if (addCardForQrRequest.hasCvn2()) {
                    setCvn2(addCardForQrRequest.getCvn2());
                }
                if (addCardForQrRequest.hasRiskInfo()) {
                    mergeRiskInfo(addCardForQrRequest.getRiskInfo());
                }
                if (addCardForQrRequest.hasIssuerId()) {
                    this.bitField0_ |= 16;
                    this.issuerId_ = addCardForQrRequest.issuerId_;
                    onChanged();
                }
                mergeUnknownFields(addCardForQrRequest.getUnknownFields());
                return this;
            }

            public final Builder mergeRiskInfo(RiskInfo riskInfo) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 8) == 8 && this.riskInfo_ != RiskInfo.getDefaultInstance()) {
                        riskInfo = RiskInfo.newBuilder(this.riskInfo_).mergeFrom(riskInfo).buildPartial();
                    }
                    this.riskInfo_ = riskInfo;
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(riskInfo);
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setCardInfo(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cardInfo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setCvn2(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.cvn2_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setIssuerId(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.issuerId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setIssuerIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.issuerId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setRiskInfo(RiskInfo.Builder builder) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setRiskInfo(RiskInfo riskInfo) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(riskInfo);
                } else if (riskInfo != null) {
                    this.riskInfo_ = riskInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                return this;
            }
        }

        static {
            AddCardForQrRequest addCardForQrRequest = new AddCardForQrRequest(true);
            defaultInstance = addCardForQrRequest;
            addCardForQrRequest.initFields();
        }

        private AddCardForQrRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.cardInfo_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.cvn2_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            RiskInfo.Builder builder = (this.bitField0_ & 8) == 8 ? this.riskInfo_.toBuilder() : null;
                            this.riskInfo_ = (RiskInfo) codedInputStream.readMessage(RiskInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.riskInfo_);
                                this.riskInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 8;
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.issuerId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private AddCardForQrRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AddCardForQrRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AddCardForQrRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_descriptor;
        }

        private void initFields() {
            this.deviceId_ = "";
            this.cardInfo_ = ByteString.EMPTY;
            this.cvn2_ = ByteString.EMPTY;
            this.riskInfo_ = RiskInfo.getDefaultInstance();
            this.issuerId_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(AddCardForQrRequest addCardForQrRequest) {
            return newBuilder().mergeFrom(addCardForQrRequest);
        }

        public static AddCardForQrRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static AddCardForQrRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static AddCardForQrRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static AddCardForQrRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static AddCardForQrRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static AddCardForQrRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static AddCardForQrRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static AddCardForQrRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static AddCardForQrRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static AddCardForQrRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final ByteString getCardInfo() {
            return this.cardInfo_;
        }

        public final ByteString getCvn2() {
            return this.cvn2_;
        }

        public final AddCardForQrRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getIssuerId() {
            Object obj = this.issuerId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.issuerId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIssuerIdBytes() {
            Object obj = this.issuerId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.issuerId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<AddCardForQrRequest> getParserForType() {
            return PARSER;
        }

        public final RiskInfo getRiskInfo() {
            return this.riskInfo_;
        }

        public final RiskInfoOrBuilder getRiskInfoOrBuilder() {
            return this.riskInfo_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, this.cardInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, this.cvn2_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeMessageSize(4, this.riskInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getIssuerIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasCardInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasCvn2() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasIssuerId() {
            return (this.bitField0_ & 16) == 16;
        }

        public final boolean hasRiskInfo() {
            return (this.bitField0_ & 8) == 8;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(AddCardForQrRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, this.cardInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, this.cvn2_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeMessage(4, this.riskInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getIssuerIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface AddCardForQrRequestOrBuilder extends MessageOrBuilder {
        ByteString getCardInfo();

        ByteString getCvn2();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        String getIssuerId();

        ByteString getIssuerIdBytes();

        RiskInfo getRiskInfo();

        RiskInfoOrBuilder getRiskInfoOrBuilder();

        boolean hasCardInfo();

        boolean hasCvn2();

        boolean hasDeviceId();

        boolean hasIssuerId();

        boolean hasRiskInfo();
    }

    public static final class AddCardForQrResponse extends GeneratedMessage implements AddCardForQrResponseOrBuilder {
        public static Parser<AddCardForQrResponse> PARSER = new AbstractParser<AddCardForQrResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.AddCardForQrResponse.AnonymousClass1 */

            public final AddCardForQrResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new AddCardForQrResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final AddCardForQrResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public QrCardInfo cardInfo_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements AddCardForQrResponseOrBuilder {
            private int bitField0_;
            private SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> cardInfoBuilder_;
            private QrCardInfo cardInfo_;
            private Object errorDesc_;
            private int result_;

            private Builder() {
                this.cardInfo_ = QrCardInfo.getDefaultInstance();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardInfo_ = QrCardInfo.getDefaultInstance();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            private SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> getCardInfoFieldBuilder() {
                if (this.cardInfoBuilder_ == null) {
                    this.cardInfoBuilder_ = new SingleFieldBuilder<>(this.cardInfo_, getParentForChildren(), isClean());
                    this.cardInfo_ = null;
                }
                return this.cardInfoBuilder_;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                if (AddCardForQrResponse.alwaysUseFieldBuilders) {
                    getCardInfoFieldBuilder();
                }
            }

            public final AddCardForQrResponse build() {
                AddCardForQrResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final AddCardForQrResponse buildPartial() {
                AddCardForQrResponse addCardForQrResponse = new AddCardForQrResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                addCardForQrResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                addCardForQrResponse.cardInfo_ = singleFieldBuilder == null ? this.cardInfo_ : singleFieldBuilder.build();
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                addCardForQrResponse.errorDesc_ = this.errorDesc_;
                addCardForQrResponse.bitField0_ = i2;
                onBuilt();
                return addCardForQrResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardInfo_ = QrCardInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearCardInfo() {
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardInfo_ = QrCardInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = AddCardForQrResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final QrCardInfo getCardInfo() {
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                return singleFieldBuilder == null ? this.cardInfo_ : singleFieldBuilder.getMessage();
            }

            public final QrCardInfo.Builder getCardInfoBuilder() {
                this.bitField0_ |= 2;
                onChanged();
                return getCardInfoFieldBuilder().getBuilder();
            }

            public final QrCardInfoOrBuilder getCardInfoOrBuilder() {
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                return singleFieldBuilder != null ? singleFieldBuilder.getMessageOrBuilder() : this.cardInfo_;
            }

            public final AddCardForQrResponse getDefaultInstanceForType() {
                return AddCardForQrResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final boolean hasCardInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AddCardForQrResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                return !hasCardInfo() || getCardInfo().isInitialized();
            }

            public final Builder mergeCardInfo(QrCardInfo qrCardInfo) {
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2 && this.cardInfo_ != QrCardInfo.getDefaultInstance()) {
                        qrCardInfo = QrCardInfo.newBuilder(this.cardInfo_).mergeFrom(qrCardInfo).buildPartial();
                    }
                    this.cardInfo_ = qrCardInfo;
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(qrCardInfo);
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                AddCardForQrResponse addCardForQrResponse;
                AddCardForQrResponse addCardForQrResponse2 = null;
                try {
                    AddCardForQrResponse parsePartialFrom = AddCardForQrResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    addCardForQrResponse = (AddCardForQrResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    addCardForQrResponse2 = addCardForQrResponse;
                }
                if (addCardForQrResponse2 != null) {
                    mergeFrom(addCardForQrResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof AddCardForQrResponse) {
                    return mergeFrom((AddCardForQrResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(AddCardForQrResponse addCardForQrResponse) {
                if (addCardForQrResponse == AddCardForQrResponse.getDefaultInstance()) {
                    return this;
                }
                if (addCardForQrResponse.hasResult()) {
                    setResult(addCardForQrResponse.getResult());
                }
                if (addCardForQrResponse.hasCardInfo()) {
                    mergeCardInfo(addCardForQrResponse.getCardInfo());
                }
                if (addCardForQrResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = addCardForQrResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(addCardForQrResponse.getUnknownFields());
                return this;
            }

            public final Builder setCardInfo(QrCardInfo.Builder builder) {
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setCardInfo(QrCardInfo qrCardInfo) {
                SingleFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> singleFieldBuilder = this.cardInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(qrCardInfo);
                } else if (qrCardInfo != null) {
                    this.cardInfo_ = qrCardInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }
        }

        static {
            AddCardForQrResponse addCardForQrResponse = new AddCardForQrResponse(true);
            defaultInstance = addCardForQrResponse;
            addCardForQrResponse.initFields();
        }

        private AddCardForQrResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            QrCardInfo.Builder builder = (this.bitField0_ & 2) == 2 ? this.cardInfo_.toBuilder() : null;
                            this.cardInfo_ = (QrCardInfo) codedInputStream.readMessage(QrCardInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.cardInfo_);
                                this.cardInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 2;
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private AddCardForQrResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AddCardForQrResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AddCardForQrResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.cardInfo_ = QrCardInfo.getDefaultInstance();
            this.errorDesc_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(AddCardForQrResponse addCardForQrResponse) {
            return newBuilder().mergeFrom(addCardForQrResponse);
        }

        public static AddCardForQrResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static AddCardForQrResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static AddCardForQrResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static AddCardForQrResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static AddCardForQrResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static AddCardForQrResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static AddCardForQrResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static AddCardForQrResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static AddCardForQrResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static AddCardForQrResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final QrCardInfo getCardInfo() {
            return this.cardInfo_;
        }

        public final QrCardInfoOrBuilder getCardInfoOrBuilder() {
            return this.cardInfo_;
        }

        public final AddCardForQrResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<AddCardForQrResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeMessageSize(2, this.cardInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasCardInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AddCardForQrResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCardInfo() || getCardInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(2, this.cardInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface AddCardForQrResponseOrBuilder extends MessageOrBuilder {
        QrCardInfo getCardInfo();

        QrCardInfoOrBuilder getCardInfoOrBuilder();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasCardInfo();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public static final class AppletStatusResponse extends GeneratedMessage implements AppletStatusResponseOrBuilder {
        public static Parser<AppletStatusResponse> PARSER = new AbstractParser<AppletStatusResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.AppletStatusResponse.AnonymousClass1 */

            public final AppletStatusResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new AppletStatusResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final AppletStatusResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        public int status_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements AppletStatusResponseOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private int result_;
            private int status_;

            private Builder() {
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = AppletStatusResponse.alwaysUseFieldBuilders;
            }

            public final AppletStatusResponse build() {
                AppletStatusResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final AppletStatusResponse buildPartial() {
                AppletStatusResponse appletStatusResponse = new AppletStatusResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                appletStatusResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                appletStatusResponse.errorDesc_ = this.errorDesc_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                appletStatusResponse.status_ = this.status_;
                appletStatusResponse.bitField0_ = i2;
                onBuilt();
                return appletStatusResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.errorDesc_ = "";
                this.bitField0_ &= -3;
                this.status_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -3;
                this.errorDesc_ = AppletStatusResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clearStatus() {
                this.bitField0_ &= -5;
                this.status_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final AppletStatusResponse getDefaultInstanceForType() {
                return AppletStatusResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final int getStatus() {
                return this.status_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasStatus() {
                return (this.bitField0_ & 4) == 4;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AppletStatusResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                AppletStatusResponse appletStatusResponse;
                AppletStatusResponse appletStatusResponse2 = null;
                try {
                    AppletStatusResponse parsePartialFrom = AppletStatusResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    appletStatusResponse = (AppletStatusResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    appletStatusResponse2 = appletStatusResponse;
                }
                if (appletStatusResponse2 != null) {
                    mergeFrom(appletStatusResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof AppletStatusResponse) {
                    return mergeFrom((AppletStatusResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(AppletStatusResponse appletStatusResponse) {
                if (appletStatusResponse == AppletStatusResponse.getDefaultInstance()) {
                    return this;
                }
                if (appletStatusResponse.hasResult()) {
                    setResult(appletStatusResponse.getResult());
                }
                if (appletStatusResponse.hasErrorDesc()) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = appletStatusResponse.errorDesc_;
                    onChanged();
                }
                if (appletStatusResponse.hasStatus()) {
                    setStatus(appletStatusResponse.getStatus());
                }
                mergeUnknownFields(appletStatusResponse.getUnknownFields());
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder setStatus(int i) {
                this.bitField0_ |= 4;
                this.status_ = i;
                onChanged();
                return this;
            }
        }

        static {
            AppletStatusResponse appletStatusResponse = new AppletStatusResponse(true);
            defaultInstance = appletStatusResponse;
            appletStatusResponse.initFields();
        }

        private AppletStatusResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.status_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private AppletStatusResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private AppletStatusResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static AppletStatusResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.errorDesc_ = "";
            this.status_ = 0;
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(AppletStatusResponse appletStatusResponse) {
            return newBuilder().mergeFrom(appletStatusResponse);
        }

        public static AppletStatusResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static AppletStatusResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static AppletStatusResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static AppletStatusResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static AppletStatusResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static AppletStatusResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static AppletStatusResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static AppletStatusResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static AppletStatusResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static AppletStatusResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final AppletStatusResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<AppletStatusResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getErrorDescBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.status_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final int getStatus() {
            return this.status_;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasStatus() {
            return (this.bitField0_ & 4) == 4;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(AppletStatusResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getErrorDescBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.status_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface AppletStatusResponseOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        int getStatus();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasStatus();
    }

    public interface BankCardInfoOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getCardArt();

        ByteString getCardArtBytes();

        int getCardElementsOption();

        String getCardNumber();

        ByteString getCardNumberBytes();

        int getCardType();

        String getFrontColor();

        ByteString getFrontColorBytes();

        boolean getHasQrToken();

        CardIssuerInfo getIssuerInfo();

        CardIssuerInfoOrBuilder getIssuerInfoOrBuilder();

        String getLastDigits();

        ByteString getLastDigitsBytes();

        String getProductId();

        ByteString getProductIdBytes();

        String getProductName();

        ByteString getProductNameBytes();

        String getServiceHotline();

        ByteString getServiceHotlineBytes();

        String getSuggestion();

        ByteString getSuggestionBytes();

        String getUserId();

        ByteString getUserIdBytes();

        String getUserTerms();

        ByteString getUserTermsBytes();

        int getVcStatus();

        String getVirtualCardNumber();

        ByteString getVirtualCardNumberBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasAid();

        boolean hasCardArt();

        boolean hasCardElementsOption();

        boolean hasCardNumber();

        boolean hasCardType();

        boolean hasFrontColor();

        boolean hasHasQrToken();

        boolean hasIssuerInfo();

        boolean hasLastDigits();

        boolean hasProductId();

        boolean hasProductName();

        boolean hasServiceHotline();

        boolean hasSuggestion();

        boolean hasUserId();

        boolean hasUserTerms();

        boolean hasVcStatus();

        boolean hasVirtualCardNumber();

        boolean hasVirtualCardReferenceId();
    }

    public static final class BankCardListForQrRequest extends GeneratedMessage implements BankCardListForQrRequestOrBuilder {
        public static Parser<BankCardListForQrRequest> PARSER = new AbstractParser<BankCardListForQrRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.BankCardListForQrRequest.AnonymousClass1 */

            public final BankCardListForQrRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new BankCardListForQrRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final BankCardListForQrRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object deviceId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements BankCardListForQrRequestOrBuilder {
            private int bitField0_;
            private Object deviceId_;

            private Builder() {
                this.deviceId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceId_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = BankCardListForQrRequest.alwaysUseFieldBuilders;
            }

            public final BankCardListForQrRequest build() {
                BankCardListForQrRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final BankCardListForQrRequest buildPartial() {
                BankCardListForQrRequest bankCardListForQrRequest = new BankCardListForQrRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                bankCardListForQrRequest.deviceId_ = this.deviceId_;
                bankCardListForQrRequest.bitField0_ = i;
                onBuilt();
                return bankCardListForQrRequest;
            }

            public final Builder clear() {
                super.clear();
                this.deviceId_ = "";
                this.bitField0_ &= -2;
                return this;
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -2;
                this.deviceId_ = BankCardListForQrRequest.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final BankCardListForQrRequest getDefaultInstanceForType() {
                return BankCardListForQrRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_descriptor;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(BankCardListForQrRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                BankCardListForQrRequest bankCardListForQrRequest;
                BankCardListForQrRequest bankCardListForQrRequest2 = null;
                try {
                    BankCardListForQrRequest parsePartialFrom = BankCardListForQrRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    bankCardListForQrRequest = (BankCardListForQrRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    bankCardListForQrRequest2 = bankCardListForQrRequest;
                }
                if (bankCardListForQrRequest2 != null) {
                    mergeFrom(bankCardListForQrRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof BankCardListForQrRequest) {
                    return mergeFrom((BankCardListForQrRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(BankCardListForQrRequest bankCardListForQrRequest) {
                if (bankCardListForQrRequest == BankCardListForQrRequest.getDefaultInstance()) {
                    return this;
                }
                if (bankCardListForQrRequest.hasDeviceId()) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = bankCardListForQrRequest.deviceId_;
                    onChanged();
                }
                mergeUnknownFields(bankCardListForQrRequest.getUnknownFields());
                return this;
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            BankCardListForQrRequest bankCardListForQrRequest = new BankCardListForQrRequest(true);
            defaultInstance = bankCardListForQrRequest;
            bankCardListForQrRequest.initFields();
        }

        private BankCardListForQrRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private BankCardListForQrRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private BankCardListForQrRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static BankCardListForQrRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_descriptor;
        }

        private void initFields() {
            this.deviceId_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(BankCardListForQrRequest bankCardListForQrRequest) {
            return newBuilder().mergeFrom(bankCardListForQrRequest);
        }

        public static BankCardListForQrRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static BankCardListForQrRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static BankCardListForQrRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static BankCardListForQrRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static BankCardListForQrRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static BankCardListForQrRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static BankCardListForQrRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static BankCardListForQrRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static BankCardListForQrRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static BankCardListForQrRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final BankCardListForQrRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<BankCardListForQrRequest> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getDeviceIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(BankCardListForQrRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDeviceIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface BankCardListForQrRequestOrBuilder extends MessageOrBuilder {
        String getDeviceId();

        ByteString getDeviceIdBytes();

        boolean hasDeviceId();
    }

    public static final class BankCardListForQrResponse extends GeneratedMessage implements BankCardListForQrResponseOrBuilder {
        public static Parser<BankCardListForQrResponse> PARSER = new AbstractParser<BankCardListForQrResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.BankCardListForQrResponse.AnonymousClass1 */

            public final BankCardListForQrResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new BankCardListForQrResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final BankCardListForQrResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public List<QrCardInfo> cardInfoList_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements BankCardListForQrResponseOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> cardInfoListBuilder_;
            private List<QrCardInfo> cardInfoList_;
            private Object errorDesc_;
            private int result_;

            private Builder() {
                this.cardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            private void ensureCardInfoListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.cardInfoList_ = new ArrayList(this.cardInfoList_);
                    this.bitField0_ |= 2;
                }
            }

            private RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> getCardInfoListFieldBuilder() {
                if (this.cardInfoListBuilder_ == null) {
                    this.cardInfoListBuilder_ = new RepeatedFieldBuilder<>(this.cardInfoList_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.cardInfoList_ = null;
                }
                return this.cardInfoListBuilder_;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                if (BankCardListForQrResponse.alwaysUseFieldBuilders) {
                    getCardInfoListFieldBuilder();
                }
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$QrCardInfo>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$QrCardInfo>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllCardInfoList(Iterable<? extends QrCardInfo> iterable) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.cardInfoList_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder addCardInfoList(int i, QrCardInfo.Builder builder) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addCardInfoList(int i, QrCardInfo qrCardInfo) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, qrCardInfo);
                } else if (qrCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(i, qrCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfoList(QrCardInfo.Builder builder) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addCardInfoList(QrCardInfo qrCardInfo) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(qrCardInfo);
                } else if (qrCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(qrCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final QrCardInfo.Builder addCardInfoListBuilder() {
                return getCardInfoListFieldBuilder().addBuilder(QrCardInfo.getDefaultInstance());
            }

            public final QrCardInfo.Builder addCardInfoListBuilder(int i) {
                return getCardInfoListFieldBuilder().addBuilder(i, QrCardInfo.getDefaultInstance());
            }

            public final BankCardListForQrResponse build() {
                BankCardListForQrResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final BankCardListForQrResponse buildPartial() {
                List<QrCardInfo> list;
                BankCardListForQrResponse bankCardListForQrResponse = new BankCardListForQrResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                bankCardListForQrResponse.result_ = this.result_;
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
                        this.bitField0_ &= -3;
                    }
                    list = this.cardInfoList_;
                } else {
                    list = repeatedFieldBuilder.build();
                }
                bankCardListForQrResponse.cardInfoList_ = list;
                if ((i & 4) == 4) {
                    i2 |= 2;
                }
                bankCardListForQrResponse.errorDesc_ = this.errorDesc_;
                bankCardListForQrResponse.bitField0_ = i2;
                onBuilt();
                return bankCardListForQrResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearCardInfoList() {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = BankCardListForQrResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final QrCardInfo getCardInfoList(int i) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                return repeatedFieldBuilder == null ? this.cardInfoList_.get(i) : repeatedFieldBuilder.getMessage(i);
            }

            public final QrCardInfo.Builder getCardInfoListBuilder(int i) {
                return getCardInfoListFieldBuilder().getBuilder(i);
            }

            public final List<QrCardInfo.Builder> getCardInfoListBuilderList() {
                return getCardInfoListFieldBuilder().getBuilderList();
            }

            public final int getCardInfoListCount() {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                return repeatedFieldBuilder == null ? this.cardInfoList_.size() : repeatedFieldBuilder.getCount();
            }

            public final List<QrCardInfo> getCardInfoListList() {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                return repeatedFieldBuilder == null ? Collections.unmodifiableList(this.cardInfoList_) : repeatedFieldBuilder.getMessageList();
            }

            public final QrCardInfoOrBuilder getCardInfoListOrBuilder(int i) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                return (QrCardInfoOrBuilder) (repeatedFieldBuilder == null ? this.cardInfoList_.get(i) : repeatedFieldBuilder.getMessageOrBuilder(i));
            }

            public final List<? extends QrCardInfoOrBuilder> getCardInfoListOrBuilderList() {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                return repeatedFieldBuilder != null ? repeatedFieldBuilder.getMessageOrBuilderList() : Collections.unmodifiableList(this.cardInfoList_);
            }

            public final BankCardListForQrResponse getDefaultInstanceForType() {
                return BankCardListForQrResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(BankCardListForQrResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                for (int i = 0; i < getCardInfoListCount(); i++) {
                    if (!getCardInfoList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                BankCardListForQrResponse bankCardListForQrResponse;
                BankCardListForQrResponse bankCardListForQrResponse2 = null;
                try {
                    BankCardListForQrResponse parsePartialFrom = BankCardListForQrResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    bankCardListForQrResponse = (BankCardListForQrResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    bankCardListForQrResponse2 = bankCardListForQrResponse;
                }
                if (bankCardListForQrResponse2 != null) {
                    mergeFrom(bankCardListForQrResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof BankCardListForQrResponse) {
                    return mergeFrom((BankCardListForQrResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(BankCardListForQrResponse bankCardListForQrResponse) {
                if (bankCardListForQrResponse == BankCardListForQrResponse.getDefaultInstance()) {
                    return this;
                }
                if (bankCardListForQrResponse.hasResult()) {
                    setResult(bankCardListForQrResponse.getResult());
                }
                if (this.cardInfoListBuilder_ == null) {
                    if (!bankCardListForQrResponse.cardInfoList_.isEmpty()) {
                        if (this.cardInfoList_.isEmpty()) {
                            this.cardInfoList_ = bankCardListForQrResponse.cardInfoList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureCardInfoListIsMutable();
                            this.cardInfoList_.addAll(bankCardListForQrResponse.cardInfoList_);
                        }
                        onChanged();
                    }
                } else if (!bankCardListForQrResponse.cardInfoList_.isEmpty()) {
                    if (this.cardInfoListBuilder_.isEmpty()) {
                        this.cardInfoListBuilder_.dispose();
                        RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = null;
                        this.cardInfoListBuilder_ = null;
                        this.cardInfoList_ = bankCardListForQrResponse.cardInfoList_;
                        this.bitField0_ &= -3;
                        if (BankCardListForQrResponse.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getCardInfoListFieldBuilder();
                        }
                        this.cardInfoListBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.cardInfoListBuilder_.addAllMessages(bankCardListForQrResponse.cardInfoList_);
                    }
                }
                if (bankCardListForQrResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = bankCardListForQrResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(bankCardListForQrResponse.getUnknownFields());
                return this;
            }

            public final Builder removeCardInfoList(int i) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final Builder setCardInfoList(int i, QrCardInfo.Builder builder) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder setCardInfoList(int i, QrCardInfo qrCardInfo) {
                RepeatedFieldBuilder<QrCardInfo, QrCardInfo.Builder, QrCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, qrCardInfo);
                } else if (qrCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.set(i, qrCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }
        }

        static {
            BankCardListForQrResponse bankCardListForQrResponse = new BankCardListForQrResponse(true);
            defaultInstance = bankCardListForQrResponse;
            bankCardListForQrResponse.initFields();
        }

        private BankCardListForQrResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.cardInfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.cardInfoList_.add(codedInputStream.readMessage(QrCardInfo.PARSER, extensionRegistryLite));
                        } else if (readTag == 26) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private BankCardListForQrResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private BankCardListForQrResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static BankCardListForQrResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.cardInfoList_ = Collections.emptyList();
            this.errorDesc_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(BankCardListForQrResponse bankCardListForQrResponse) {
            return newBuilder().mergeFrom(bankCardListForQrResponse);
        }

        public static BankCardListForQrResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static BankCardListForQrResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static BankCardListForQrResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static BankCardListForQrResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static BankCardListForQrResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static BankCardListForQrResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static BankCardListForQrResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static BankCardListForQrResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static BankCardListForQrResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static BankCardListForQrResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final QrCardInfo getCardInfoList(int i) {
            return this.cardInfoList_.get(i);
        }

        public final int getCardInfoListCount() {
            return this.cardInfoList_.size();
        }

        public final List<QrCardInfo> getCardInfoListList() {
            return this.cardInfoList_;
        }

        public final QrCardInfoOrBuilder getCardInfoListOrBuilder(int i) {
            return this.cardInfoList_.get(i);
        }

        public final List<? extends QrCardInfoOrBuilder> getCardInfoListOrBuilderList() {
            return this.cardInfoList_;
        }

        public final BankCardListForQrResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<BankCardListForQrResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            for (int i2 = 0; i2 < this.cardInfoList_.size(); i2++) {
                computeInt32Size += CodedOutputStream.computeMessageSize(2, this.cardInfoList_.get(i2));
            }
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = computeInt32Size + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(BankCardListForQrResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getCardInfoListCount(); i++) {
                if (!getCardInfoList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            for (int i = 0; i < this.cardInfoList_.size(); i++) {
                codedOutputStream.writeMessage(2, this.cardInfoList_.get(i));
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface BankCardListForQrResponseOrBuilder extends MessageOrBuilder {
        QrCardInfo getCardInfoList(int i);

        int getCardInfoListCount();

        List<QrCardInfo> getCardInfoListList();

        QrCardInfoOrBuilder getCardInfoListOrBuilder(int i);

        List<? extends QrCardInfoOrBuilder> getCardInfoListOrBuilderList();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public interface CardIssuerInfoOrBuilder extends MessageOrBuilder {
        String getBankName();

        ByteString getBankNameBytes();

        String getBgImage();

        ByteString getBgImageBytes();

        CardIssueChannel getCardIssueChannel();

        String getContactNumber();

        ByteString getContactNumberBytes();

        String getHotline();

        ByteString getHotlineBytes();

        String getIssuerId();

        ByteString getIssuerIdBytes();

        String getLogoUrl();

        ByteString getLogoUrlBytes();

        String getLogoWithBankNameUrl();

        ByteString getLogoWithBankNameUrlBytes();

        boolean hasBankName();

        boolean hasBgImage();

        boolean hasCardIssueChannel();

        boolean hasContactNumber();

        boolean hasHotline();

        boolean hasIssuerId();

        boolean hasLogoUrl();

        boolean hasLogoWithBankNameUrl();
    }

    public interface CheckSeUpgradeResponseOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        String getFrontConfig();

        ByteString getFrontConfigBytes();

        boolean getNeedUpgrade();

        int getResult();

        boolean hasErrorDesc();

        boolean hasFrontConfig();

        boolean hasNeedUpgrade();

        boolean hasResult();
    }

    public interface CheckServiceRequestOrBuilder extends MessageOrBuilder {
        String getCplc();

        ByteString getCplcBytes();

        DeviceInfo getDeviceInfo();

        DeviceInfoOrBuilder getDeviceInfoOrBuilder();

        String getExtra();

        ByteString getExtraBytes();

        CommonRiskInfo getRiskInfo();

        CommonRiskInfoOrBuilder getRiskInfoOrBuilder();

        ServiceType getSeviceType();

        boolean hasCplc();

        boolean hasDeviceInfo();

        boolean hasExtra();

        boolean hasRiskInfo();

        boolean hasSeviceType();
    }

    public interface CommonResponseOrBuilder extends MessageOrBuilder {
        String getDescription();

        ByteString getDescriptionBytes();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasDescription();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public interface CommonRiskInfoOrBuilder extends MessageOrBuilder {
        String getAccountId();

        ByteString getAccountIdBytes();

        String getLocation();

        ByteString getLocationBytes();

        String getMd5Imei();

        ByteString getMd5ImeiBytes();

        String getSimNumber(int i);

        ByteString getSimNumberBytes(int i);

        int getSimNumberCount();

        List<String> getSimNumberList();

        boolean hasAccountId();

        boolean hasLocation();

        boolean hasMd5Imei();
    }

    public interface CopyMifareCardRequestOrBuilder extends MessageOrBuilder {
        String getAtqa();

        ByteString getAtqaBytes();

        MifareCardType getCardType();

        String getContent();

        ByteString getContentBytes();

        String getMd5Imei();

        ByteString getMd5ImeiBytes();

        String getSak();

        ByteString getSakBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        int getSize();

        String getUid();

        ByteString getUidBytes();

        boolean hasAtqa();

        boolean hasCardType();

        boolean hasContent();

        boolean hasMd5Imei();

        boolean hasSak();

        boolean hasSessionId();

        boolean hasSize();

        boolean hasUid();
    }

    public static final class DeleteBankCardRequest extends GeneratedMessage implements DeleteBankCardRequestOrBuilder {
        public static Parser<DeleteBankCardRequest> PARSER = new AbstractParser<DeleteBankCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.DeleteBankCardRequest.AnonymousClass1 */

            public final DeleteBankCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DeleteBankCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final DeleteBankCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;
        public Object virtualCardReferenceId_;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements DeleteBankCardRequestOrBuilder {
            private int bitField0_;
            private Object sessionId_;
            private Object virtualCardReferenceId_;

            private Builder() {
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = DeleteBankCardRequest.alwaysUseFieldBuilders;
            }

            public final DeleteBankCardRequest build() {
                DeleteBankCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final DeleteBankCardRequest buildPartial() {
                DeleteBankCardRequest deleteBankCardRequest = new DeleteBankCardRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                deleteBankCardRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                deleteBankCardRequest.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                deleteBankCardRequest.bitField0_ = i2;
                onBuilt();
                return deleteBankCardRequest;
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = DeleteBankCardRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = DeleteBankCardRequest.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final DeleteBankCardRequest getDefaultInstanceForType() {
                return DeleteBankCardRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_descriptor;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteBankCardRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasSessionId() && hasVirtualCardReferenceId();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                DeleteBankCardRequest deleteBankCardRequest;
                DeleteBankCardRequest deleteBankCardRequest2 = null;
                try {
                    DeleteBankCardRequest parsePartialFrom = DeleteBankCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    deleteBankCardRequest = (DeleteBankCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    deleteBankCardRequest2 = deleteBankCardRequest;
                }
                if (deleteBankCardRequest2 != null) {
                    mergeFrom(deleteBankCardRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof DeleteBankCardRequest) {
                    return mergeFrom((DeleteBankCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(DeleteBankCardRequest deleteBankCardRequest) {
                if (deleteBankCardRequest == DeleteBankCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (deleteBankCardRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = deleteBankCardRequest.sessionId_;
                    onChanged();
                }
                if (deleteBankCardRequest.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = deleteBankCardRequest.virtualCardReferenceId_;
                    onChanged();
                }
                mergeUnknownFields(deleteBankCardRequest.getUnknownFields());
                return this;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            DeleteBankCardRequest deleteBankCardRequest = new DeleteBankCardRequest(true);
            defaultInstance = deleteBankCardRequest;
            deleteBankCardRequest.initFields();
        }

        private DeleteBankCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private DeleteBankCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DeleteBankCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DeleteBankCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_descriptor;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.virtualCardReferenceId_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(DeleteBankCardRequest deleteBankCardRequest) {
            return newBuilder().mergeFrom(deleteBankCardRequest);
        }

        public static DeleteBankCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static DeleteBankCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static DeleteBankCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DeleteBankCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DeleteBankCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static DeleteBankCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static DeleteBankCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static DeleteBankCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static DeleteBankCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DeleteBankCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final DeleteBankCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final Parser<DeleteBankCardRequest> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getVirtualCardReferenceIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteBankCardRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVirtualCardReferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getVirtualCardReferenceIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface DeleteBankCardRequestOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasSessionId();

        boolean hasVirtualCardReferenceId();
    }

    public static final class DeleteQrBankCardRequest extends GeneratedMessage implements DeleteQrBankCardRequestOrBuilder {
        public static Parser<DeleteQrBankCardRequest> PARSER = new AbstractParser<DeleteQrBankCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.DeleteQrBankCardRequest.AnonymousClass1 */

            public final DeleteQrBankCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DeleteQrBankCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final DeleteQrBankCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cardReferenceId_;
        public Object deviceId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements DeleteQrBankCardRequestOrBuilder {
            private int bitField0_;
            private Object cardReferenceId_;
            private Object deviceId_;

            private Builder() {
                this.deviceId_ = "";
                this.cardReferenceId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceId_ = "";
                this.cardReferenceId_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = DeleteQrBankCardRequest.alwaysUseFieldBuilders;
            }

            public final DeleteQrBankCardRequest build() {
                DeleteQrBankCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final DeleteQrBankCardRequest buildPartial() {
                DeleteQrBankCardRequest deleteQrBankCardRequest = new DeleteQrBankCardRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                deleteQrBankCardRequest.deviceId_ = this.deviceId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                deleteQrBankCardRequest.cardReferenceId_ = this.cardReferenceId_;
                deleteQrBankCardRequest.bitField0_ = i2;
                onBuilt();
                return deleteQrBankCardRequest;
            }

            public final Builder clear() {
                super.clear();
                this.deviceId_ = "";
                this.bitField0_ &= -2;
                this.cardReferenceId_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clearCardReferenceId() {
                this.bitField0_ &= -3;
                this.cardReferenceId_ = DeleteQrBankCardRequest.getDefaultInstance().getCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -2;
                this.deviceId_ = DeleteQrBankCardRequest.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final String getCardReferenceId() {
                Object obj = this.cardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardReferenceIdBytes() {
                Object obj = this.cardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final DeleteQrBankCardRequest getDefaultInstanceForType() {
                return DeleteQrBankCardRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_descriptor;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasCardReferenceId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteQrBankCardRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                DeleteQrBankCardRequest deleteQrBankCardRequest;
                DeleteQrBankCardRequest deleteQrBankCardRequest2 = null;
                try {
                    DeleteQrBankCardRequest parsePartialFrom = DeleteQrBankCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    deleteQrBankCardRequest = (DeleteQrBankCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    deleteQrBankCardRequest2 = deleteQrBankCardRequest;
                }
                if (deleteQrBankCardRequest2 != null) {
                    mergeFrom(deleteQrBankCardRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof DeleteQrBankCardRequest) {
                    return mergeFrom((DeleteQrBankCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(DeleteQrBankCardRequest deleteQrBankCardRequest) {
                if (deleteQrBankCardRequest == DeleteQrBankCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (deleteQrBankCardRequest.hasDeviceId()) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = deleteQrBankCardRequest.deviceId_;
                    onChanged();
                }
                if (deleteQrBankCardRequest.hasCardReferenceId()) {
                    this.bitField0_ |= 2;
                    this.cardReferenceId_ = deleteQrBankCardRequest.cardReferenceId_;
                    onChanged();
                }
                mergeUnknownFields(deleteQrBankCardRequest.getUnknownFields());
                return this;
            }

            public final Builder setCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.cardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            DeleteQrBankCardRequest deleteQrBankCardRequest = new DeleteQrBankCardRequest(true);
            defaultInstance = deleteQrBankCardRequest;
            deleteQrBankCardRequest.initFields();
        }

        private DeleteQrBankCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.cardReferenceId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private DeleteQrBankCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DeleteQrBankCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DeleteQrBankCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_descriptor;
        }

        private void initFields() {
            this.deviceId_ = "";
            this.cardReferenceId_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(DeleteQrBankCardRequest deleteQrBankCardRequest) {
            return newBuilder().mergeFrom(deleteQrBankCardRequest);
        }

        public static DeleteQrBankCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static DeleteQrBankCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static DeleteQrBankCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DeleteQrBankCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DeleteQrBankCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static DeleteQrBankCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static DeleteQrBankCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static DeleteQrBankCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static DeleteQrBankCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DeleteQrBankCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final String getCardReferenceId() {
            Object obj = this.cardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardReferenceIdBytes() {
            Object obj = this.cardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final DeleteQrBankCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<DeleteQrBankCardRequest> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getCardReferenceIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasCardReferenceId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(DeleteQrBankCardRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getCardReferenceIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface DeleteQrBankCardRequestOrBuilder extends MessageOrBuilder {
        String getCardReferenceId();

        ByteString getCardReferenceIdBytes();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        boolean hasCardReferenceId();

        boolean hasDeviceId();
    }

    public interface DeviceInfoOrBuilder extends MessageOrBuilder {
        String getDeviceModel();

        ByteString getDeviceModelBytes();

        String getLang();

        ByteString getLangBytes();

        String getMiuiRomType();

        ByteString getMiuiRomTypeBytes();

        String getMiuiSystemVersion();

        ByteString getMiuiSystemVersionBytes();

        String getSeId();

        ByteString getSeIdBytes();

        int getTsmclientVersionCode();

        boolean hasDeviceModel();

        boolean hasLang();

        boolean hasMiuiRomType();

        boolean hasMiuiSystemVersion();

        boolean hasSeId();

        boolean hasTsmclientVersionCode();
    }

    public interface DoorCardInfoOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getApplyChannel();

        ByteString getApplyChannelBytes();

        String getBusinessId();

        ByteString getBusinessIdBytes();

        String getCardArt();

        ByteString getCardArtBytes();

        DoorCardType getCardType();

        String getCid();

        ByteString getCidBytes();

        String getCommunityCode();

        ByteString getCommunityCodeBytes();

        int getFingerFlag();

        String getName();

        ByteString getNameBytes();

        String getProductId();

        ByteString getProductIdBytes();

        String getProductName();

        ByteString getProductNameBytes();

        String getSeId();

        ByteString getSeIdBytes();

        String getStatus();

        ByteString getStatusBytes();

        String getUserTerms();

        ByteString getUserTermsBytes();

        int getVcStatus();

        boolean hasAid();

        boolean hasApplyChannel();

        boolean hasBusinessId();

        boolean hasCardArt();

        boolean hasCardType();

        boolean hasCid();

        boolean hasCommunityCode();

        boolean hasFingerFlag();

        boolean hasName();

        boolean hasProductId();

        boolean hasProductName();

        boolean hasSeId();

        boolean hasStatus();

        boolean hasUserTerms();

        boolean hasVcStatus();
    }

    public interface EidInfoOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getCardArt();

        ByteString getCardArtBytes();

        String getName();

        ByteString getNameBytes();

        int getVcStatus();

        boolean hasAid();

        boolean hasCardArt();

        boolean hasName();

        boolean hasVcStatus();
    }

    public interface EidInfoResponseOrBuilder extends MessageOrBuilder {
        EidInfo getEidInfo();

        EidInfoOrBuilder getEidInfoOrBuilder();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasEidInfo();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public interface EnrollDoorCardRequestOrBuilder extends MessageOrBuilder {
        String getApplyChannel();

        ByteString getApplyChannelBytes();

        String getBusinessId();

        ByteString getBusinessIdBytes();

        DoorCardType getCardType();

        String getCommunityCode();

        ByteString getCommunityCodeBytes();

        String getIssuerId();

        ByteString getIssuerIdBytes();

        String getIssuerToken();

        ByteString getIssuerTokenBytes();

        MifareCardParam getMifareCardParam();

        MifareCardParamOrBuilder getMifareCardParamOrBuilder();

        boolean getOverwrite();

        String getProductId();

        ByteString getProductIdBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getTicket();

        ByteString getTicketBytes();

        boolean hasApplyChannel();

        boolean hasBusinessId();

        boolean hasCardType();

        boolean hasCommunityCode();

        boolean hasIssuerId();

        boolean hasIssuerToken();

        boolean hasMifareCardParam();

        boolean hasOverwrite();

        boolean hasProductId();

        boolean hasSessionId();

        boolean hasTicket();
    }

    public interface EnrollEidRequestOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        String getSpToken();

        ByteString getSpTokenBytes();

        boolean hasSessionId();

        boolean hasSpToken();
    }

    public interface EnrollUPCardRequestOrBuilder extends MessageOrBuilder {
        String getApplyChannel();

        ByteString getApplyChannelBytes();

        BankCardType getBankCardType();

        ByteString getCardInfo();

        String getCardNumber();

        ByteString getCardNumberBytes();

        ByteString getCvn2Info();

        String getIssuerId();

        ByteString getIssuerIdBytes();

        ByteString getPinInfo();

        int getRequestSource();

        RiskInfo getRiskInfo();

        RiskInfoOrBuilder getRiskInfoOrBuilder();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getSourceChannel();

        ByteString getSourceChannelBytes();

        String getVirtualCardRefId();

        ByteString getVirtualCardRefIdBytes();

        boolean hasApplyChannel();

        boolean hasBankCardType();

        boolean hasCardInfo();

        boolean hasCardNumber();

        boolean hasCvn2Info();

        boolean hasIssuerId();

        boolean hasPinInfo();

        boolean hasRequestSource();

        boolean hasRiskInfo();

        boolean hasSessionId();

        boolean hasSourceChannel();

        boolean hasVirtualCardRefId();
    }

    public static final class IdentityBindRequest extends GeneratedMessage implements IdentityBindRequestOrBuilder {
        public static Parser<IdentityBindRequest> PARSER = new AbstractParser<IdentityBindRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.IdentityBindRequest.AnonymousClass1 */

            public final IdentityBindRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IdentityBindRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final IdentityBindRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object idCardNo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object name_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements IdentityBindRequestOrBuilder {
            private int bitField0_;
            private Object idCardNo_;
            private Object name_;

            private Builder() {
                this.name_ = "";
                this.idCardNo_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.name_ = "";
                this.idCardNo_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = IdentityBindRequest.alwaysUseFieldBuilders;
            }

            public final IdentityBindRequest build() {
                IdentityBindRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final IdentityBindRequest buildPartial() {
                IdentityBindRequest identityBindRequest = new IdentityBindRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                identityBindRequest.name_ = this.name_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                identityBindRequest.idCardNo_ = this.idCardNo_;
                identityBindRequest.bitField0_ = i2;
                onBuilt();
                return identityBindRequest;
            }

            public final Builder clear() {
                super.clear();
                this.name_ = "";
                this.bitField0_ &= -2;
                this.idCardNo_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clearIdCardNo() {
                this.bitField0_ &= -3;
                this.idCardNo_ = IdentityBindRequest.getDefaultInstance().getIdCardNo();
                onChanged();
                return this;
            }

            public final Builder clearName() {
                this.bitField0_ &= -2;
                this.name_ = IdentityBindRequest.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final IdentityBindRequest getDefaultInstanceForType() {
                return IdentityBindRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_descriptor;
            }

            public final String getIdCardNo() {
                Object obj = this.idCardNo_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.idCardNo_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIdCardNoBytes() {
                Object obj = this.idCardNo_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.idCardNo_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getNameBytes() {
                Object obj = this.name_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.name_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasIdCardNo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasName() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(IdentityBindRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IdentityBindRequest identityBindRequest;
                IdentityBindRequest identityBindRequest2 = null;
                try {
                    IdentityBindRequest parsePartialFrom = IdentityBindRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    identityBindRequest = (IdentityBindRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    identityBindRequest2 = identityBindRequest;
                }
                if (identityBindRequest2 != null) {
                    mergeFrom(identityBindRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof IdentityBindRequest) {
                    return mergeFrom((IdentityBindRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(IdentityBindRequest identityBindRequest) {
                if (identityBindRequest == IdentityBindRequest.getDefaultInstance()) {
                    return this;
                }
                if (identityBindRequest.hasName()) {
                    this.bitField0_ |= 1;
                    this.name_ = identityBindRequest.name_;
                    onChanged();
                }
                if (identityBindRequest.hasIdCardNo()) {
                    this.bitField0_ |= 2;
                    this.idCardNo_ = identityBindRequest.idCardNo_;
                    onChanged();
                }
                mergeUnknownFields(identityBindRequest.getUnknownFields());
                return this;
            }

            public final Builder setIdCardNo(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.idCardNo_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setIdCardNoBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.idCardNo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.name_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.name_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            IdentityBindRequest identityBindRequest = new IdentityBindRequest(true);
            defaultInstance = identityBindRequest;
            identityBindRequest.initFields();
        }

        private IdentityBindRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.name_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.idCardNo_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private IdentityBindRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IdentityBindRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static IdentityBindRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_descriptor;
        }

        private void initFields() {
            this.name_ = "";
            this.idCardNo_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(IdentityBindRequest identityBindRequest) {
            return newBuilder().mergeFrom(identityBindRequest);
        }

        public static IdentityBindRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static IdentityBindRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IdentityBindRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static IdentityBindRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IdentityBindRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static IdentityBindRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static IdentityBindRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static IdentityBindRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IdentityBindRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static IdentityBindRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final IdentityBindRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getIdCardNo() {
            Object obj = this.idCardNo_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.idCardNo_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIdCardNoBytes() {
            Object obj = this.idCardNo_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.idCardNo_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<IdentityBindRequest> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getIdCardNoBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasIdCardNo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasName() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(IdentityBindRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getIdCardNoBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface IdentityBindRequestOrBuilder extends MessageOrBuilder {
        String getIdCardNo();

        ByteString getIdCardNoBytes();

        String getName();

        ByteString getNameBytes();

        boolean hasIdCardNo();

        boolean hasName();
    }

    public static final class IdentityResponse extends GeneratedMessage implements IdentityResponseOrBuilder {
        public static Parser<IdentityResponse> PARSER = new AbstractParser<IdentityResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.IdentityResponse.AnonymousClass1 */

            public final IdentityResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new IdentityResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final IdentityResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public IdentityCardType cardType_;
        public Object errorDesc_;
        public Object idCardNo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object name_;
        public int result_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements IdentityResponseOrBuilder {
            private int bitField0_;
            private IdentityCardType cardType_;
            private Object errorDesc_;
            private Object idCardNo_;
            private Object name_;
            private int result_;

            private Builder() {
                this.name_ = "";
                this.idCardNo_ = "";
                this.errorDesc_ = "";
                this.cardType_ = IdentityCardType.ID_CARD;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.name_ = "";
                this.idCardNo_ = "";
                this.errorDesc_ = "";
                this.cardType_ = IdentityCardType.ID_CARD;
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = IdentityResponse.alwaysUseFieldBuilders;
            }

            public final IdentityResponse build() {
                IdentityResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final IdentityResponse buildPartial() {
                IdentityResponse identityResponse = new IdentityResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                identityResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                identityResponse.name_ = this.name_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                identityResponse.idCardNo_ = this.idCardNo_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                identityResponse.errorDesc_ = this.errorDesc_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                identityResponse.cardType_ = this.cardType_;
                identityResponse.bitField0_ = i2;
                onBuilt();
                return identityResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.name_ = "";
                this.bitField0_ &= -3;
                this.idCardNo_ = "";
                this.bitField0_ &= -5;
                this.errorDesc_ = "";
                this.bitField0_ &= -9;
                this.cardType_ = IdentityCardType.ID_CARD;
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -17;
                this.cardType_ = IdentityCardType.ID_CARD;
                onChanged();
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -9;
                this.errorDesc_ = IdentityResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearIdCardNo() {
                this.bitField0_ &= -5;
                this.idCardNo_ = IdentityResponse.getDefaultInstance().getIdCardNo();
                onChanged();
                return this;
            }

            public final Builder clearName() {
                this.bitField0_ &= -3;
                this.name_ = IdentityResponse.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final IdentityCardType getCardType() {
                return this.cardType_;
            }

            public final IdentityResponse getDefaultInstanceForType() {
                return IdentityResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getIdCardNo() {
                Object obj = this.idCardNo_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.idCardNo_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIdCardNoBytes() {
                Object obj = this.idCardNo_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.idCardNo_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getNameBytes() {
                Object obj = this.name_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.name_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 16) == 16;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 8) == 8;
            }

            public final boolean hasIdCardNo() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasName() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(IdentityResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                IdentityResponse identityResponse;
                IdentityResponse identityResponse2 = null;
                try {
                    IdentityResponse parsePartialFrom = IdentityResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    identityResponse = (IdentityResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    identityResponse2 = identityResponse;
                }
                if (identityResponse2 != null) {
                    mergeFrom(identityResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof IdentityResponse) {
                    return mergeFrom((IdentityResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(IdentityResponse identityResponse) {
                if (identityResponse == IdentityResponse.getDefaultInstance()) {
                    return this;
                }
                if (identityResponse.hasResult()) {
                    setResult(identityResponse.getResult());
                }
                if (identityResponse.hasName()) {
                    this.bitField0_ |= 2;
                    this.name_ = identityResponse.name_;
                    onChanged();
                }
                if (identityResponse.hasIdCardNo()) {
                    this.bitField0_ |= 4;
                    this.idCardNo_ = identityResponse.idCardNo_;
                    onChanged();
                }
                if (identityResponse.hasErrorDesc()) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = identityResponse.errorDesc_;
                    onChanged();
                }
                if (identityResponse.hasCardType()) {
                    setCardType(identityResponse.getCardType());
                }
                mergeUnknownFields(identityResponse.getUnknownFields());
                return this;
            }

            public final Builder setCardType(IdentityCardType identityCardType) {
                if (identityCardType != null) {
                    this.bitField0_ |= 16;
                    this.cardType_ = identityCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setIdCardNo(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.idCardNo_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setIdCardNoBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.idCardNo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.name_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.name_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }
        }

        static {
            IdentityResponse identityResponse = new IdentityResponse(true);
            defaultInstance = identityResponse;
            identityResponse.initFields();
        }

        private IdentityResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.name_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.idCardNo_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 40) {
                            int readEnum = codedInputStream.readEnum();
                            IdentityCardType valueOf = IdentityCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(5, readEnum);
                            } else {
                                this.bitField0_ |= 16;
                                this.cardType_ = valueOf;
                            }
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private IdentityResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private IdentityResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static IdentityResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.name_ = "";
            this.idCardNo_ = "";
            this.errorDesc_ = "";
            this.cardType_ = IdentityCardType.ID_CARD;
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(IdentityResponse identityResponse) {
            return newBuilder().mergeFrom(identityResponse);
        }

        public static IdentityResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static IdentityResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static IdentityResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static IdentityResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static IdentityResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static IdentityResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static IdentityResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static IdentityResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static IdentityResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static IdentityResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final IdentityCardType getCardType() {
            return this.cardType_;
        }

        public final IdentityResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getIdCardNo() {
            Object obj = this.idCardNo_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.idCardNo_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIdCardNoBytes() {
            Object obj = this.idCardNo_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.idCardNo_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<IdentityResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getIdCardNoBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getErrorDescBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeEnumSize(5, this.cardType_.getNumber());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 16) == 16;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 8) == 8;
        }

        public final boolean hasIdCardNo() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasName() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(IdentityResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getIdCardNoBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getErrorDescBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeEnum(5, this.cardType_.getNumber());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface IdentityResponseOrBuilder extends MessageOrBuilder {
        IdentityCardType getCardType();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        String getIdCardNo();

        ByteString getIdCardNoBytes();

        String getName();

        ByteString getNameBytes();

        int getResult();

        boolean hasCardType();

        boolean hasErrorDesc();

        boolean hasIdCardNo();

        boolean hasName();

        boolean hasResult();
    }

    public interface InAppPayResultOrBuilder extends MessageOrBuilder {
        int getAcquirer();

        String getMerchantId();

        ByteString getMerchantIdBytes();

        String getOrderNumber();

        ByteString getOrderNumberBytes();

        String getPan();

        ByteString getPanBytes();

        int getResult();

        boolean hasAcquirer();

        boolean hasMerchantId();

        boolean hasOrderNumber();

        boolean hasPan();

        boolean hasResult();
    }

    public interface InAppTransCommandOrBuilder extends MessageOrBuilder {
        TsmCAPDU getApdus();

        TsmCAPDUOrBuilder getApdusOrBuilder();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getKeyIndex();

        int getResult();

        String getSign();

        ByteString getSignBytes();

        String getTimestamp();

        ByteString getTimestampBytes();

        boolean hasApdus();

        boolean hasErrorDesc();

        boolean hasKeyIndex();

        boolean hasResult();

        boolean hasSign();

        boolean hasTimestamp();
    }

    public interface InAppTransDataOrBuilder extends MessageOrBuilder {
        int getAcquirer();

        String getCardReferenceId();

        ByteString getCardReferenceIdBytes();

        String getCurrencyCode();

        ByteString getCurrencyCodeBytes();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        long getDiscountAmount();

        String getEncryptPayAmount();

        ByteString getEncryptPayAmountBytes();

        String getMerchantId();

        ByteString getMerchantIdBytes();

        String getMerchantName();

        ByteString getMerchantNameBytes();

        String getOrderNumber();

        ByteString getOrderNumberBytes();

        String getPan();

        ByteString getPanBytes();

        long getPayAmount();

        String getPbocAid();

        ByteString getPbocAidBytes();

        String getSign();

        ByteString getSignBytes();

        int getSignKeyIndex();

        long getTotalAmount();

        int getVerifyMethod();

        boolean hasAcquirer();

        boolean hasCardReferenceId();

        boolean hasCurrencyCode();

        boolean hasDeviceId();

        boolean hasDiscountAmount();

        boolean hasEncryptPayAmount();

        boolean hasMerchantId();

        boolean hasMerchantName();

        boolean hasOrderNumber();

        boolean hasPan();

        boolean hasPayAmount();

        boolean hasPbocAid();

        boolean hasSign();

        boolean hasSignKeyIndex();

        boolean hasTotalAmount();

        boolean hasVerifyMethod();
    }

    public interface MifareCardInfoOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getCardArt();

        ByteString getCardArtBytes();

        MifareCardType getCardType();

        int getFingerFlag();

        String getName();

        ByteString getNameBytes();

        String getUserTerms();

        ByteString getUserTermsBytes();

        int getVcStatus();

        boolean hasAid();

        boolean hasCardArt();

        boolean hasCardType();

        boolean hasFingerFlag();

        boolean hasName();

        boolean hasUserTerms();

        boolean hasVcStatus();
    }

    public interface MifareCardParamOrBuilder extends MessageOrBuilder {
        String getAtqa();

        ByteString getAtqaBytes();

        String getContent();

        ByteString getContentBytes();

        String getSak();

        ByteString getSakBytes();

        int getSectorType();

        int getSize();

        String getUid();

        ByteString getUidBytes();

        boolean hasAtqa();

        boolean hasContent();

        boolean hasSak();

        boolean hasSectorType();

        boolean hasSize();

        boolean hasUid();
    }

    public interface PersoFinishNotifyRequestOrBuilder extends MessageOrBuilder {
        boolean getOperationResult();

        SeAPDUResponseItem getResponse(int i);

        int getResponseCount();

        List<SeAPDUResponseItem> getResponseList();

        SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i);

        List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasOperationResult();

        boolean hasSessionId();

        boolean hasVirtualCardReferenceId();
    }

    public interface PreparePayAppletRequestOrBuilder extends MessageOrBuilder {
        CardIssuerInfo getCardIssuerInfo();

        CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder();

        BankCardType getCardType();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasCardIssuerInfo();

        boolean hasCardType();

        boolean hasSessionId();
    }

    public interface ProcessFinishNotifyRequestOrBuilder extends MessageOrBuilder {
        boolean getActionResult();

        SeOperationType getActionType();

        SeAPDUResponseItem getResponse(int i);

        int getResponseCount();

        List<SeAPDUResponseItem> getResponseList();

        SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i);

        List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasActionResult();

        boolean hasActionType();

        boolean hasSessionId();
    }

    public interface PullBusCardDataRequestOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasSessionId();
    }

    public static final class PullExecuteTaskRequest extends GeneratedMessage implements PullExecuteTaskRequestOrBuilder {
        public static Parser<PullExecuteTaskRequest> PARSER = new AbstractParser<PullExecuteTaskRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.PullExecuteTaskRequest.AnonymousClass1 */

            public final PullExecuteTaskRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PullExecuteTaskRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final PullExecuteTaskRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object event_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements PullExecuteTaskRequestOrBuilder {
            private int bitField0_;
            private Object event_;
            private Object sessionId_;

            private Builder() {
                this.sessionId_ = "";
                this.event_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.event_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = PullExecuteTaskRequest.alwaysUseFieldBuilders;
            }

            public final PullExecuteTaskRequest build() {
                PullExecuteTaskRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final PullExecuteTaskRequest buildPartial() {
                PullExecuteTaskRequest pullExecuteTaskRequest = new PullExecuteTaskRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                pullExecuteTaskRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                pullExecuteTaskRequest.event_ = this.event_;
                pullExecuteTaskRequest.bitField0_ = i2;
                onBuilt();
                return pullExecuteTaskRequest;
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.event_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clearEvent() {
                this.bitField0_ &= -3;
                this.event_ = PullExecuteTaskRequest.getDefaultInstance().getEvent();
                onChanged();
                return this;
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = PullExecuteTaskRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final PullExecuteTaskRequest getDefaultInstanceForType() {
                return PullExecuteTaskRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_descriptor;
            }

            public final String getEvent() {
                Object obj = this.event_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.event_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getEventBytes() {
                Object obj = this.event_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.event_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasEvent() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PullExecuteTaskRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasSessionId() && hasEvent();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                PullExecuteTaskRequest pullExecuteTaskRequest;
                PullExecuteTaskRequest pullExecuteTaskRequest2 = null;
                try {
                    PullExecuteTaskRequest parsePartialFrom = PullExecuteTaskRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    pullExecuteTaskRequest = (PullExecuteTaskRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    pullExecuteTaskRequest2 = pullExecuteTaskRequest;
                }
                if (pullExecuteTaskRequest2 != null) {
                    mergeFrom(pullExecuteTaskRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof PullExecuteTaskRequest) {
                    return mergeFrom((PullExecuteTaskRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(PullExecuteTaskRequest pullExecuteTaskRequest) {
                if (pullExecuteTaskRequest == PullExecuteTaskRequest.getDefaultInstance()) {
                    return this;
                }
                if (pullExecuteTaskRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = pullExecuteTaskRequest.sessionId_;
                    onChanged();
                }
                if (pullExecuteTaskRequest.hasEvent()) {
                    this.bitField0_ |= 2;
                    this.event_ = pullExecuteTaskRequest.event_;
                    onChanged();
                }
                mergeUnknownFields(pullExecuteTaskRequest.getUnknownFields());
                return this;
            }

            public final Builder setEvent(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.event_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setEventBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.event_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            PullExecuteTaskRequest pullExecuteTaskRequest = new PullExecuteTaskRequest(true);
            defaultInstance = pullExecuteTaskRequest;
            pullExecuteTaskRequest.initFields();
        }

        private PullExecuteTaskRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.event_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private PullExecuteTaskRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PullExecuteTaskRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PullExecuteTaskRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_descriptor;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.event_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(PullExecuteTaskRequest pullExecuteTaskRequest) {
            return newBuilder().mergeFrom(pullExecuteTaskRequest);
        }

        public static PullExecuteTaskRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static PullExecuteTaskRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static PullExecuteTaskRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PullExecuteTaskRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PullExecuteTaskRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static PullExecuteTaskRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static PullExecuteTaskRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static PullExecuteTaskRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static PullExecuteTaskRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PullExecuteTaskRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final PullExecuteTaskRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getEvent() {
            Object obj = this.event_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.event_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getEventBytes() {
            Object obj = this.event_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.event_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<PullExecuteTaskRequest> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getEventBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasEvent() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PullExecuteTaskRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasEvent()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getEventBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface PullExecuteTaskRequestOrBuilder extends MessageOrBuilder {
        String getEvent();

        ByteString getEventBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasEvent();

        boolean hasSessionId();
    }

    public static final class PullExecuteTaskResponse extends GeneratedMessage implements PullExecuteTaskResponseOrBuilder {
        public static Parser<PullExecuteTaskResponse> PARSER = new AbstractParser<PullExecuteTaskResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.PullExecuteTaskResponse.AnonymousClass1 */

            public final PullExecuteTaskResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PullExecuteTaskResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final PullExecuteTaskResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        public TsmLibData tsmLibData_;
        private final UnknownFieldSet unknownFields;
        public LazyStringList virtualCards_;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements PullExecuteTaskResponseOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private int result_;
            private SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> tsmLibDataBuilder_;
            private TsmLibData tsmLibData_;
            private LazyStringList virtualCards_;

            private Builder() {
                this.errorDesc_ = "";
                this.tsmLibData_ = TsmLibData.getDefaultInstance();
                this.virtualCards_ = LazyStringArrayList.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.errorDesc_ = "";
                this.tsmLibData_ = TsmLibData.getDefaultInstance();
                this.virtualCards_ = LazyStringArrayList.EMPTY;
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            private void ensureVirtualCardsIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.virtualCards_ = new LazyStringArrayList(this.virtualCards_);
                    this.bitField0_ |= 8;
                }
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_descriptor;
            }

            private SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> getTsmLibDataFieldBuilder() {
                if (this.tsmLibDataBuilder_ == null) {
                    this.tsmLibDataBuilder_ = new SingleFieldBuilder<>(this.tsmLibData_, getParentForChildren(), isClean());
                    this.tsmLibData_ = null;
                }
                return this.tsmLibDataBuilder_;
            }

            private void maybeForceBuilderInitialization() {
                if (PullExecuteTaskResponse.alwaysUseFieldBuilders) {
                    getTsmLibDataFieldBuilder();
                }
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<java.lang.String>, com.google.protobuf.LazyStringList]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllVirtualCards(Iterable<String> iterable) {
                ensureVirtualCardsIsMutable();
                GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.virtualCards_);
                onChanged();
                return this;
            }

            public final Builder addVirtualCards(String str) {
                if (str != null) {
                    ensureVirtualCardsIsMutable();
                    this.virtualCards_.add(str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder addVirtualCardsBytes(ByteString byteString) {
                if (byteString != null) {
                    ensureVirtualCardsIsMutable();
                    this.virtualCards_.add(byteString);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final PullExecuteTaskResponse build() {
                PullExecuteTaskResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final PullExecuteTaskResponse buildPartial() {
                PullExecuteTaskResponse pullExecuteTaskResponse = new PullExecuteTaskResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                pullExecuteTaskResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                pullExecuteTaskResponse.errorDesc_ = this.errorDesc_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                pullExecuteTaskResponse.tsmLibData_ = singleFieldBuilder == null ? this.tsmLibData_ : singleFieldBuilder.build();
                if ((this.bitField0_ & 8) == 8) {
                    this.virtualCards_ = new UnmodifiableLazyStringList(this.virtualCards_);
                    this.bitField0_ &= -9;
                }
                pullExecuteTaskResponse.virtualCards_ = this.virtualCards_;
                pullExecuteTaskResponse.bitField0_ = i2;
                onBuilt();
                return pullExecuteTaskResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.errorDesc_ = "";
                this.bitField0_ &= -3;
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                if (singleFieldBuilder == null) {
                    this.tsmLibData_ = TsmLibData.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -5;
                this.virtualCards_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -3;
                this.errorDesc_ = PullExecuteTaskResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clearTsmLibData() {
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                if (singleFieldBuilder == null) {
                    this.tsmLibData_ = TsmLibData.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearVirtualCards() {
                this.virtualCards_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final PullExecuteTaskResponse getDefaultInstanceForType() {
                return PullExecuteTaskResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final TsmLibData getTsmLibData() {
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                return singleFieldBuilder == null ? this.tsmLibData_ : singleFieldBuilder.getMessage();
            }

            public final TsmLibData.Builder getTsmLibDataBuilder() {
                this.bitField0_ |= 4;
                onChanged();
                return getTsmLibDataFieldBuilder().getBuilder();
            }

            public final TsmLibDataOrBuilder getTsmLibDataOrBuilder() {
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                return singleFieldBuilder != null ? singleFieldBuilder.getMessageOrBuilder() : this.tsmLibData_;
            }

            public final String getVirtualCards(int i) {
                return (String) this.virtualCards_.get(i);
            }

            public final ByteString getVirtualCardsBytes(int i) {
                return this.virtualCards_.getByteString(i);
            }

            public final int getVirtualCardsCount() {
                return this.virtualCards_.size();
            }

            public final List<String> getVirtualCardsList() {
                return Collections.unmodifiableList(this.virtualCards_);
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasTsmLibData() {
                return (this.bitField0_ & 4) == 4;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PullExecuteTaskResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                PullExecuteTaskResponse pullExecuteTaskResponse;
                PullExecuteTaskResponse pullExecuteTaskResponse2 = null;
                try {
                    PullExecuteTaskResponse parsePartialFrom = PullExecuteTaskResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    pullExecuteTaskResponse = (PullExecuteTaskResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    pullExecuteTaskResponse2 = pullExecuteTaskResponse;
                }
                if (pullExecuteTaskResponse2 != null) {
                    mergeFrom(pullExecuteTaskResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof PullExecuteTaskResponse) {
                    return mergeFrom((PullExecuteTaskResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(PullExecuteTaskResponse pullExecuteTaskResponse) {
                if (pullExecuteTaskResponse == PullExecuteTaskResponse.getDefaultInstance()) {
                    return this;
                }
                if (pullExecuteTaskResponse.hasResult()) {
                    setResult(pullExecuteTaskResponse.getResult());
                }
                if (pullExecuteTaskResponse.hasErrorDesc()) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = pullExecuteTaskResponse.errorDesc_;
                    onChanged();
                }
                if (pullExecuteTaskResponse.hasTsmLibData()) {
                    mergeTsmLibData(pullExecuteTaskResponse.getTsmLibData());
                }
                if (!pullExecuteTaskResponse.virtualCards_.isEmpty()) {
                    if (this.virtualCards_.isEmpty()) {
                        this.virtualCards_ = pullExecuteTaskResponse.virtualCards_;
                        this.bitField0_ &= -9;
                    } else {
                        ensureVirtualCardsIsMutable();
                        this.virtualCards_.addAll(pullExecuteTaskResponse.virtualCards_);
                    }
                    onChanged();
                }
                mergeUnknownFields(pullExecuteTaskResponse.getUnknownFields());
                return this;
            }

            public final Builder mergeTsmLibData(TsmLibData tsmLibData) {
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 4) == 4 && this.tsmLibData_ != TsmLibData.getDefaultInstance()) {
                        tsmLibData = TsmLibData.newBuilder(this.tsmLibData_).mergeFrom(tsmLibData).buildPartial();
                    }
                    this.tsmLibData_ = tsmLibData;
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(tsmLibData);
                }
                this.bitField0_ |= 4;
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder setTsmLibData(TsmLibData.Builder builder) {
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                if (singleFieldBuilder == null) {
                    this.tsmLibData_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 4;
                return this;
            }

            public final Builder setTsmLibData(TsmLibData tsmLibData) {
                SingleFieldBuilder<TsmLibData, TsmLibData.Builder, TsmLibDataOrBuilder> singleFieldBuilder = this.tsmLibDataBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(tsmLibData);
                } else if (tsmLibData != null) {
                    this.tsmLibData_ = tsmLibData;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                return this;
            }

            public final Builder setVirtualCards(int i, String str) {
                if (str != null) {
                    ensureVirtualCardsIsMutable();
                    this.virtualCards_.set(i, str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            PullExecuteTaskResponse pullExecuteTaskResponse = new PullExecuteTaskResponse(true);
            defaultInstance = pullExecuteTaskResponse;
            pullExecuteTaskResponse.initFields();
        }

        private PullExecuteTaskResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            TsmLibData.Builder builder = (this.bitField0_ & 4) == 4 ? this.tsmLibData_.toBuilder() : null;
                            this.tsmLibData_ = (TsmLibData) codedInputStream.readMessage(TsmLibData.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.tsmLibData_);
                                this.tsmLibData_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 4;
                        } else if (readTag == 34) {
                            if (!(z2 & true)) {
                                this.virtualCards_ = new LazyStringArrayList();
                                z2 |= true;
                            }
                            this.virtualCards_.add(codedInputStream.readBytes());
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.virtualCards_ = new UnmodifiableLazyStringList(this.virtualCards_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.virtualCards_ = new UnmodifiableLazyStringList(this.virtualCards_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private PullExecuteTaskResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PullExecuteTaskResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PullExecuteTaskResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.errorDesc_ = "";
            this.tsmLibData_ = TsmLibData.getDefaultInstance();
            this.virtualCards_ = LazyStringArrayList.EMPTY;
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(PullExecuteTaskResponse pullExecuteTaskResponse) {
            return newBuilder().mergeFrom(pullExecuteTaskResponse);
        }

        public static PullExecuteTaskResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static PullExecuteTaskResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static PullExecuteTaskResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PullExecuteTaskResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PullExecuteTaskResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static PullExecuteTaskResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static PullExecuteTaskResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static PullExecuteTaskResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static PullExecuteTaskResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PullExecuteTaskResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final PullExecuteTaskResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<PullExecuteTaskResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(2, getErrorDescBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeInt32Size += CodedOutputStream.computeMessageSize(3, this.tsmLibData_);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.virtualCards_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.virtualCards_.getByteString(i3));
            }
            int size = computeInt32Size + i2 + (getVirtualCardsList().size() * 1) + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        public final TsmLibData getTsmLibData() {
            return this.tsmLibData_;
        }

        public final TsmLibDataOrBuilder getTsmLibDataOrBuilder() {
            return this.tsmLibData_;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final String getVirtualCards(int i) {
            return (String) this.virtualCards_.get(i);
        }

        public final ByteString getVirtualCardsBytes(int i) {
            return this.virtualCards_.getByteString(i);
        }

        public final int getVirtualCardsCount() {
            return this.virtualCards_.size();
        }

        public final List<String> getVirtualCardsList() {
            return this.virtualCards_;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasTsmLibData() {
            return (this.bitField0_ & 4) == 4;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(PullExecuteTaskResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getErrorDescBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeMessage(3, this.tsmLibData_);
            }
            for (int i = 0; i < this.virtualCards_.size(); i++) {
                codedOutputStream.writeBytes(4, this.virtualCards_.getByteString(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface PullExecuteTaskResponseOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        TsmLibData getTsmLibData();

        TsmLibDataOrBuilder getTsmLibDataOrBuilder();

        String getVirtualCards(int i);

        ByteString getVirtualCardsBytes(int i);

        int getVirtualCardsCount();

        List<String> getVirtualCardsList();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasTsmLibData();
    }

    public interface PullPersoDataRequestOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasSessionId();
    }

    public static final class QrCardInfo extends GeneratedMessage implements QrCardInfoOrBuilder {
        public static Parser<QrCardInfo> PARSER = new AbstractParser<QrCardInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QrCardInfo.AnonymousClass1 */

            public final QrCardInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QrCardInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QrCardInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cardReferenceId_;
        public BankCardType cardType_;
        public CardIssuerInfo issuerInfo_;
        public Object lastDigits_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;
        public Object userId_;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QrCardInfoOrBuilder {
            private int bitField0_;
            private Object cardReferenceId_;
            private BankCardType cardType_;
            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> issuerInfoBuilder_;
            private CardIssuerInfo issuerInfo_;
            private Object lastDigits_;
            private Object userId_;

            private Builder() {
                this.cardReferenceId_ = "";
                this.lastDigits_ = "";
                this.userId_ = "";
                this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardReferenceId_ = "";
                this.lastDigits_ = "";
                this.userId_ = "";
                this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_descriptor;
            }

            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> getIssuerInfoFieldBuilder() {
                if (this.issuerInfoBuilder_ == null) {
                    this.issuerInfoBuilder_ = new SingleFieldBuilder<>(this.issuerInfo_, getParentForChildren(), isClean());
                    this.issuerInfo_ = null;
                }
                return this.issuerInfoBuilder_;
            }

            private void maybeForceBuilderInitialization() {
                if (QrCardInfo.alwaysUseFieldBuilders) {
                    getIssuerInfoFieldBuilder();
                }
            }

            public final QrCardInfo build() {
                QrCardInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QrCardInfo buildPartial() {
                QrCardInfo qrCardInfo = new QrCardInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                qrCardInfo.cardReferenceId_ = this.cardReferenceId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                qrCardInfo.lastDigits_ = this.lastDigits_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                qrCardInfo.userId_ = this.userId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                qrCardInfo.issuerInfo_ = singleFieldBuilder == null ? this.issuerInfo_ : singleFieldBuilder.build();
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                qrCardInfo.cardType_ = this.cardType_;
                qrCardInfo.bitField0_ = i2;
                onBuilt();
                return qrCardInfo;
            }

            public final Builder clear() {
                super.clear();
                this.cardReferenceId_ = "";
                this.bitField0_ &= -2;
                this.lastDigits_ = "";
                this.bitField0_ &= -3;
                this.userId_ = "";
                this.bitField0_ &= -5;
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                this.cardType_ = BankCardType.DEBIT;
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clearCardReferenceId() {
                this.bitField0_ &= -2;
                this.cardReferenceId_ = QrCardInfo.getDefaultInstance().getCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -17;
                this.cardType_ = BankCardType.DEBIT;
                onChanged();
                return this;
            }

            public final Builder clearIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clearLastDigits() {
                this.bitField0_ &= -3;
                this.lastDigits_ = QrCardInfo.getDefaultInstance().getLastDigits();
                onChanged();
                return this;
            }

            public final Builder clearUserId() {
                this.bitField0_ &= -5;
                this.userId_ = QrCardInfo.getDefaultInstance().getUserId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final String getCardReferenceId() {
                Object obj = this.cardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardReferenceIdBytes() {
                Object obj = this.cardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final BankCardType getCardType() {
                return this.cardType_;
            }

            public final QrCardInfo getDefaultInstanceForType() {
                return QrCardInfo.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_descriptor;
            }

            public final CardIssuerInfo getIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                return singleFieldBuilder == null ? this.issuerInfo_ : singleFieldBuilder.getMessage();
            }

            public final CardIssuerInfo.Builder getIssuerInfoBuilder() {
                this.bitField0_ |= 8;
                onChanged();
                return getIssuerInfoFieldBuilder().getBuilder();
            }

            public final CardIssuerInfoOrBuilder getIssuerInfoOrBuilder() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                return singleFieldBuilder != null ? singleFieldBuilder.getMessageOrBuilder() : this.issuerInfo_;
            }

            public final String getLastDigits() {
                Object obj = this.lastDigits_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.lastDigits_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLastDigitsBytes() {
                Object obj = this.lastDigits_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.lastDigits_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getUserId() {
                Object obj = this.userId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserIdBytes() {
                Object obj = this.userId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasCardReferenceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 16) == 16;
            }

            public final boolean hasIssuerInfo() {
                return (this.bitField0_ & 8) == 8;
            }

            public final boolean hasLastDigits() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasUserId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(QrCardInfo.class, Builder.class);
            }

            public final boolean isInitialized() {
                return !hasIssuerInfo() || getIssuerInfo().isInitialized();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QrCardInfo qrCardInfo;
                QrCardInfo qrCardInfo2 = null;
                try {
                    QrCardInfo parsePartialFrom = QrCardInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    qrCardInfo = (QrCardInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    qrCardInfo2 = qrCardInfo;
                }
                if (qrCardInfo2 != null) {
                    mergeFrom(qrCardInfo2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QrCardInfo) {
                    return mergeFrom((QrCardInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QrCardInfo qrCardInfo) {
                if (qrCardInfo == QrCardInfo.getDefaultInstance()) {
                    return this;
                }
                if (qrCardInfo.hasCardReferenceId()) {
                    this.bitField0_ |= 1;
                    this.cardReferenceId_ = qrCardInfo.cardReferenceId_;
                    onChanged();
                }
                if (qrCardInfo.hasLastDigits()) {
                    this.bitField0_ |= 2;
                    this.lastDigits_ = qrCardInfo.lastDigits_;
                    onChanged();
                }
                if (qrCardInfo.hasUserId()) {
                    this.bitField0_ |= 4;
                    this.userId_ = qrCardInfo.userId_;
                    onChanged();
                }
                if (qrCardInfo.hasIssuerInfo()) {
                    mergeIssuerInfo(qrCardInfo.getIssuerInfo());
                }
                if (qrCardInfo.hasCardType()) {
                    setCardType(qrCardInfo.getCardType());
                }
                mergeUnknownFields(qrCardInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 8) == 8 && this.issuerInfo_ != CardIssuerInfo.getDefaultInstance()) {
                        cardIssuerInfo = CardIssuerInfo.newBuilder(this.issuerInfo_).mergeFrom(cardIssuerInfo).buildPartial();
                    }
                    this.issuerInfo_ = cardIssuerInfo;
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(cardIssuerInfo);
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setCardType(BankCardType bankCardType) {
                if (bankCardType != null) {
                    this.bitField0_ |= 16;
                    this.cardType_ = bankCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setIssuerInfo(CardIssuerInfo.Builder builder) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.issuerInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(cardIssuerInfo);
                } else if (cardIssuerInfo != null) {
                    this.issuerInfo_ = cardIssuerInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setLastDigits(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.lastDigits_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setLastDigitsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.lastDigits_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setUserId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.userId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setUserIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.userId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            QrCardInfo qrCardInfo = new QrCardInfo(true);
            defaultInstance = qrCardInfo;
            qrCardInfo.initFields();
        }

        private QrCardInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.lastDigits_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.userId_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            CardIssuerInfo.Builder builder = (this.bitField0_ & 8) == 8 ? this.issuerInfo_.toBuilder() : null;
                            this.issuerInfo_ = (CardIssuerInfo) codedInputStream.readMessage(CardIssuerInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.issuerInfo_);
                                this.issuerInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 8;
                        } else if (readTag == 40) {
                            int readEnum = codedInputStream.readEnum();
                            BankCardType valueOf = BankCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(5, readEnum);
                            } else {
                                this.bitField0_ |= 16;
                                this.cardType_ = valueOf;
                            }
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private QrCardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QrCardInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QrCardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_descriptor;
        }

        private void initFields() {
            this.cardReferenceId_ = "";
            this.lastDigits_ = "";
            this.userId_ = "";
            this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
            this.cardType_ = BankCardType.DEBIT;
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(QrCardInfo qrCardInfo) {
            return newBuilder().mergeFrom(qrCardInfo);
        }

        public static QrCardInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QrCardInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QrCardInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QrCardInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QrCardInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QrCardInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static QrCardInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QrCardInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QrCardInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QrCardInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final String getCardReferenceId() {
            Object obj = this.cardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardReferenceIdBytes() {
            Object obj = this.cardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final BankCardType getCardType() {
            return this.cardType_;
        }

        public final QrCardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final CardIssuerInfo getIssuerInfo() {
            return this.issuerInfo_;
        }

        public final CardIssuerInfoOrBuilder getIssuerInfoOrBuilder() {
            return this.issuerInfo_;
        }

        public final String getLastDigits() {
            Object obj = this.lastDigits_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.lastDigits_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLastDigitsBytes() {
            Object obj = this.lastDigits_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.lastDigits_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<QrCardInfo> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getUserIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeMessageSize(4, this.issuerInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeEnumSize(5, this.cardType_.getNumber());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final String getUserId() {
            Object obj = this.userId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserIdBytes() {
            Object obj = this.userId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardReferenceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 16) == 16;
        }

        public final boolean hasIssuerInfo() {
            return (this.bitField0_ & 8) == 8;
        }

        public final boolean hasLastDigits() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasUserId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(QrCardInfo.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasIssuerInfo() || getIssuerInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            }
            this.memoizedIsInitialized = 0;
            return false;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getUserIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeMessage(4, this.issuerInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeEnum(5, this.cardType_.getNumber());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface QrCardInfoOrBuilder extends MessageOrBuilder {
        String getCardReferenceId();

        ByteString getCardReferenceIdBytes();

        BankCardType getCardType();

        CardIssuerInfo getIssuerInfo();

        CardIssuerInfoOrBuilder getIssuerInfoOrBuilder();

        String getLastDigits();

        ByteString getLastDigitsBytes();

        String getUserId();

        ByteString getUserIdBytes();

        boolean hasCardReferenceId();

        boolean hasCardType();

        boolean hasIssuerInfo();

        boolean hasLastDigits();

        boolean hasUserId();
    }

    public interface QueryBankCardInfoRequestOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getCplc();

        ByteString getCplcBytes();

        int getRequestSource();

        String getVcRefId();

        ByteString getVcRefIdBytes();

        boolean hasAid();

        boolean hasCplc();

        boolean hasRequestSource();

        boolean hasVcRefId();
    }

    public interface QueryBankCardInfoResponseOrBuilder extends MessageOrBuilder {
        BankCardInfo getBankCardInfoList(int i);

        int getBankCardInfoListCount();

        List<BankCardInfo> getBankCardInfoListList();

        BankCardInfoOrBuilder getBankCardInfoListOrBuilder(int i);

        List<? extends BankCardInfoOrBuilder> getBankCardInfoListOrBuilderList();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public interface QueryDoorCardInfoResponseOrBuilder extends MessageOrBuilder {
        DoorCardInfo getCardInfoList(int i);

        int getCardInfoListCount();

        List<DoorCardInfo> getCardInfoListList();

        DoorCardInfoOrBuilder getCardInfoListOrBuilder(int i);

        List<? extends DoorCardInfoOrBuilder> getCardInfoListOrBuilderList();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public interface QueryDoorCardRequestOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        DoorCardType getCardType();

        String getCplc();

        ByteString getCplcBytes();

        DeviceInfo getDeviceInfo();

        DeviceInfoOrBuilder getDeviceInfoOrBuilder();

        String getProductId();

        ByteString getProductIdBytes();

        boolean hasAid();

        boolean hasCardType();

        boolean hasCplc();

        boolean hasDeviceInfo();

        boolean hasProductId();
    }

    public interface QueryMifareCardInfoRequestOrBuilder extends MessageOrBuilder {
        String getCplc();

        ByteString getCplcBytes();

        boolean hasCplc();
    }

    public interface QueryMifareCardInfoResponseOrBuilder extends MessageOrBuilder {
        MifareCardInfo getCardInfoList(int i);

        int getCardInfoListCount();

        List<MifareCardInfo> getCardInfoListList();

        MifareCardInfoOrBuilder getCardInfoListOrBuilder(int i);

        List<? extends MifareCardInfoOrBuilder> getCardInfoListOrBuilderList();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        boolean hasErrorDesc();

        boolean hasResult();
    }

    public interface QueryPanForQrRequestOrBuilder extends MessageOrBuilder {
        ByteString getCipheredPan();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        boolean hasCipheredPan();

        boolean hasDeviceId();
    }

    public interface QueryPanForQrResponseOrBuilder extends MessageOrBuilder {
        CardIssuerInfo getCardIssuerInfo();

        CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder();

        BankCardType getCardType();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        String getUserTerms();

        ByteString getUserTermsBytes();

        boolean hasCardIssuerInfo();

        boolean hasCardType();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasUserTerms();
    }

    public interface QueryPanRequestOrBuilder extends MessageOrBuilder {
        long getBindId();

        String getPan();

        ByteString getPanBytes();

        int getRequestSource();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasBindId();

        boolean hasPan();

        boolean hasRequestSource();

        boolean hasSessionId();
    }

    public interface QueryPanResponseOrBuilder extends MessageOrBuilder {
        CardIssuerInfo getCardIssuerInfo();

        CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder();

        BankCardType getCardType();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        String getUserTerms();

        ByteString getUserTermsBytes();

        boolean hasCardIssuerInfo();

        boolean hasCardType();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasUserTerms();
    }

    public interface QueryProductInfoRequestOrBuilder extends MessageOrBuilder {
        String getBin();

        ByteString getBinBytes();

        long getBindId();

        boolean hasBin();

        boolean hasBindId();
    }

    public interface QueryQuickEnrollCardListRequestOrBuilder extends MessageOrBuilder {
        String getCplc();

        ByteString getCplcBytes();

        boolean hasCplc();
    }

    public interface RequestVerificationCodeForQrOrBuilder extends MessageOrBuilder {
        ByteString getCardInfo();

        ByteString getCvn2();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        boolean hasCardInfo();

        boolean hasCvn2();

        boolean hasDeviceId();
    }

    public interface RequestVerificationCodeOrBuilder extends MessageOrBuilder {
        OtpMethod getOptMethod();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasOptMethod();

        boolean hasSessionId();

        boolean hasVirtualCardReferenceId();
    }

    public interface RiskInfoOrBuilder extends MessageOrBuilder {
        String getAccountEmailLife();

        ByteString getAccountEmailLifeBytes();

        String getAccountIDHash();

        ByteString getAccountIDHashBytes();

        int getAccountScore();

        ApplyChannel getApplyChannel();

        String getBillingAddress();

        ByteString getBillingAddressBytes();

        String getBillingZip();

        ByteString getBillingZipBytes();

        CaptureMethod getCaptureMethod();

        String getCardHolderName();

        ByteString getCardHolderNameBytes();

        String getDeviceLanguage();

        ByteString getDeviceLanguageBytes();

        String getDeviceLocation();

        ByteString getDeviceLocationBytes();

        String getDeviceName();

        ByteString getDeviceNameBytes();

        String getDeviceNumber();

        ByteString getDeviceNumberBytes();

        int getDeviceSIMNumber();

        int getDeviceScore();

        DeviceType getDeviceType();

        String getExtensiveDeviceLocation();

        ByteString getExtensiveDeviceLocationBytes();

        String getFullDeviceNumber(int i);

        ByteString getFullDeviceNumberBytes(int i);

        int getFullDeviceNumberCount();

        List<String> getFullDeviceNumberList();

        int getPhoneNumberScore();

        String getRiskReasonCode(int i);

        ByteString getRiskReasonCodeBytes(int i);

        int getRiskReasonCodeCount();

        List<String> getRiskReasonCodeList();

        int getRiskScore();

        String getRiskStandardVersion();

        ByteString getRiskStandardVersionBytes();

        String getSourceIP();

        ByteString getSourceIPBytes();

        boolean hasAccountEmailLife();

        boolean hasAccountIDHash();

        boolean hasAccountScore();

        boolean hasApplyChannel();

        boolean hasBillingAddress();

        boolean hasBillingZip();

        boolean hasCaptureMethod();

        boolean hasCardHolderName();

        boolean hasDeviceLanguage();

        boolean hasDeviceLocation();

        boolean hasDeviceName();

        boolean hasDeviceNumber();

        boolean hasDeviceSIMNumber();

        boolean hasDeviceScore();

        boolean hasDeviceType();

        boolean hasExtensiveDeviceLocation();

        boolean hasPhoneNumberScore();

        boolean hasRiskScore();

        boolean hasRiskStandardVersion();

        boolean hasSourceIP();
    }

    public interface SaveAppKeyRequestOrBuilder extends MessageOrBuilder {
        String getAppName();

        ByteString getAppNameBytes();

        String getClientSign();

        ByteString getClientSignBytes();

        String getCplc();

        ByteString getCplcBytes();

        String getCpuModel();

        ByteString getCpuModelBytes();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        String getDeviceModel();

        ByteString getDeviceModelBytes();

        String getKeyAlg();

        ByteString getKeyAlgBytes();

        String getPkX();

        ByteString getPkXBytes();

        String getPkY();

        ByteString getPkYBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getTzId();

        ByteString getTzIdBytes();

        boolean hasAppName();

        boolean hasClientSign();

        boolean hasCplc();

        boolean hasCpuModel();

        boolean hasDeviceId();

        boolean hasDeviceModel();

        boolean hasKeyAlg();

        boolean hasPkX();

        boolean hasPkY();

        boolean hasSessionId();

        boolean hasTzId();
    }

    public interface SeAPDUResponseItemOrBuilder extends MessageOrBuilder {
        int getIndex();

        ByteString getResponseData();

        ByteString getResponseSw();

        boolean hasIndex();

        boolean hasResponseData();

        boolean hasResponseSw();
    }

    public interface SeAPDUResponseOrBuilder extends MessageOrBuilder {
        SeAPDUResponseItem getResponse(int i);

        int getResponseCount();

        List<SeAPDUResponseItem> getResponseList();

        SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i);

        List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasSessionId();
    }

    public interface SeInfoOrBuilder extends MessageOrBuilder {
        ActionSource getActionSource();

        ByteString getCplc();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        DeviceInfo getDeviceInfo();

        DeviceInfoOrBuilder getDeviceInfoOrBuilder();

        String getDeviceType();

        ByteString getDeviceTypeBytes();

        boolean hasActionSource();

        boolean hasCplc();

        boolean hasDeviceId();

        boolean hasDeviceInfo();

        boolean hasDeviceType();
    }

    public interface SeOperationOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        ByteString getAuthenticationCode();

        String getCityId();

        ByteString getCityIdBytes();

        String getExtra();

        ByteString getExtraBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getSourceChannel();

        ByteString getSourceChannelBytes();

        SeOperationType getType();

        boolean hasAid();

        boolean hasAuthenticationCode();

        boolean hasCityId();

        boolean hasExtra();

        boolean hasSessionId();

        boolean hasSourceChannel();

        boolean hasType();
    }

    public interface TopUpOperationOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        ByteString getAuthenticationCode();

        int getBalance();

        String getCardNumber();

        ByteString getCardNumberBytes();

        String getCityId();

        ByteString getCityIdBytes();

        String getExtra();

        ByteString getExtraBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasAid();

        boolean hasAuthenticationCode();

        boolean hasBalance();

        boolean hasCardNumber();

        boolean hasCityId();

        boolean hasExtra();

        boolean hasSessionId();
    }

    public interface TransDataForNonNFCResponseOrBuilder extends MessageOrBuilder {
        int getKeyIndex();

        String getQrToken();

        ByteString getQrTokenBytes();

        int getResult();

        String getSign();

        ByteString getSignBytes();

        String getVrfMode();

        ByteString getVrfModeBytes();

        boolean hasKeyIndex();

        boolean hasQrToken();

        boolean hasResult();

        boolean hasSign();

        boolean hasVrfMode();
    }

    public interface TsmAPDUCommandOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        TsmCAPDU getApdus(int i);

        int getApdusCount();

        List<TsmCAPDU> getApdusList();

        TsmCAPDUOrBuilder getApdusOrBuilder(int i);

        List<? extends TsmCAPDUOrBuilder> getApdusOrBuilderList();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        boolean getHasMore();

        int getResult();

        boolean hasAid();

        boolean hasErrorDesc();

        boolean hasHasMore();

        boolean hasResult();
    }

    public interface TsmCAPDUOrBuilder extends MessageOrBuilder {
        ByteString getApdu();

        String getExpectSwRegex();

        ByteString getExpectSwRegexBytes();

        int getIndex();

        boolean hasApdu();

        boolean hasExpectSwRegex();

        boolean hasIndex();
    }

    public static final class TsmLibData extends GeneratedMessage implements TsmLibDataOrBuilder {
        public static Parser<TsmLibData> PARSER = new AbstractParser<TsmLibData>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TsmLibData.AnonymousClass1 */

            public final TsmLibData parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TsmLibData(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TsmLibData defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object event_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sign_;
        public Object ssid_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TsmLibDataOrBuilder {
            private int bitField0_;
            private Object event_;
            private Object sign_;
            private Object ssid_;

            private Builder() {
                this.event_ = "";
                this.sign_ = "";
                this.ssid_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.event_ = "";
                this.sign_ = "";
                this.ssid_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = TsmLibData.alwaysUseFieldBuilders;
            }

            public final TsmLibData build() {
                TsmLibData buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TsmLibData buildPartial() {
                TsmLibData tsmLibData = new TsmLibData(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                tsmLibData.event_ = this.event_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                tsmLibData.sign_ = this.sign_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                tsmLibData.ssid_ = this.ssid_;
                tsmLibData.bitField0_ = i2;
                onBuilt();
                return tsmLibData;
            }

            public final Builder clear() {
                super.clear();
                this.event_ = "";
                this.bitField0_ &= -2;
                this.sign_ = "";
                this.bitField0_ &= -3;
                this.ssid_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearEvent() {
                this.bitField0_ &= -2;
                this.event_ = TsmLibData.getDefaultInstance().getEvent();
                onChanged();
                return this;
            }

            public final Builder clearSign() {
                this.bitField0_ &= -3;
                this.sign_ = TsmLibData.getDefaultInstance().getSign();
                onChanged();
                return this;
            }

            public final Builder clearSsid() {
                this.bitField0_ &= -5;
                this.ssid_ = TsmLibData.getDefaultInstance().getSsid();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final TsmLibData getDefaultInstanceForType() {
                return TsmLibData.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_descriptor;
            }

            public final String getEvent() {
                Object obj = this.event_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.event_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getEventBytes() {
                Object obj = this.event_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.event_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getSign() {
                Object obj = this.sign_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sign_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSignBytes() {
                Object obj = this.sign_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sign_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getSsid() {
                Object obj = this.ssid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.ssid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSsidBytes() {
                Object obj = this.ssid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.ssid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasEvent() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasSign() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasSsid() {
                return (this.bitField0_ & 4) == 4;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmLibData.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TsmLibData tsmLibData;
                TsmLibData tsmLibData2 = null;
                try {
                    TsmLibData parsePartialFrom = TsmLibData.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    tsmLibData = (TsmLibData) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    tsmLibData2 = tsmLibData;
                }
                if (tsmLibData2 != null) {
                    mergeFrom(tsmLibData2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TsmLibData) {
                    return mergeFrom((TsmLibData) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TsmLibData tsmLibData) {
                if (tsmLibData == TsmLibData.getDefaultInstance()) {
                    return this;
                }
                if (tsmLibData.hasEvent()) {
                    this.bitField0_ |= 1;
                    this.event_ = tsmLibData.event_;
                    onChanged();
                }
                if (tsmLibData.hasSign()) {
                    this.bitField0_ |= 2;
                    this.sign_ = tsmLibData.sign_;
                    onChanged();
                }
                if (tsmLibData.hasSsid()) {
                    this.bitField0_ |= 4;
                    this.ssid_ = tsmLibData.ssid_;
                    onChanged();
                }
                mergeUnknownFields(tsmLibData.getUnknownFields());
                return this;
            }

            public final Builder setEvent(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.event_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setEventBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.event_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSign(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.sign_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSignBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.sign_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSsid(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.ssid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSsidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.ssid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            TsmLibData tsmLibData = new TsmLibData(true);
            defaultInstance = tsmLibData;
            tsmLibData.initFields();
        }

        private TsmLibData(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.event_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.sign_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.ssid_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private TsmLibData(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TsmLibData(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TsmLibData getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_descriptor;
        }

        private void initFields() {
            this.event_ = "";
            this.sign_ = "";
            this.ssid_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(TsmLibData tsmLibData) {
            return newBuilder().mergeFrom(tsmLibData);
        }

        public static TsmLibData parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TsmLibData parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TsmLibData parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TsmLibData parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TsmLibData parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TsmLibData parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static TsmLibData parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TsmLibData parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TsmLibData parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TsmLibData parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final TsmLibData getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getEvent() {
            Object obj = this.event_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.event_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getEventBytes() {
            Object obj = this.event_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.event_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<TsmLibData> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getEventBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSignBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getSsidBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final String getSign() {
            Object obj = this.sign_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sign_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSignBytes() {
            Object obj = this.sign_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sign_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getSsid() {
            Object obj = this.ssid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.ssid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSsidBytes() {
            Object obj = this.ssid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.ssid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasEvent() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasSign() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasSsid() {
            return (this.bitField0_ & 4) == 4;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmLibData.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getEventBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSignBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getSsidBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface TsmLibDataOrBuilder extends MessageOrBuilder {
        String getEvent();

        ByteString getEventBytes();

        String getSign();

        ByteString getSignBytes();

        String getSsid();

        ByteString getSsidBytes();

        boolean hasEvent();

        boolean hasSign();

        boolean hasSsid();
    }

    public interface TsmSessionInfoOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasSessionId();
    }

    public static final class TsmStartActionInfo extends GeneratedMessage implements TsmStartActionInfoOrBuilder {
        public static Parser<TsmStartActionInfo> PARSER = new AbstractParser<TsmStartActionInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TsmStartActionInfo.AnonymousClass1 */

            public final TsmStartActionInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TsmStartActionInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TsmStartActionInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public SeOperationType actionName_;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object params_;
        public SeInfo seInfo_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TsmStartActionInfoOrBuilder {
            private SeOperationType actionName_;
            private int bitField0_;
            private Object params_;
            private SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> seInfoBuilder_;
            private SeInfo seInfo_;

            private Builder() {
                this.seInfo_ = SeInfo.getDefaultInstance();
                this.actionName_ = SeOperationType.LOCK;
                this.params_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.seInfo_ = SeInfo.getDefaultInstance();
                this.actionName_ = SeOperationType.LOCK;
                this.params_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_descriptor;
            }

            private SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> getSeInfoFieldBuilder() {
                if (this.seInfoBuilder_ == null) {
                    this.seInfoBuilder_ = new SingleFieldBuilder<>(this.seInfo_, getParentForChildren(), isClean());
                    this.seInfo_ = null;
                }
                return this.seInfoBuilder_;
            }

            private void maybeForceBuilderInitialization() {
                if (TsmStartActionInfo.alwaysUseFieldBuilders) {
                    getSeInfoFieldBuilder();
                }
            }

            public final TsmStartActionInfo build() {
                TsmStartActionInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TsmStartActionInfo buildPartial() {
                TsmStartActionInfo tsmStartActionInfo = new TsmStartActionInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                tsmStartActionInfo.seInfo_ = singleFieldBuilder == null ? this.seInfo_ : singleFieldBuilder.build();
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                tsmStartActionInfo.actionName_ = this.actionName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                tsmStartActionInfo.params_ = this.params_;
                tsmStartActionInfo.bitField0_ = i2;
                onBuilt();
                return tsmStartActionInfo;
            }

            public final Builder clear() {
                super.clear();
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.seInfo_ = SeInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -2;
                this.actionName_ = SeOperationType.LOCK;
                this.bitField0_ &= -3;
                this.params_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearActionName() {
                this.bitField0_ &= -3;
                this.actionName_ = SeOperationType.LOCK;
                onChanged();
                return this;
            }

            public final Builder clearParams() {
                this.bitField0_ &= -5;
                this.params_ = TsmStartActionInfo.getDefaultInstance().getParams();
                onChanged();
                return this;
            }

            public final Builder clearSeInfo() {
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.seInfo_ = SeInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -2;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final SeOperationType getActionName() {
                return this.actionName_;
            }

            public final TsmStartActionInfo getDefaultInstanceForType() {
                return TsmStartActionInfo.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_descriptor;
            }

            public final String getParams() {
                Object obj = this.params_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.params_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getParamsBytes() {
                Object obj = this.params_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.params_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final SeInfo getSeInfo() {
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                return singleFieldBuilder == null ? this.seInfo_ : singleFieldBuilder.getMessage();
            }

            public final SeInfo.Builder getSeInfoBuilder() {
                this.bitField0_ |= 1;
                onChanged();
                return getSeInfoFieldBuilder().getBuilder();
            }

            public final SeInfoOrBuilder getSeInfoOrBuilder() {
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                return singleFieldBuilder != null ? singleFieldBuilder.getMessageOrBuilder() : this.seInfo_;
            }

            public final boolean hasActionName() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasParams() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasSeInfo() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmStartActionInfo.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasSeInfo() && hasActionName() && hasParams() && getSeInfo().isInitialized();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TsmStartActionInfo tsmStartActionInfo;
                TsmStartActionInfo tsmStartActionInfo2 = null;
                try {
                    TsmStartActionInfo parsePartialFrom = TsmStartActionInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    tsmStartActionInfo = (TsmStartActionInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    tsmStartActionInfo2 = tsmStartActionInfo;
                }
                if (tsmStartActionInfo2 != null) {
                    mergeFrom(tsmStartActionInfo2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TsmStartActionInfo) {
                    return mergeFrom((TsmStartActionInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TsmStartActionInfo tsmStartActionInfo) {
                if (tsmStartActionInfo == TsmStartActionInfo.getDefaultInstance()) {
                    return this;
                }
                if (tsmStartActionInfo.hasSeInfo()) {
                    mergeSeInfo(tsmStartActionInfo.getSeInfo());
                }
                if (tsmStartActionInfo.hasActionName()) {
                    setActionName(tsmStartActionInfo.getActionName());
                }
                if (tsmStartActionInfo.hasParams()) {
                    this.bitField0_ |= 4;
                    this.params_ = tsmStartActionInfo.params_;
                    onChanged();
                }
                mergeUnknownFields(tsmStartActionInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeSeInfo(SeInfo seInfo) {
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 1) == 1 && this.seInfo_ != SeInfo.getDefaultInstance()) {
                        seInfo = SeInfo.newBuilder(this.seInfo_).mergeFrom(seInfo).buildPartial();
                    }
                    this.seInfo_ = seInfo;
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(seInfo);
                }
                this.bitField0_ |= 1;
                return this;
            }

            public final Builder setActionName(SeOperationType seOperationType) {
                if (seOperationType != null) {
                    this.bitField0_ |= 2;
                    this.actionName_ = seOperationType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setParams(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.params_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setParamsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.params_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSeInfo(SeInfo.Builder builder) {
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.seInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 1;
                return this;
            }

            public final Builder setSeInfo(SeInfo seInfo) {
                SingleFieldBuilder<SeInfo, SeInfo.Builder, SeInfoOrBuilder> singleFieldBuilder = this.seInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(seInfo);
                } else if (seInfo != null) {
                    this.seInfo_ = seInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 1;
                return this;
            }
        }

        static {
            TsmStartActionInfo tsmStartActionInfo = new TsmStartActionInfo(true);
            defaultInstance = tsmStartActionInfo;
            tsmStartActionInfo.initFields();
        }

        private TsmStartActionInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            SeInfo.Builder builder = (this.bitField0_ & 1) == 1 ? this.seInfo_.toBuilder() : null;
                            this.seInfo_ = (SeInfo) codedInputStream.readMessage(SeInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.seInfo_);
                                this.seInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 1;
                        } else if (readTag == 16) {
                            int readEnum = codedInputStream.readEnum();
                            SeOperationType valueOf = SeOperationType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(2, readEnum);
                            } else {
                                this.bitField0_ |= 2;
                                this.actionName_ = valueOf;
                            }
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.params_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private TsmStartActionInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TsmStartActionInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TsmStartActionInfo getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_descriptor;
        }

        private void initFields() {
            this.seInfo_ = SeInfo.getDefaultInstance();
            this.actionName_ = SeOperationType.LOCK;
            this.params_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(TsmStartActionInfo tsmStartActionInfo) {
            return newBuilder().mergeFrom(tsmStartActionInfo);
        }

        public static TsmStartActionInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TsmStartActionInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TsmStartActionInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TsmStartActionInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TsmStartActionInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TsmStartActionInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static TsmStartActionInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TsmStartActionInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TsmStartActionInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TsmStartActionInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final SeOperationType getActionName() {
            return this.actionName_;
        }

        public final TsmStartActionInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getParams() {
            Object obj = this.params_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.params_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getParamsBytes() {
            Object obj = this.params_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.params_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<TsmStartActionInfo> getParserForType() {
            return PARSER;
        }

        public final SeInfo getSeInfo() {
            return this.seInfo_;
        }

        public final SeInfoOrBuilder getSeInfoOrBuilder() {
            return this.seInfo_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeMessageSize(1, this.seInfo_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeEnumSize(2, this.actionName_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getParamsBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasActionName() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasParams() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasSeInfo() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmStartActionInfo.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSeInfo()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasActionName()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasParams()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!getSeInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeMessage(1, this.seInfo_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeEnum(2, this.actionName_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getParamsBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface TsmStartActionInfoOrBuilder extends MessageOrBuilder {
        SeOperationType getActionName();

        String getParams();

        ByteString getParamsBytes();

        SeInfo getSeInfo();

        SeInfoOrBuilder getSeInfoOrBuilder();

        boolean hasActionName();

        boolean hasParams();

        boolean hasSeInfo();
    }

    public static final class TsmStartActionResponse extends GeneratedMessage implements TsmStartActionResponseOrBuilder {
        public static Parser<TsmStartActionResponse> PARSER = new AbstractParser<TsmStartActionResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TsmStartActionResponse.AnonymousClass1 */

            public final TsmStartActionResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TsmStartActionResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TsmStartActionResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public TsmAPDUCommand apduCommand_;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TsmStartActionResponseOrBuilder {
            private SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> apduCommandBuilder_;
            private TsmAPDUCommand apduCommand_;
            private int bitField0_;
            private Object errorDesc_;
            private int result_;
            private Object sessionId_;

            private Builder() {
                this.sessionId_ = "";
                this.errorDesc_ = "";
                this.apduCommand_ = TsmAPDUCommand.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.errorDesc_ = "";
                this.apduCommand_ = TsmAPDUCommand.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            private SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> getApduCommandFieldBuilder() {
                if (this.apduCommandBuilder_ == null) {
                    this.apduCommandBuilder_ = new SingleFieldBuilder<>(this.apduCommand_, getParentForChildren(), isClean());
                    this.apduCommand_ = null;
                }
                return this.apduCommandBuilder_;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                if (TsmStartActionResponse.alwaysUseFieldBuilders) {
                    getApduCommandFieldBuilder();
                }
            }

            public final TsmStartActionResponse build() {
                TsmStartActionResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TsmStartActionResponse buildPartial() {
                TsmStartActionResponse tsmStartActionResponse = new TsmStartActionResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                tsmStartActionResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                tsmStartActionResponse.sessionId_ = this.sessionId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                tsmStartActionResponse.errorDesc_ = this.errorDesc_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                tsmStartActionResponse.apduCommand_ = singleFieldBuilder == null ? this.apduCommand_ : singleFieldBuilder.build();
                tsmStartActionResponse.bitField0_ = i2;
                onBuilt();
                return tsmStartActionResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.sessionId_ = "";
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                if (singleFieldBuilder == null) {
                    this.apduCommand_ = TsmAPDUCommand.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clearApduCommand() {
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                if (singleFieldBuilder == null) {
                    this.apduCommand_ = TsmAPDUCommand.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = TsmStartActionResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -3;
                this.sessionId_ = TsmStartActionResponse.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final TsmAPDUCommand getApduCommand() {
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                return singleFieldBuilder == null ? this.apduCommand_ : singleFieldBuilder.getMessage();
            }

            public final TsmAPDUCommand.Builder getApduCommandBuilder() {
                this.bitField0_ |= 8;
                onChanged();
                return getApduCommandFieldBuilder().getBuilder();
            }

            public final TsmAPDUCommandOrBuilder getApduCommandOrBuilder() {
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                return singleFieldBuilder != null ? singleFieldBuilder.getMessageOrBuilder() : this.apduCommand_;
            }

            public final TsmStartActionResponse getDefaultInstanceForType() {
                return TsmStartActionResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasApduCommand() {
                return (this.bitField0_ & 8) == 8;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmStartActionResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                return !hasApduCommand() || getApduCommand().isInitialized();
            }

            public final Builder mergeApduCommand(TsmAPDUCommand tsmAPDUCommand) {
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 8) == 8 && this.apduCommand_ != TsmAPDUCommand.getDefaultInstance()) {
                        tsmAPDUCommand = TsmAPDUCommand.newBuilder(this.apduCommand_).mergeFrom(tsmAPDUCommand).buildPartial();
                    }
                    this.apduCommand_ = tsmAPDUCommand;
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(tsmAPDUCommand);
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TsmStartActionResponse tsmStartActionResponse;
                TsmStartActionResponse tsmStartActionResponse2 = null;
                try {
                    TsmStartActionResponse parsePartialFrom = TsmStartActionResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    tsmStartActionResponse = (TsmStartActionResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    tsmStartActionResponse2 = tsmStartActionResponse;
                }
                if (tsmStartActionResponse2 != null) {
                    mergeFrom(tsmStartActionResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TsmStartActionResponse) {
                    return mergeFrom((TsmStartActionResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TsmStartActionResponse tsmStartActionResponse) {
                if (tsmStartActionResponse == TsmStartActionResponse.getDefaultInstance()) {
                    return this;
                }
                if (tsmStartActionResponse.hasResult()) {
                    setResult(tsmStartActionResponse.getResult());
                }
                if (tsmStartActionResponse.hasSessionId()) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = tsmStartActionResponse.sessionId_;
                    onChanged();
                }
                if (tsmStartActionResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = tsmStartActionResponse.errorDesc_;
                    onChanged();
                }
                if (tsmStartActionResponse.hasApduCommand()) {
                    mergeApduCommand(tsmStartActionResponse.getApduCommand());
                }
                mergeUnknownFields(tsmStartActionResponse.getUnknownFields());
                return this;
            }

            public final Builder setApduCommand(TsmAPDUCommand.Builder builder) {
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                if (singleFieldBuilder == null) {
                    this.apduCommand_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setApduCommand(TsmAPDUCommand tsmAPDUCommand) {
                SingleFieldBuilder<TsmAPDUCommand, TsmAPDUCommand.Builder, TsmAPDUCommandOrBuilder> singleFieldBuilder = this.apduCommandBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(tsmAPDUCommand);
                } else if (tsmAPDUCommand != null) {
                    this.apduCommand_ = tsmAPDUCommand;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            TsmStartActionResponse tsmStartActionResponse = new TsmStartActionResponse(true);
            defaultInstance = tsmStartActionResponse;
            tsmStartActionResponse.initFields();
        }

        private TsmStartActionResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            TsmAPDUCommand.Builder builder = (this.bitField0_ & 8) == 8 ? this.apduCommand_.toBuilder() : null;
                            this.apduCommand_ = (TsmAPDUCommand) codedInputStream.readMessage(TsmAPDUCommand.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.apduCommand_);
                                this.apduCommand_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 8;
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private TsmStartActionResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TsmStartActionResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TsmStartActionResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.sessionId_ = "";
            this.errorDesc_ = "";
            this.apduCommand_ = TsmAPDUCommand.getDefaultInstance();
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(TsmStartActionResponse tsmStartActionResponse) {
            return newBuilder().mergeFrom(tsmStartActionResponse);
        }

        public static TsmStartActionResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TsmStartActionResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TsmStartActionResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TsmStartActionResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TsmStartActionResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TsmStartActionResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static TsmStartActionResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TsmStartActionResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TsmStartActionResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TsmStartActionResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final TsmAPDUCommand getApduCommand() {
            return this.apduCommand_;
        }

        public final TsmAPDUCommandOrBuilder getApduCommandOrBuilder() {
            return this.apduCommand_;
        }

        public final TsmStartActionResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<TsmStartActionResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeMessageSize(4, this.apduCommand_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasApduCommand() {
            return (this.bitField0_ & 8) == 8;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmStartActionResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasApduCommand() || getApduCommand().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeMessage(4, this.apduCommand_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface TsmStartActionResponseOrBuilder extends MessageOrBuilder {
        TsmAPDUCommand getApduCommand();

        TsmAPDUCommandOrBuilder getApduCommandOrBuilder();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasApduCommand();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasSessionId();
    }

    public interface UpCardMoreInfoRequestOrBuilder extends MessageOrBuilder {
        String getOldVcReferenceId();

        ByteString getOldVcReferenceIdBytes();

        String getSessionId();

        ByteString getSessionIdBytes();

        boolean hasOldVcReferenceId();

        boolean hasSessionId();
    }

    public interface UpCardMoreInfoResponseOrBuilder extends MessageOrBuilder {
        String getContactNumber();

        ByteString getContactNumberBytes();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        String getFakePan();

        ByteString getFakePanBytes();

        int getResult();

        boolean hasContactNumber();

        boolean hasErrorDesc();

        boolean hasFakePan();

        boolean hasResult();
    }

    public static final class UpQrCodeRequest extends GeneratedMessage implements UpQrCodeRequestOrBuilder {
        public static Parser<UpQrCodeRequest> PARSER = new AbstractParser<UpQrCodeRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpQrCodeRequest.AnonymousClass1 */

            public final UpQrCodeRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpQrCodeRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpQrCodeRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cardReferenceId_;
        public Object deviceId_;
        public Object latitude_;
        public Object longitude_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpQrCodeRequestOrBuilder {
            private int bitField0_;
            private Object cardReferenceId_;
            private Object deviceId_;
            private Object latitude_;
            private Object longitude_;

            private Builder() {
                this.cardReferenceId_ = "";
                this.latitude_ = "";
                this.longitude_ = "";
                this.deviceId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardReferenceId_ = "";
                this.latitude_ = "";
                this.longitude_ = "";
                this.deviceId_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = UpQrCodeRequest.alwaysUseFieldBuilders;
            }

            public final UpQrCodeRequest build() {
                UpQrCodeRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpQrCodeRequest buildPartial() {
                UpQrCodeRequest upQrCodeRequest = new UpQrCodeRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                upQrCodeRequest.cardReferenceId_ = this.cardReferenceId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                upQrCodeRequest.latitude_ = this.latitude_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                upQrCodeRequest.longitude_ = this.longitude_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                upQrCodeRequest.deviceId_ = this.deviceId_;
                upQrCodeRequest.bitField0_ = i2;
                onBuilt();
                return upQrCodeRequest;
            }

            public final Builder clear() {
                super.clear();
                this.cardReferenceId_ = "";
                this.bitField0_ &= -2;
                this.latitude_ = "";
                this.bitField0_ &= -3;
                this.longitude_ = "";
                this.bitField0_ &= -5;
                this.deviceId_ = "";
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clearCardReferenceId() {
                this.bitField0_ &= -2;
                this.cardReferenceId_ = UpQrCodeRequest.getDefaultInstance().getCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -9;
                this.deviceId_ = UpQrCodeRequest.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder clearLatitude() {
                this.bitField0_ &= -3;
                this.latitude_ = UpQrCodeRequest.getDefaultInstance().getLatitude();
                onChanged();
                return this;
            }

            public final Builder clearLongitude() {
                this.bitField0_ &= -5;
                this.longitude_ = UpQrCodeRequest.getDefaultInstance().getLongitude();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final String getCardReferenceId() {
                Object obj = this.cardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardReferenceIdBytes() {
                Object obj = this.cardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final UpQrCodeRequest getDefaultInstanceForType() {
                return UpQrCodeRequest.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_descriptor;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getLatitude() {
                Object obj = this.latitude_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.latitude_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLatitudeBytes() {
                Object obj = this.latitude_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.latitude_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getLongitude() {
                Object obj = this.longitude_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.longitude_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLongitudeBytes() {
                Object obj = this.longitude_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.longitude_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasCardReferenceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 8) == 8;
            }

            public final boolean hasLatitude() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasLongitude() {
                return (this.bitField0_ & 4) == 4;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpQrCodeRequest.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpQrCodeRequest upQrCodeRequest;
                UpQrCodeRequest upQrCodeRequest2 = null;
                try {
                    UpQrCodeRequest parsePartialFrom = UpQrCodeRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    upQrCodeRequest = (UpQrCodeRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    upQrCodeRequest2 = upQrCodeRequest;
                }
                if (upQrCodeRequest2 != null) {
                    mergeFrom(upQrCodeRequest2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpQrCodeRequest) {
                    return mergeFrom((UpQrCodeRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpQrCodeRequest upQrCodeRequest) {
                if (upQrCodeRequest == UpQrCodeRequest.getDefaultInstance()) {
                    return this;
                }
                if (upQrCodeRequest.hasCardReferenceId()) {
                    this.bitField0_ |= 1;
                    this.cardReferenceId_ = upQrCodeRequest.cardReferenceId_;
                    onChanged();
                }
                if (upQrCodeRequest.hasLatitude()) {
                    this.bitField0_ |= 2;
                    this.latitude_ = upQrCodeRequest.latitude_;
                    onChanged();
                }
                if (upQrCodeRequest.hasLongitude()) {
                    this.bitField0_ |= 4;
                    this.longitude_ = upQrCodeRequest.longitude_;
                    onChanged();
                }
                if (upQrCodeRequest.hasDeviceId()) {
                    this.bitField0_ |= 8;
                    this.deviceId_ = upQrCodeRequest.deviceId_;
                    onChanged();
                }
                mergeUnknownFields(upQrCodeRequest.getUnknownFields());
                return this;
            }

            public final Builder setCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setLatitude(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.latitude_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setLatitudeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.latitude_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setLongitude(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.longitude_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setLongitudeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.longitude_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            UpQrCodeRequest upQrCodeRequest = new UpQrCodeRequest(true);
            defaultInstance = upQrCodeRequest;
            upQrCodeRequest.initFields();
        }

        private UpQrCodeRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.latitude_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.longitude_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private UpQrCodeRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpQrCodeRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpQrCodeRequest getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_descriptor;
        }

        private void initFields() {
            this.cardReferenceId_ = "";
            this.latitude_ = "";
            this.longitude_ = "";
            this.deviceId_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(UpQrCodeRequest upQrCodeRequest) {
            return newBuilder().mergeFrom(upQrCodeRequest);
        }

        public static UpQrCodeRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpQrCodeRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpQrCodeRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpQrCodeRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpQrCodeRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpQrCodeRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static UpQrCodeRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpQrCodeRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpQrCodeRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpQrCodeRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final String getCardReferenceId() {
            Object obj = this.cardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardReferenceIdBytes() {
            Object obj = this.cardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final UpQrCodeRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getLatitude() {
            Object obj = this.latitude_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.latitude_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLatitudeBytes() {
            Object obj = this.latitude_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.latitude_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final String getLongitude() {
            Object obj = this.longitude_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.longitude_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLongitudeBytes() {
            Object obj = this.longitude_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.longitude_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<UpQrCodeRequest> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getLatitudeBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getLongitudeBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getDeviceIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasCardReferenceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 8) == 8;
        }

        public final boolean hasLatitude() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasLongitude() {
            return (this.bitField0_ & 4) == 4;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpQrCodeRequest.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getLatitudeBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getLongitudeBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getDeviceIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface UpQrCodeRequestOrBuilder extends MessageOrBuilder {
        String getCardReferenceId();

        ByteString getCardReferenceIdBytes();

        String getDeviceId();

        ByteString getDeviceIdBytes();

        String getLatitude();

        ByteString getLatitudeBytes();

        String getLongitude();

        ByteString getLongitudeBytes();

        boolean hasCardReferenceId();

        boolean hasDeviceId();

        boolean hasLatitude();

        boolean hasLongitude();
    }

    public static final class UpQrCodeResponse extends GeneratedMessage implements UpQrCodeResponseOrBuilder {
        public static Parser<UpQrCodeResponse> PARSER = new AbstractParser<UpQrCodeResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpQrCodeResponse.AnonymousClass1 */

            public final UpQrCodeResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpQrCodeResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpQrCodeResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object qrNo_;
        public int result_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpQrCodeResponseOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private Object qrNo_;
            private int result_;

            private Builder() {
                this.qrNo_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.qrNo_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = UpQrCodeResponse.alwaysUseFieldBuilders;
            }

            public final UpQrCodeResponse build() {
                UpQrCodeResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpQrCodeResponse buildPartial() {
                UpQrCodeResponse upQrCodeResponse = new UpQrCodeResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                upQrCodeResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                upQrCodeResponse.qrNo_ = this.qrNo_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                upQrCodeResponse.errorDesc_ = this.errorDesc_;
                upQrCodeResponse.bitField0_ = i2;
                onBuilt();
                return upQrCodeResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.qrNo_ = "";
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = UpQrCodeResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearQrNo() {
                this.bitField0_ &= -3;
                this.qrNo_ = UpQrCodeResponse.getDefaultInstance().getQrNo();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final UpQrCodeResponse getDefaultInstanceForType() {
                return UpQrCodeResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getQrNo() {
                Object obj = this.qrNo_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.qrNo_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getQrNoBytes() {
                Object obj = this.qrNo_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.qrNo_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasQrNo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpQrCodeResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpQrCodeResponse upQrCodeResponse;
                UpQrCodeResponse upQrCodeResponse2 = null;
                try {
                    UpQrCodeResponse parsePartialFrom = UpQrCodeResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    upQrCodeResponse = (UpQrCodeResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    upQrCodeResponse2 = upQrCodeResponse;
                }
                if (upQrCodeResponse2 != null) {
                    mergeFrom(upQrCodeResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpQrCodeResponse) {
                    return mergeFrom((UpQrCodeResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpQrCodeResponse upQrCodeResponse) {
                if (upQrCodeResponse == UpQrCodeResponse.getDefaultInstance()) {
                    return this;
                }
                if (upQrCodeResponse.hasResult()) {
                    setResult(upQrCodeResponse.getResult());
                }
                if (upQrCodeResponse.hasQrNo()) {
                    this.bitField0_ |= 2;
                    this.qrNo_ = upQrCodeResponse.qrNo_;
                    onChanged();
                }
                if (upQrCodeResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = upQrCodeResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(upQrCodeResponse.getUnknownFields());
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setQrNo(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.qrNo_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setQrNoBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.qrNo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }
        }

        static {
            UpQrCodeResponse upQrCodeResponse = new UpQrCodeResponse(true);
            defaultInstance = upQrCodeResponse;
            upQrCodeResponse.initFields();
        }

        private UpQrCodeResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.qrNo_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private UpQrCodeResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpQrCodeResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpQrCodeResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.qrNo_ = "";
            this.errorDesc_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(UpQrCodeResponse upQrCodeResponse) {
            return newBuilder().mergeFrom(upQrCodeResponse);
        }

        public static UpQrCodeResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpQrCodeResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpQrCodeResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpQrCodeResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpQrCodeResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpQrCodeResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static UpQrCodeResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpQrCodeResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpQrCodeResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpQrCodeResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final UpQrCodeResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<UpQrCodeResponse> getParserForType() {
            return PARSER;
        }

        public final String getQrNo() {
            Object obj = this.qrNo_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.qrNo_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getQrNoBytes() {
            Object obj = this.qrNo_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.qrNo_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getQrNoBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasQrNo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpQrCodeResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getQrNoBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface UpQrCodeResponseOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        String getQrNo();

        ByteString getQrNoBytes();

        int getResult();

        boolean hasErrorDesc();

        boolean hasQrNo();

        boolean hasResult();
    }

    public static final class UpQrTokenIdResponse extends GeneratedMessage implements UpQrTokenIdResponseOrBuilder {
        public static Parser<UpQrTokenIdResponse> PARSER = new AbstractParser<UpQrTokenIdResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpQrTokenIdResponse.AnonymousClass1 */

            public final UpQrTokenIdResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpQrTokenIdResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpQrTokenIdResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object qrTokenId_;
        public int result_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpQrTokenIdResponseOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private Object qrTokenId_;
            private int result_;

            private Builder() {
                this.qrTokenId_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.qrTokenId_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = UpQrTokenIdResponse.alwaysUseFieldBuilders;
            }

            public final UpQrTokenIdResponse build() {
                UpQrTokenIdResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpQrTokenIdResponse buildPartial() {
                UpQrTokenIdResponse upQrTokenIdResponse = new UpQrTokenIdResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                upQrTokenIdResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                upQrTokenIdResponse.qrTokenId_ = this.qrTokenId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                upQrTokenIdResponse.errorDesc_ = this.errorDesc_;
                upQrTokenIdResponse.bitField0_ = i2;
                onBuilt();
                return upQrTokenIdResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.qrTokenId_ = "";
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = UpQrTokenIdResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearQrTokenId() {
                this.bitField0_ &= -3;
                this.qrTokenId_ = UpQrTokenIdResponse.getDefaultInstance().getQrTokenId();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final UpQrTokenIdResponse getDefaultInstanceForType() {
                return UpQrTokenIdResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final String getQrTokenId() {
                Object obj = this.qrTokenId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.qrTokenId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getQrTokenIdBytes() {
                Object obj = this.qrTokenId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.qrTokenId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasQrTokenId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpQrTokenIdResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpQrTokenIdResponse upQrTokenIdResponse;
                UpQrTokenIdResponse upQrTokenIdResponse2 = null;
                try {
                    UpQrTokenIdResponse parsePartialFrom = UpQrTokenIdResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    upQrTokenIdResponse = (UpQrTokenIdResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    upQrTokenIdResponse2 = upQrTokenIdResponse;
                }
                if (upQrTokenIdResponse2 != null) {
                    mergeFrom(upQrTokenIdResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpQrTokenIdResponse) {
                    return mergeFrom((UpQrTokenIdResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpQrTokenIdResponse upQrTokenIdResponse) {
                if (upQrTokenIdResponse == UpQrTokenIdResponse.getDefaultInstance()) {
                    return this;
                }
                if (upQrTokenIdResponse.hasResult()) {
                    setResult(upQrTokenIdResponse.getResult());
                }
                if (upQrTokenIdResponse.hasQrTokenId()) {
                    this.bitField0_ |= 2;
                    this.qrTokenId_ = upQrTokenIdResponse.qrTokenId_;
                    onChanged();
                }
                if (upQrTokenIdResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = upQrTokenIdResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(upQrTokenIdResponse.getUnknownFields());
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setQrTokenId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.qrTokenId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setQrTokenIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.qrTokenId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }
        }

        static {
            UpQrTokenIdResponse upQrTokenIdResponse = new UpQrTokenIdResponse(true);
            defaultInstance = upQrTokenIdResponse;
            upQrTokenIdResponse.initFields();
        }

        private UpQrTokenIdResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.qrTokenId_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private UpQrTokenIdResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpQrTokenIdResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpQrTokenIdResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.qrTokenId_ = "";
            this.errorDesc_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(UpQrTokenIdResponse upQrTokenIdResponse) {
            return newBuilder().mergeFrom(upQrTokenIdResponse);
        }

        public static UpQrTokenIdResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpQrTokenIdResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpQrTokenIdResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpQrTokenIdResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpQrTokenIdResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpQrTokenIdResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static UpQrTokenIdResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpQrTokenIdResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpQrTokenIdResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpQrTokenIdResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final UpQrTokenIdResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<UpQrTokenIdResponse> getParserForType() {
            return PARSER;
        }

        public final String getQrTokenId() {
            Object obj = this.qrTokenId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.qrTokenId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getQrTokenIdBytes() {
            Object obj = this.qrTokenId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.qrTokenId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getQrTokenIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasQrTokenId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpQrTokenIdResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getQrTokenIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface UpQrTokenIdResponseOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        String getQrTokenId();

        ByteString getQrTokenIdBytes();

        int getResult();

        boolean hasErrorDesc();

        boolean hasQrTokenId();

        boolean hasResult();
    }

    public static final class UpTransStatusResponse extends GeneratedMessage implements UpTransStatusResponseOrBuilder {
        public static Parser<UpTransStatusResponse> PARSER = new AbstractParser<UpTransStatusResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpTransStatusResponse.AnonymousClass1 */

            public final UpTransStatusResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpTransStatusResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpTransStatusResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        public int transStatus_;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpTransStatusResponseOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private int result_;
            private int transStatus_;

            private Builder() {
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = UpTransStatusResponse.alwaysUseFieldBuilders;
            }

            public final UpTransStatusResponse build() {
                UpTransStatusResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpTransStatusResponse buildPartial() {
                UpTransStatusResponse upTransStatusResponse = new UpTransStatusResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                upTransStatusResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                upTransStatusResponse.transStatus_ = this.transStatus_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                upTransStatusResponse.errorDesc_ = this.errorDesc_;
                upTransStatusResponse.bitField0_ = i2;
                onBuilt();
                return upTransStatusResponse;
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.transStatus_ = 0;
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = UpTransStatusResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final Builder clearTransStatus() {
                this.bitField0_ &= -3;
                this.transStatus_ = 0;
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final UpTransStatusResponse getDefaultInstanceForType() {
                return UpTransStatusResponse.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_descriptor;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final int getResult() {
                return this.result_;
            }

            public final int getTransStatus() {
                return this.transStatus_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final boolean hasTransStatus() {
                return (this.bitField0_ & 2) == 2;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpTransStatusResponse.class, Builder.class);
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpTransStatusResponse upTransStatusResponse;
                UpTransStatusResponse upTransStatusResponse2 = null;
                try {
                    UpTransStatusResponse parsePartialFrom = UpTransStatusResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    upTransStatusResponse = (UpTransStatusResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    upTransStatusResponse2 = upTransStatusResponse;
                }
                if (upTransStatusResponse2 != null) {
                    mergeFrom(upTransStatusResponse2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpTransStatusResponse) {
                    return mergeFrom((UpTransStatusResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpTransStatusResponse upTransStatusResponse) {
                if (upTransStatusResponse == UpTransStatusResponse.getDefaultInstance()) {
                    return this;
                }
                if (upTransStatusResponse.hasResult()) {
                    setResult(upTransStatusResponse.getResult());
                }
                if (upTransStatusResponse.hasTransStatus()) {
                    setTransStatus(upTransStatusResponse.getTransStatus());
                }
                if (upTransStatusResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = upTransStatusResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(upTransStatusResponse.getUnknownFields());
                return this;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder setTransStatus(int i) {
                this.bitField0_ |= 2;
                this.transStatus_ = i;
                onChanged();
                return this;
            }
        }

        static {
            UpTransStatusResponse upTransStatusResponse = new UpTransStatusResponse(true);
            defaultInstance = upTransStatusResponse;
            upTransStatusResponse.initFields();
        }

        private UpTransStatusResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 16) {
                            this.bitField0_ |= 2;
                            this.transStatus_ = codedInputStream.readInt32();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        private UpTransStatusResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpTransStatusResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpTransStatusResponse getDefaultInstance() {
            return defaultInstance;
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_descriptor;
        }

        private void initFields() {
            this.result_ = 0;
            this.transStatus_ = 0;
            this.errorDesc_ = "";
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(UpTransStatusResponse upTransStatusResponse) {
            return newBuilder().mergeFrom(upTransStatusResponse);
        }

        public static UpTransStatusResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpTransStatusResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpTransStatusResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpTransStatusResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpTransStatusResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpTransStatusResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static UpTransStatusResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpTransStatusResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpTransStatusResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpTransStatusResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final UpTransStatusResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<UpTransStatusResponse> getParserForType() {
            return PARSER;
        }

        public final int getResult() {
            return this.result_;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.transStatus_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final int getTransStatus() {
            return this.transStatus_;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final boolean hasTransStatus() {
            return (this.bitField0_ & 2) == 2;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpTransStatusResponse.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.transStatus_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }
    }

    public interface UpTransStatusResponseOrBuilder extends MessageOrBuilder {
        String getErrorDesc();

        ByteString getErrorDescBytes();

        int getResult();

        int getTransStatus();

        boolean hasErrorDesc();

        boolean hasResult();

        boolean hasTransStatus();
    }

    public interface UpdateDoorCardRequestOrBuilder extends MessageOrBuilder {
        DoorCardInfo getCardInfo(int i);

        int getCardInfoCount();

        List<DoorCardInfo> getCardInfoList();

        DoorCardInfoOrBuilder getCardInfoOrBuilder(int i);

        List<? extends DoorCardInfoOrBuilder> getCardInfoOrBuilderList();

        String getCplc();

        ByteString getCplcBytes();

        boolean hasCplc();
    }

    public interface UpdateMifareCardRequestOrBuilder extends MessageOrBuilder {
        MifareCardInfo getCardInfo(int i);

        int getCardInfoCount();

        List<MifareCardInfo> getCardInfoList();

        MifareCardInfoOrBuilder getCardInfoOrBuilder(int i);

        List<? extends MifareCardInfoOrBuilder> getCardInfoOrBuilderList();

        String getCplc();

        ByteString getCplcBytes();

        boolean hasCplc();
    }

    public interface VerifyCardInfoRequestOrBuilder extends MessageOrBuilder {
        String getCardNumber();

        ByteString getCardNumberBytes();

        ByteString getCipherData();

        RiskInfo getRiskInfo();

        RiskInfoOrBuilder getRiskInfoOrBuilder();

        String getSessionId();

        ByteString getSessionIdBytes();

        String getSourceChannel();

        ByteString getSourceChannelBytes();

        boolean hasCardNumber();

        boolean hasCipherData();

        boolean hasRiskInfo();

        boolean hasSessionId();

        boolean hasSourceChannel();
    }

    public interface VerifyCardInfoResponseOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getCardProductTypeId();

        ByteString getCardProductTypeIdBytes();

        String getCardReferenceId();

        ByteString getCardReferenceIdBytes();

        String getExpireDate();

        ByteString getExpireDateBytes();

        String getLastDigits();

        ByteString getLastDigitsBytes();

        String getPhoneNumLastDigits();

        ByteString getPhoneNumLastDigitsBytes();

        int getResult();

        String getVirtualCardNumber();

        ByteString getVirtualCardNumberBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasAid();

        boolean hasCardProductTypeId();

        boolean hasCardReferenceId();

        boolean hasExpireDate();

        boolean hasLastDigits();

        boolean hasPhoneNumLastDigits();

        boolean hasResult();

        boolean hasVirtualCardNumber();

        boolean hasVirtualCardReferenceId();
    }

    public interface VerifyVerificationCodeOrBuilder extends MessageOrBuilder {
        String getSessionId();

        ByteString getSessionIdBytes();

        String getVerificationCode();

        ByteString getVerificationCodeBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasSessionId();

        boolean hasVerificationCode();

        boolean hasVirtualCardReferenceId();
    }

    public interface VirtualCardInfoResponseOrBuilder extends MessageOrBuilder {
        String getAid();

        ByteString getAidBytes();

        String getCardArt();

        ByteString getCardArtBytes();

        String getCardProductId();

        ByteString getCardProductIdBytes();

        String getCardReferenceId();

        ByteString getCardReferenceIdBytes();

        String getErrorDesc();

        ByteString getErrorDescBytes();

        String getFrontColor();

        ByteString getFrontColorBytes();

        String getLastDigits();

        ByteString getLastDigitsBytes();

        String getPhoneNumLastDigits();

        ByteString getPhoneNumLastDigitsBytes();

        int getResult();

        String getVirtualCardNumber();

        ByteString getVirtualCardNumberBytes();

        String getVirtualCardReferenceId();

        ByteString getVirtualCardReferenceIdBytes();

        boolean hasAid();

        boolean hasCardArt();

        boolean hasCardProductId();

        boolean hasCardReferenceId();

        boolean hasErrorDesc();

        boolean hasFrontColor();

        boolean hasLastDigits();

        boolean hasPhoneNumLastDigits();

        boolean hasResult();

        boolean hasVirtualCardNumber();

        boolean hasVirtualCardReferenceId();
    }

    static {
        Descriptors.FileDescriptor.internalBuildGeneratedFileFrom(new String[]{"\n\tTsm.proto\u0012\u0019com.miui.tsmclient.seitsm\"º\u0001\n\u0006SeInfo\u0012\f\n\u0004cplc\u0018\u0001 \u0002(\f\u0012\u0013\n\u000bdevice_type\u0018\u0002 \u0002(\t\u0012\u0011\n\tdevice_id\u0018\u0003 \u0002(\t\u0012>\n\raction_source\u0018\u0004 \u0002(\u000e2'.com.miui.tsmclient.seitsm.ActionSource\u0012:\n\u000bdevice_info\u0018\u0005 \u0001(\u000b2%.com.miui.tsmclient.seitsm.DeviceInfo\"½\u0001\n\u000bSeOperation\u0012\u0012\n\nsession_id\u0018\u0001 \u0002(\t\u00128\n\u0004type\u0018\u0002 \u0002(\u000e2*.com.miui.tsmclient.seitsm.SeOperationType\u0012\u000b\n\u0003aid\u0018\u0003 \u0001(\t\u0012\u001b\n\u0013authentication_code\u0018\u0004 \u0001(\f\u0012\u000f\n\u0007city_id\u0018\u0005 \u0001(\t\u0012\u0016\n\u000esource_channel\u0018\u0006", " \u0001(\t\u0012\r\n\u0005extra\u0018\u0007 \u0001(\t\"I\n\u000eTsmSessionInfo\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0011\n\tsessionId\u0018\u0002 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"@\n\bTsmCAPDU\u0012\f\n\u0004apdu\u0018\u0001 \u0002(\f\u0012\u0017\n\u000fexpect_sw_regex\u0018\u0002 \u0002(\t\u0012\r\n\u0005index\u0018\u0003 \u0001(\u0005\"\u0001\n\u000eTsmAPDUCommand\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0017\n\bhas_more\u0018\u0002 \u0002(\b:\u0005false\u00122\n\u0005apdus\u0018\u0003 \u0003(\u000b2#.com.miui.tsmclient.seitsm.TsmCAPDU\u0012\u0011\n\terrorDesc\u0018\u0004 \u0001(\t\u0012\u000b\n\u0003aid\u0018\u0005 \u0001(\t\"O\n\u0012SeAPDUResponseItem\u0012\u0015\n\rresponse_data\u0018\u0001 \u0002(\f\u0012\u0013\n\u000bresponse_sw\u0018\u0002 \u0002(\f\u0012\r\n\u0005index\u0018\u0003 \u0001(\u0005\"e\n\u000eSeAPDURe", "sponse\u0012\u0012\n\nsession_id\u0018\u0001 \u0002(\t\u0012?\n\bresponse\u0018\u0002 \u0003(\u000b2-.com.miui.tsmclient.seitsm.SeAPDUResponseItem\"\u0001\n\u000eTopUpOperation\u0012\u0012\n\nsession_id\u0018\u0001 \u0002(\t\u0012\u000b\n\u0003aid\u0018\u0002 \u0002(\t\u0012\u001b\n\u0013authentication_code\u0018\u0003 \u0002(\f\u0012\u000f\n\u0007city_id\u0018\u0004 \u0001(\t\u0012\u0013\n\u000bcard_number\u0018\u0005 \u0001(\t\u0012\u000f\n\u0007balance\u0018\u0006 \u0001(\u0005\u0012\r\n\u0005extra\u0018\u0007 \u0001(\t\"6\n\u0017QueryProductInfoRequest\u0012\u000b\n\u0003bin\u0018\u0001 \u0001(\t\u0012\u000e\n\u0006bindId\u0018\u0002 \u0001(\u0003\"¢\u0001\n\u0015VerifyCardInfoRequest\u0012\u0012\n\nsession_id\u0018\u0001 \u0002(\t\u0012\u0012\n\ncardNumber\u0018\u0002 \u0001(\t\u0012\u0013\n\u000bcipher_data\u0018\u0003 \u0002(\f\u00125\n\briskInfo\u0018\u0004 ", "\u0002(\u000b2#.com.miui.tsmclient.seitsm.RiskInfo\u0012\u0015\n\rsourceChannel\u0018\u0005 \u0001(\t\"ë\u0001\n\u0016VerifyCardInfoResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u000b\n\u0003aid\u0018\u0002 \u0001(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0003 \u0001(\t\u0012\u0019\n\u0011virtualCardNumber\u0018\u0004 \u0001(\t\u0012\u0012\n\nexpireDate\u0018\u0005 \u0001(\t\u0012\u0012\n\nlastDigits\u0018\u0006 \u0001(\t\u0012\u0019\n\u0011cardProductTypeId\u0018\u0007 \u0001(\t\u0012\u0017\n\u000fcardReferenceId\u0018\b \u0001(\t\u0012\u001a\n\u0012phoneNumLastDigits\u0018\t \u0001(\t\"\u0001\n\u0017RequestVerificationCode\u0012\u0012\n\nsession_id\u0018\u0001 \u0002(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0002 \u0002(\t\u00127\n\toptMethod\u0018\u0003 \u0002(\u000e", "2$.com.miui.tsmclient.seitsm.OtpMethod\"f\n\u0016VerifyVerificationCode\u0012\u0012\n\nsession_id\u0018\u0001 \u0002(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0002 \u0002(\t\u0012\u0018\n\u0010verificationCode\u0018\u0003 \u0002(\t\"D\n\u0015UpCardMoreInfoRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u0018\n\u0010oldVcReferenceId\u0018\u0002 \u0001(\t\"f\n\u0016UpCardMoreInfoResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0015\n\rcontactNumber\u0018\u0002 \u0001(\t\u0012\u000f\n\u0007fakePan\u0018\u0003 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0004 \u0001(\t\"`\n\u0018QueryBankCardInfoRequest\u0012\f\n\u0004cplc\u0018\u0001 \u0002(\t\u0012\u000b\n\u0003aid\u0018\u0002 \u0001(\t\u0012\u000f\n\u0007vcRefId\u0018\u0003 \u0001(\t\u0012\u0018\n\rrequestS", "ource\u0018\u0004 \u0001(\u0005:\u00010\"/\n\u001fQueryQuickEnrollCardListRequest\u0012\f\n\u0004cplc\u0018\u0001 \u0002(\t\"­\u0003\n\fBankCardInfo\u0012\u000b\n\u0003aid\u0018\u0001 \u0001(\t\u0012\u0012\n\ncardNumber\u0018\u0002 \u0001(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0003 \u0001(\t\u0012\u0019\n\u0011virtualCardNumber\u0018\u0004 \u0001(\t\u0012\u0012\n\nlastDigits\u0018\u0005 \u0001(\t\u0012\u0010\n\bvcStatus\u0018\u0006 \u0001(\u0005\u0012\u000e\n\u0006userId\u0018\u0007 \u0001(\t\u0012\u0011\n\tproductId\u0018\b \u0001(\t\u0012\u0013\n\u000bproductName\u0018\t \u0001(\t\u0012\u0011\n\tuserTerms\u0018\n \u0001(\t\u0012\u000f\n\u0007cardArt\u0018\u000b \u0001(\t\u0012\u0010\n\bcardType\u0018\f \u0001(\u0005\u0012=\n\nissuerInfo\u0018\r \u0001(\u000b2).com.miui.tsmclient.seitsm.CardIssuerInfo\u0012\u0012\n\nfrontColor\u0018\u000e ", "\u0001(\t\u0012\u0012\n\nhasQrToken\u0018\u000f \u0001(\b\u0012\u0016\n\u000eserviceHotline\u0018\u0010 \u0001(\t\u0012\u0012\n\nsuggestion\u0018\u0011 \u0001(\t\u0012\u001a\n\u0012cardElementsOption\u0018\u0012 \u0001(\u0005\"\u0001\n\u0019QueryBankCardInfoResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012A\n\u0010bankCardInfoList\u0018\u0002 \u0003(\u000b2'.com.miui.tsmclient.seitsm.BankCardInfo\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"K\n\u000eCommonResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0013\n\u000bdescription\u0018\u0002 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"Ê\u0001\n\u0011SaveAppKeyRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u000f\n\u0007appName\u0018\u0002 \u0001(\t\u0012\u0010\n\bcpuModel\u0018\u0003 \u0001(\t\u0012\f\n\u0004tzId\u0018\u0004 \u0001(\t\u0012\u000e\n", "\u0006keyAlg\u0018\u0005 \u0001(\t\u0012\u000b\n\u0003pkX\u0018\u0006 \u0001(\t\u0012\u000b\n\u0003pkY\u0018\u0007 \u0001(\t\u0012\u0012\n\nclientSign\u0018\b \u0001(\t\u0012\u0013\n\u000bdeviceModel\u0018\t \u0001(\t\u0012\u0010\n\bdeviceId\u0018\n \u0001(\t\u0012\f\n\u0004cplc\u0018\u000b \u0001(\t\"â\u0001\n\u000eCardIssuerInfo\u0012E\n\u0010cardIssueChannel\u0018\u0001 \u0002(\u000e2+.com.miui.tsmclient.seitsm.CardIssueChannel\u0012\u0010\n\bissuerId\u0018\u0002 \u0002(\t\u0012\u0010\n\bbankName\u0018\u0003 \u0001(\t\u0012\u000f\n\u0007logoUrl\u0018\u0004 \u0001(\t\u0012\u001b\n\u0013logoWithBankNameUrl\u0018\u0005 \u0001(\t\u0012\u0015\n\rcontactNumber\u0018\u0006 \u0001(\t\u0012\u000f\n\u0007bgImage\u0018\u0007 \u0001(\t\u0012\u000f\n\u0007hotline\u0018\b \u0001(\t\"[\n\u000fQueryPanRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u000b\n\u0003pan\u0018\u0002 \u0001(\t\u0012\u000e\n\u0006bind", "Id\u0018\u0003 \u0001(\u0003\u0012\u0018\n\rrequestSource\u0018\u0004 \u0001(\u0005:\u00010\"É\u0001\n\u0010QueryPanResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012A\n\u000ecardIssuerInfo\u0018\u0002 \u0001(\u000b2).com.miui.tsmclient.seitsm.CardIssuerInfo\u00129\n\bcardType\u0018\u0003 \u0001(\u000e2'.com.miui.tsmclient.seitsm.BankCardType\u0012\u0011\n\tuserTerms\u0018\u0004 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0005 \u0001(\t\"ª\u0001\n\u0017PreparePayAppletRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012A\n\u000ecardIssuerInfo\u0018\u0002 \u0002(\u000b2).com.miui.tsmclient.seitsm.CardIssuerInfo\u00129\n\bcardType\u0018\u0003 \u0002(\u000e2'.com.miui.tsmclient.seitsm.B", "ankCardType\"Ú\u0002\n\u0013EnrollUPCardRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u0012\n\ncardNumber\u0018\u0002 \u0001(\t\u0012\u0010\n\bcardInfo\u0018\u0003 \u0002(\f\u0012\u000f\n\u0007pinInfo\u0018\u0004 \u0001(\f\u0012\u0010\n\bcvn2Info\u0018\u0005 \u0001(\f\u0012=\n\fbankCardType\u0018\u0006 \u0002(\u000e2'.com.miui.tsmclient.seitsm.BankCardType\u00125\n\briskInfo\u0018\u0007 \u0001(\u000b2#.com.miui.tsmclient.seitsm.RiskInfo\u0012\u0015\n\rsourceChannel\u0018\b \u0001(\t\u0012\u0014\n\fapplyChannel\u0018\t \u0001(\t\u0012\u0010\n\bissuerId\u0018\n \u0001(\t\u0012\u0018\n\u0010virtualCardRefId\u0018\u000b \u0001(\t\u0012\u0018\n\rrequestSource\u0018\f \u0001(\u0005:\u00010\"\u0002\n\u0017VirtualCardInfoResponse\u0012\u0011\n\u0006result\u0018\u0001", " \u0002(\u0005:\u00010\u0012\u000b\n\u0003aid\u0018\u0002 \u0001(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0003 \u0001(\t\u0012\u0019\n\u0011virtualCardNumber\u0018\u0004 \u0001(\t\u0012\u0012\n\nlastDigits\u0018\u0006 \u0001(\t\u0012\u0015\n\rcardProductId\u0018\u0007 \u0001(\t\u0012\u0017\n\u000fcardReferenceId\u0018\b \u0001(\t\u0012\u001a\n\u0012phoneNumLastDigits\u0018\t \u0001(\t\u0012\u0012\n\nfrontColor\u0018\n \u0001(\t\u0012\u000f\n\u0007cardArt\u0018\u000b \u0001(\t\u0012\u0011\n\terrorDesc\u0018\f \u0001(\t\")\n\u0014PullPersoDataRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\"+\n\u0016PullBusCardDataRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\"§\u0001\n\u0018PersoFinishNotifyRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0002 \u0002(\t\u0012", "\u0017\n\u000foperationResult\u0018\u0003 \u0002(\b\u0012?\n\bresponse\u0018\u0004 \u0003(\u000b2-.com.miui.tsmclient.seitsm.SeAPDUResponseItem\"Æ\u0001\n\u001aProcessFinishNotifyRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u0014\n\factionResult\u0018\u0002 \u0002(\b\u0012>\n\nactionType\u0018\u0003 \u0002(\u000e2*.com.miui.tsmclient.seitsm.SeOperationType\u0012?\n\bresponse\u0018\u0004 \u0003(\u000b2-.com.miui.tsmclient.seitsm.SeAPDUResponseItem\"\u0001\n\nDeviceInfo\u0012\u0013\n\u000bdeviceModel\u0018\u0001 \u0002(\t\u0012\f\n\u0004lang\u0018\u0002 \u0002(\t\u0012\u0013\n\u000bmiuiRomType\u0018\u0003 \u0002(\t\u0012\u0019\n\u0011miuiSystemVersion\u0018\u0004 \u0002(\t\u0012\u001c\n\u0014tsmclien", "tVersionCode\u0018\u0005 \u0001(\u0005\u0012\f\n\u0004seId\u0018\u0006 \u0001(\t\"\u0005\n\bRiskInfo\u00129\n\ndeviceType\u0018\u0001 \u0001(\u000e2%.com.miui.tsmclient.seitsm.DeviceType\u0012\u0016\n\u000edeviceLanguage\u0018\u0002 \u0001(\t\u0012\u0012\n\ndeviceName\u0018\u0003 \u0001(\t\u0012=\n\fapplyChannel\u0018\u0004 \u0001(\u000e2'.com.miui.tsmclient.seitsm.ApplyChannel\u0012\u0016\n\u000edeviceLocation\u0018\u0005 \u0001(\t\u0012\u001f\n\u0017extensiveDeviceLocation\u0018\u0006 \u0001(\t\u0012?\n\rcaptureMethod\u0018\u0007 \u0001(\u000e2(.com.miui.tsmclient.seitsm.CaptureMethod\u0012\u0018\n\u0010accountEmailLife\u0018\b \u0001(\t\u0012\u0016\n\u000ecardHolderName\u0018\t \u0001(\t\u0012\u0016\n\u000ebillingAddres", "s\u0018\n \u0001(\t\u0012\u0012\n\nbillingZip\u0018\u000b \u0001(\t\u0012\u0011\n\triskScore\u0018\f \u0001(\u0005\u0012\u001b\n\u0013riskStandardVersion\u0018\r \u0001(\t\u0012\u0013\n\u000bdeviceScore\u0018\u000e \u0001(\u0005\u0012\u0014\n\faccountScore\u0018\u000f \u0001(\u0005\u0012\u0018\n\u0010phoneNumberScore\u0018\u0010 \u0001(\u0005\u0012\u0016\n\u000eriskReasonCode\u0018\u0011 \u0003(\t\u0012\u0014\n\fdeviceNumber\u0018\u0012 \u0001(\t\u0012\u0018\n\u0010fullDeviceNumber\u0018\u0013 \u0003(\t\u0012\u0010\n\bsourceIP\u0018\u0014 \u0001(\t\u0012\u0017\n\u000fdeviceSIMNumber\u0018\u0015 \u0001(\u0005\u0012\u0015\n\raccountIDHash\u0018\u0016 \u0001(\t\"æ\u0001\n\u0013CheckServiceRequest\u00129\n\ndeviceInfo\u0018\u0001 \u0002(\u000b2%.com.miui.tsmclient.seitsm.DeviceInfo\u0012:\n\nseviceType\u0018\u0002 \u0002(\u000e2&.com.miui.tsm", "client.seitsm.ServiceType\u0012;\n\briskInfo\u0018\u0003 \u0001(\u000b2).com.miui.tsmclient.seitsm.CommonRiskInfo\u0012\f\n\u0004cplc\u0018\u0004 \u0001(\t\u0012\r\n\u0005extra\u0018\u0005 \u0001(\t\"Y\n\u000eCommonRiskInfo\u0012\u0011\n\taccountId\u0018\u0001 \u0001(\t\u0012\u000f\n\u0007md5Imei\u0018\u0002 \u0001(\t\u0012\u0010\n\blocation\u0018\u0003 \u0001(\t\u0012\u0011\n\tsimNumber\u0018\u0004 \u0003(\t\"Ç\u0001\n\u0015CopyMifareCardRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u000b\n\u0003uid\u0018\u0002 \u0002(\t\u0012\f\n\u0004atqa\u0018\u0003 \u0001(\t\u0012\u000b\n\u0003sak\u0018\u0004 \u0001(\t\u0012\u000f\n\u0007content\u0018\u0005 \u0001(\t\u0012\f\n\u0004size\u0018\u0006 \u0001(\u0005\u0012\u000f\n\u0007md5Imei\u0018\u0007 \u0001(\t\u0012C\n\bcardType\u0018\b \u0001(\u000e2).com.miui.tsmclient.seitsm.MifareCardType", ":\u0006NORMAL\"*\n\u001aQueryMifareCardInfoRequest\u0012\f\n\u0004cplc\u0018\u0001 \u0002(\t\"\u0001\n\u001bQueryMifareCardInfoResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012?\n\fcardInfoList\u0018\u0002 \u0003(\u000b2).com.miui.tsmclient.seitsm.MifareCardInfo\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"µ\u0001\n\u000eMifareCardInfo\u0012\u000b\n\u0003aid\u0018\u0001 \u0001(\t\u0012\f\n\u0004name\u0018\u0002 \u0001(\t\u0012\u0010\n\bvcStatus\u0018\u0003 \u0001(\u0005\u0012\u0011\n\tuserTerms\u0018\u0004 \u0001(\t\u0012\u000f\n\u0007cardArt\u0018\u0005 \u0001(\t\u0012\u0015\n\nfingerFlag\u0018\u0006 \u0001(\u0005:\u00010\u0012;\n\bcardType\u0018\u0007 \u0001(\u000e2).com.miui.tsmclient.seitsm.MifareCardType\"d\n\u0017UpdateMifareCardRequest\u0012\f", "\n\u0004cplc\u0018\u0001 \u0002(\t\u0012;\n\bcardInfo\u0018\u0002 \u0003(\u000b2).com.miui.tsmclient.seitsm.MifareCardInfo\"Ô\u0002\n\u000eInAppTransData\u0012\u0010\n\bacquirer\u0018\u0001 \u0001(\u0005\u0012\u0013\n\u000borderNumber\u0018\u0002 \u0001(\t\u0012\u0014\n\fmerchantName\u0018\u0003 \u0001(\t\u0012\u0012\n\nmerchantId\u0018\u0004 \u0001(\t\u0012\u0013\n\u000btotalAmount\u0018\u0005 \u0001(\u0003\u0012\u0016\n\u000ediscountAmount\u0018\u0006 \u0001(\u0003\u0012\u0011\n\tpayAmount\u0018\u0007 \u0001(\u0003\u0012\u0018\n\u0010encryptPayAmount\u0018\b \u0001(\t\u0012\u000b\n\u0003pan\u0018\t \u0001(\t\u0012\u0014\n\fcurrencyCode\u0018\n \u0001(\t\u0012\f\n\u0004sign\u0018\u000b \u0001(\t\u0012\u0014\n\fsignKeyIndex\u0018\f \u0001(\u0005\u0012\u0014\n\fverifyMethod\u0018\r \u0001(\u0005\u0012\u000f\n\u0007pbocAid\u0018\u000e \u0001(\t\u0012\u0017\n\u000fcardReferenceId\u0018\u000f \u0001(\t\u0012\u0010", "\n\bdeviceId\u0018\u0010 \u0001(\t\" \u0001\n\u0011InAppTransCommand\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u00122\n\u0005apdus\u0018\u0003 \u0001(\u000b2#.com.miui.tsmclient.seitsm.TsmCAPDU\u0012\f\n\u0004sign\u0018\u0004 \u0001(\t\u0012\u0011\n\ttimestamp\u0018\u0005 \u0001(\t\u0012\u0010\n\bkeyIndex\u0018\u0006 \u0001(\u0005\u0012\u0011\n\terrorDesc\u0018\u0007 \u0001(\t\"q\n\u001aTransDataForNonNFCResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u000f\n\u0007qrToken\u0018\u0002 \u0001(\t\u0012\u000f\n\u0007vrfMode\u0018\u0003 \u0001(\t\u0012\f\n\u0004sign\u0018\u0004 \u0001(\t\u0012\u0010\n\bkeyIndex\u0018\u0005 \u0001(\u0005\"k\n\u000eInAppPayResult\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0010\n\bacquirer\u0018\u0002 \u0001(\u0005\u0012\u0013\n\u000borderNumber\u0018\u0003 \u0002(\t\u0012\u0012\n\nmerchantId\u0018\u0004 \u0002(\t\u0012\u000b\n\u0003pan\u0018\u0005 ", "\u0002(\t\"o\n\u000fMifareCardParam\u0012\u000b\n\u0003uid\u0018\u0001 \u0001(\t\u0012\f\n\u0004atqa\u0018\u0002 \u0001(\t\u0012\u000b\n\u0003sak\u0018\u0003 \u0001(\t\u0012\u000f\n\u0007content\u0018\u0004 \u0001(\t\u0012\f\n\u0004size\u0018\u0005 \u0001(\u0005\u0012\u0015\n\nsectorType\u0018\u0006 \u0001(\u0005:\u00010\"×\u0002\n\u0015EnrollDoorCardRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0001(\t\u0012\u0010\n\bissuerId\u0018\u0002 \u0001(\t\u0012\u0011\n\tproductId\u0018\u0003 \u0001(\t\u0012C\n\u000fmifareCardParam\u0018\u0004 \u0001(\u000b2*.com.miui.tsmclient.seitsm.MifareCardParam\u0012\u0018\n\fapplyChannel\u0018\u0005 \u0001(\t:\u000200\u0012D\n\bcardType\u0018\u0006 \u0001(\u000e2'.com.miui.tsmclient.seitsm.DoorCardType:\tM1_NORMAL\u0012\u0013\n\u000bissuerToken\u0018\u0007 \u0001(\t\u0012\u0015\n\rcommunityCod", "e\u0018\b \u0001(\t\u0012\u0012\n\nbusinessId\u0018\t \u0001(\t\u0012\u000e\n\u0006ticket\u0018\n \u0001(\t\u0012\u0011\n\toverwrite\u0018\u000b \u0001(\b\"Å\u0002\n\fDoorCardInfo\u0012\u000b\n\u0003aid\u0018\u0001 \u0001(\t\u0012\f\n\u0004name\u0018\u0002 \u0001(\t\u0012\u0010\n\bvcStatus\u0018\u0003 \u0001(\u0005\u0012\u0011\n\tuserTerms\u0018\u0004 \u0001(\t\u0012\u000f\n\u0007cardArt\u0018\u0005 \u0001(\t\u0012\u0015\n\nfingerFlag\u0018\u0006 \u0001(\u0005:\u00010\u00129\n\bcardType\u0018\u0007 \u0001(\u000e2'.com.miui.tsmclient.seitsm.DoorCardType\u0012\u000b\n\u0003cid\u0018\b \u0001(\t\u0012\u0011\n\tproductId\u0018\t \u0001(\t\u0012\u0014\n\fapplyChannel\u0018\n \u0001(\t\u0012\u0015\n\rcommunityCode\u0018\u000b \u0001(\t\u0012\u000e\n\u0006status\u0018\f \u0001(\t\u0012\u0012\n\nbusinessId\u0018\r \u0001(\t\u0012\f\n\u0004seId\u0018\u000e \u0001(\t\u0012\u0013\n\u000bproductName\u0018\u000f \u0001(\t\"\u0001\n\u0019Query", "DoorCardInfoResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012=\n\fcardInfoList\u0018\u0002 \u0003(\u000b2'.com.miui.tsmclient.seitsm.DoorCardInfo\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"`\n\u0015UpdateDoorCardRequest\u0012\f\n\u0004cplc\u0018\u0001 \u0001(\t\u00129\n\bcardInfo\u0018\u0002 \u0003(\u000b2'.com.miui.tsmclient.seitsm.DoorCardInfo\"º\u0001\n\u0014QueryDoorCardRequest\u0012\f\n\u0004cplc\u0018\u0001 \u0001(\t\u0012\u000b\n\u0003aid\u0018\u0002 \u0001(\t\u00129\n\bcardType\u0018\u0003 \u0001(\u000e2'.com.miui.tsmclient.seitsm.DoorCardType\u0012\u0011\n\tproductId\u0018\u0004 \u0001(\t\u00129\n\ndeviceInfo\u0018\u0005 \u0001(\u000b2%.com.miui.tsmclient.seitsm.De", "viceInfo\"h\n\u0016CheckSeUpgradeResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0011\n\terrorDesc\u0018\u0002 \u0001(\t\u0012\u0013\n\u000bneedUpgrade\u0018\u0003 \u0001(\b\u0012\u0013\n\u000bfrontConfig\u0018\u0004 \u0001(\t\"6\n\u0010EnrollEidRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0001(\t\u0012\u000f\n\u0007spToken\u0018\u0002 \u0001(\t\"G\n\u0007EidInfo\u0012\f\n\u0004name\u0018\u0001 \u0001(\t\u0012\u0010\n\bvcStatus\u0018\u0002 \u0001(\u0005\u0012\u000f\n\u0007cardArt\u0018\u0003 \u0001(\t\u0012\u000b\n\u0003aid\u0018\u0004 \u0001(\t\"l\n\u000fEidInfoResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u00123\n\u0007eidInfo\u0018\u0002 \u0001(\u000b2\".com.miui.tsmclient.seitsm.EidInfo\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"=\n\u0014QueryPanForQrRequest\u0012\u0010\n\bdeviceId\u0018\u0001 \u0001(\t\u0012\u0013\n\u000bc", "ipheredPan\u0018\u0002 \u0001(\f\"Î\u0001\n\u0015QueryPanForQrResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012A\n\u000ecardIssuerInfo\u0018\u0002 \u0001(\u000b2).com.miui.tsmclient.seitsm.CardIssuerInfo\u00129\n\bcardType\u0018\u0003 \u0001(\u000e2'.com.miui.tsmclient.seitsm.BankCardType\u0012\u0011\n\terrorDesc\u0018\u0004 \u0001(\t\u0012\u0011\n\tuserTerms\u0018\u0005 \u0001(\t\"P\n\u001cRequestVerificationCodeForQr\u0012\u0010\n\bdeviceId\u0018\u0001 \u0001(\t\u0012\u0010\n\bcardInfo\u0018\u0002 \u0001(\f\u0012\f\n\u0004cvn2\u0018\u0003 \u0001(\f\"\u0001\n\u0013AddCardForQrRequest\u0012\u0010\n\bdeviceId\u0018\u0001 \u0001(\t\u0012\u0010\n\bcardInfo\u0018\u0002 \u0001(\f\u0012\f\n\u0004cvn2\u0018\u0003 \u0001(\f\u00125\n\briskInfo\u0018\u0004 \u0001(\u000b2", "#.com.miui.tsmclient.seitsm.RiskInfo\u0012\u0010\n\bissuerId\u0018\u0005 \u0001(\t\"Ã\u0001\n\nQrCardInfo\u0012\u0017\n\u000fcardReferenceId\u0018\u0001 \u0001(\t\u0012\u0012\n\nlastDigits\u0018\u0002 \u0001(\t\u0012\u000e\n\u0006userId\u0018\u0003 \u0001(\t\u0012=\n\nissuerInfo\u0018\u0004 \u0001(\u000b2).com.miui.tsmclient.seitsm.CardIssuerInfo\u00129\n\bcardType\u0018\u0005 \u0001(\u000e2'.com.miui.tsmclient.seitsm.BankCardType\"u\n\u0014AddCardForQrResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u00127\n\bcardInfo\u0018\u0002 \u0001(\u000b2%.com.miui.tsmclient.seitsm.QrCardInfo\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\",\n\u0018BankCardListForQrRequest\u0012", "\u0010\n\bdeviceId\u0018\u0001 \u0001(\t\"~\n\u0019BankCardListForQrResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012;\n\fcardInfoList\u0018\u0002 \u0003(\u000b2%.com.miui.tsmclient.seitsm.QrCardInfo\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"D\n\u0017DeleteQrBankCardRequest\u0012\u0010\n\bdeviceId\u0018\u0001 \u0001(\t\u0012\u0017\n\u000fcardReferenceId\u0018\u0002 \u0001(\t\"\u0001\n\u0010IdentityResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\f\n\u0004name\u0018\u0002 \u0001(\t\u0012\u0010\n\bidCardNo\u0018\u0003 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0004 \u0001(\t\u0012=\n\bcardType\u0018\u0005 \u0001(\u000e2+.com.miui.tsmclient.seitsm.IdentityCardType\"5\n\u0013IdentityBindRequest\u0012\f\n\u0004name", "\u0018\u0001 \u0001(\t\u0012\u0010\n\bidCardNo\u0018\u0002 \u0001(\t\"a\n\u000fUpQrCodeRequest\u0012\u0017\n\u000fcardReferenceId\u0018\u0001 \u0001(\t\u0012\u0010\n\blatitude\u0018\u0002 \u0001(\t\u0012\u0011\n\tlongitude\u0018\u0003 \u0001(\t\u0012\u0010\n\bdeviceId\u0018\u0004 \u0001(\t\"F\n\u0010UpQrCodeResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\f\n\u0004qrNo\u0018\u0002 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"\u0001\n\u0016TsmStartActionResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0011\n\tsessionId\u0018\u0002 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\u0012>\n\u000bapduCommand\u0018\u0004 \u0001(\u000b2).com.miui.tsmclient.seitsm.TsmAPDUCommand\"\u0001\n\u0012TsmStartActionInfo\u00121\n\u0006seInfo\u0018\u0001 \u0002(\u000b2!.com.miui.tsmcli", "ent.seitsm.SeInfo\u0012>\n\nactionName\u0018\u0002 \u0002(\u000e2*.com.miui.tsmclient.seitsm.SeOperationType\u0012\u000e\n\u0006params\u0018\u0003 \u0002(\t\"R\n\u0015UpTransStatusResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0013\n\u000btransStatus\u0018\u0002 \u0001(\u0005\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\"N\n\u0013UpQrTokenIdResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0011\n\tqrTokenId\u0018\u0002 \u0001(\t\u0012\u0011\n\terrorDesc\u0018\u0003 \u0001(\t\":\n\u0016PullExecuteTaskRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\r\n\u0005event\u0018\u0002 \u0002(\t\"\u0001\n\u0017PullExecuteTaskResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0002(\u0005:\u00010\u0012\u0011\n\terrorDesc\u0018\u0002 \u0001(\t\u00129\n\ntsmLibDat", "a\u0018\u0003 \u0001(\u000b2%.com.miui.tsmclient.seitsm.TsmLibData\u0012\u0014\n\fvirtualCards\u0018\u0004 \u0003(\t\"7\n\nTsmLibData\u0012\r\n\u0005event\u0018\u0001 \u0001(\t\u0012\f\n\u0004sign\u0018\u0002 \u0001(\t\u0012\f\n\u0004ssid\u0018\u0003 \u0001(\t\"J\n\u0015DeleteBankCardRequest\u0012\u0011\n\tsessionId\u0018\u0001 \u0002(\t\u0012\u001e\n\u0016virtualCardReferenceId\u0018\u0002 \u0002(\t\"L\n\u0014AppletStatusResponse\u0012\u0011\n\u0006result\u0018\u0001 \u0001(\u0005:\u00010\u0012\u0011\n\terrorDesc\u0018\u0002 \u0001(\t\u0012\u000e\n\u0006status\u0018\u0003 \u0001(\u0005*ª\u0002\n\u000fSeOperationType\u0012\b\n\u0004LOCK\u0010\u0001\u0012\n\n\u0006UNLOCK\u0010\u0002\u0012\u000b\n\u0007INSTALL\u0010\u0003\u0012\n\n\u0006DELETE\u0010\u0004\u0012\b\n\u0004SYNC\u0010\u0005\u0012\b\n\u0004LOAD\u0010\u0006\u0012\t\n\u0005CLEAN\u0010\u0007\u0012\t\n\u0005TOPUP\u0010\b\u0012\u000e\n\nUNRESTRI", "CT\u0010\t\u0012\u000b\n\u0007UPGRADE\u0010\n\u0012\r\n\tSHIFT_OUT\u0010\u000b\u0012\f\n\bSHIFT_IN\u0010\f\u0012\u0013\n\u000fCHECK_SHIFT_OUT\u0010\r\u0012\u000e\n\nUPGRADE_SE\u0010\u000e\u0012\u000f\n\u000bOUT_INSTALL\u0010\u0015\u0012\r\n\tOUT_TOPUP\u0010\u0016\u0012\u000e\n\nOUT_RETURN\u0010\u0017\u0012\n\n\u0006RETURN\u0010\u0018\u0012\r\n\tREAD_CARD\u0010\u0019\u0012\u0014\n\u0010DOOR_CARD_ENROLL\u0010\u001e*Q\n\fActionSource\u0012\u000e\n\nAPP_CLIENT\u0010\u0000\u0012\u000e\n\nWEB_CLIENT\u0010\u0001\u0012\f\n\bMI_CLOUD\u0010\u0003\u0012\u0006\n\u0002SP\u0010\u0004\u0012\u000b\n\u0007UNKNOWN\u0010\u0005*(\n\tOtpMethod\u0012\u0007\n\u0003SMS\u0010\u0001\u0012\u0007\n\u0003TEL\u0010\u0002\u0012\t\n\u0005EMAIL\u0010\u0003*%\n\fBankCardType\u0012\t\n\u0005DEBIT\u0010\u0001\u0012\n\n\u0006CREDIT\u0010\u0002*#\n\u0010CardIssueChannel\u0012\u0006\n\u0002UP\u0010\u0001\u0012\u0007\n\u0003CMB\u0010\u0002*5\n\nDeviceType\u0012\t\n\u0005P", "HONE\u0010\u0001\u0012\u0007\n\u0003PAD\u0010\u0002\u0012\t\n\u0005WATCH\u0010\u0003\u0012\b\n\u0004BAND\u0010\u0004*$\n\fApplyChannel\u0012\n\n\u0006XIAOMI\u0010\u0001\u0012\b\n\u0004BANK\u0010\u0002*L\n\rCaptureMethod\u0012\n\n\u0006MANUAL\u0010\u0001\u0012\u0007\n\u0003NFC\u0010\u0002\u0012\n\n\u0006CAMERA\u0010\u0003\u0012\u001a\n\u0016UNKNOWN_CAPTURE_METHOD\u0010\u0004*'\n\u000eMifareCardType\u0012\n\n\u0006NORMAL\u0010\u0000\u0012\t\n\u0005BLANK\u0010\u0001*z\n\u000bServiceType\u0012\r\n\tBANK_CARD\u0010\u0000\u0012\u000f\n\u000bMIFARE_CARD\u0010\u0001\u0012\f\n\bBUS_CARD\u0010\u0002\u0012\t\n\u0005INAPP\u0010\u0003\u0012\u0015\n\u0011MIFARE_BLANK_CARD\u0010\u0004\u0012\f\n\bCPU_CARD\u0010\u0005\u0012\r\n\tDOOR_CARD\u0010\u0006*9\n\fDoorCardType\u0012\r\n\tM1_NORMAL\u0010\u0000\u0012\b\n\u0004DOOR\u0010\u0001\u0012\u0010\n\fM1_ONLINE_V3\u0010\u0006*\u0001\n\u0006IdType\u0012\u0011\n\rIDENTITY_", "CARD\u0010\u0001\u0012\u0011\n\rOFFICIAL_CARD\u0010\u0002\u0012\f\n\bPASSPORT\u0010\u0003\u0012\u001b\n\u0017HONGKONG_AND_MACAO_CARD\u0010\u0004\u0012\u0016\n\u0012TAIWAN_COMPATRIOTS\u0010\u0005\u0012\u000f\n\u000bPOLICE_CARD\u0010\u0006\u0012\u0010\n\fSOLDIER_CARD\u0010\u0007\u0012\t\n\u0005OTHER\u0010c*W\n\u0010IdentityCardType\u0012\u000b\n\u0007ID_CARD\u0010\u0001\u0012\u0014\n\u0010FOREIGN_PASSPORT\u0010\u0002\u0012\u0011\n\rHK_MC_ID_CARD\u0010\u0003\u0012\r\n\tTW_RETURN\u0010\u0004B)\n\u0019com.miui.tsmclient.seitsmB\fTsmRpcModels"}, new Descriptors.FileDescriptor[0], new Descriptors.FileDescriptor.InternalDescriptorAssigner() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.AnonymousClass1 */

            public final ExtensionRegistry assignDescriptors(Descriptors.FileDescriptor fileDescriptor) {
                TsmRpcModels.descriptor = fileDescriptor;
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(0);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_descriptor, new String[]{"Cplc", "DeviceType", "DeviceId", "ActionSource", "DeviceInfo"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(1);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_descriptor, new String[]{"SessionId", "Type", "Aid", "AuthenticationCode", "CityId", "SourceChannel", "Extra"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(2);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_descriptor, new String[]{"Result", "SessionId", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(3);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_descriptor, new String[]{"Apdu", "ExpectSwRegex", "Index"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(4);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_descriptor, new String[]{"Result", "HasMore", "Apdus", "ErrorDesc", "Aid"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(5);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_descriptor, new String[]{"ResponseData", "ResponseSw", "Index"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(6);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_descriptor, new String[]{"SessionId", "Response"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(7);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_descriptor, new String[]{"SessionId", "Aid", "AuthenticationCode", "CityId", "CardNumber", "Balance", "Extra"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(8);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_descriptor, new String[]{"Bin", "BindId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(9);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_descriptor, new String[]{"SessionId", "CardNumber", "CipherData", "RiskInfo", "SourceChannel"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(10);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_descriptor, new String[]{"Result", "Aid", "VirtualCardReferenceId", "VirtualCardNumber", "ExpireDate", "LastDigits", "CardProductTypeId", "CardReferenceId", "PhoneNumLastDigits"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(11);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_descriptor, new String[]{"SessionId", "VirtualCardReferenceId", "OptMethod"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(12);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_descriptor, new String[]{"SessionId", "VirtualCardReferenceId", "VerificationCode"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(13);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_descriptor, new String[]{"SessionId", "OldVcReferenceId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(14);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_descriptor, new String[]{"Result", "ContactNumber", "FakePan", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(15);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_descriptor, new String[]{"Cplc", "Aid", "VcRefId", "RequestSource"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(16);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_descriptor, new String[]{"Cplc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(17);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_descriptor, new String[]{"Aid", "CardNumber", "VirtualCardReferenceId", "VirtualCardNumber", "LastDigits", "VcStatus", "UserId", "ProductId", "ProductName", "UserTerms", "CardArt", "CardType", "IssuerInfo", "FrontColor", "HasQrToken", "ServiceHotline", "Suggestion", "CardElementsOption"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(18);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_descriptor, new String[]{"Result", "BankCardInfoList", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(19);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_descriptor, new String[]{"Result", "Description", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(20);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_descriptor, new String[]{"SessionId", "AppName", "CpuModel", "TzId", "KeyAlg", "PkX", "PkY", "ClientSign", "DeviceModel", "DeviceId", "Cplc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(21);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_descriptor, new String[]{"CardIssueChannel", "IssuerId", "BankName", "LogoUrl", "LogoWithBankNameUrl", "ContactNumber", "BgImage", "Hotline"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(22);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_descriptor, new String[]{"SessionId", "Pan", "BindId", "RequestSource"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(23);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_descriptor, new String[]{"Result", "CardIssuerInfo", "CardType", "UserTerms", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(24);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_descriptor, new String[]{"SessionId", "CardIssuerInfo", "CardType"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(25);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_descriptor, new String[]{"SessionId", "CardNumber", "CardInfo", "PinInfo", "Cvn2Info", "BankCardType", "RiskInfo", "SourceChannel", "ApplyChannel", "IssuerId", "VirtualCardRefId", "RequestSource"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(26);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_descriptor, new String[]{"Result", "Aid", "VirtualCardReferenceId", "VirtualCardNumber", "LastDigits", "CardProductId", "CardReferenceId", "PhoneNumLastDigits", "FrontColor", "CardArt", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(27);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_descriptor, new String[]{"SessionId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(28);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_descriptor, new String[]{"SessionId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(29);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_descriptor, new String[]{"SessionId", "VirtualCardReferenceId", "OperationResult", "Response"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(30);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_descriptor, new String[]{"SessionId", "ActionResult", "ActionType", "Response"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(31);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_descriptor, new String[]{"DeviceModel", "Lang", "MiuiRomType", "MiuiSystemVersion", "TsmclientVersionCode", "SeId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(32);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_descriptor, new String[]{"DeviceType", "DeviceLanguage", "DeviceName", "ApplyChannel", "DeviceLocation", "ExtensiveDeviceLocation", "CaptureMethod", "AccountEmailLife", "CardHolderName", "BillingAddress", "BillingZip", "RiskScore", "RiskStandardVersion", "DeviceScore", "AccountScore", "PhoneNumberScore", "RiskReasonCode", "DeviceNumber", "FullDeviceNumber", "SourceIP", "DeviceSIMNumber", "AccountIDHash"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(33);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_descriptor, new String[]{"DeviceInfo", "SeviceType", "RiskInfo", "Cplc", "Extra"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(34);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_descriptor, new String[]{"AccountId", "Md5Imei", "Location", "SimNumber"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(35);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_descriptor, new String[]{"SessionId", "Uid", "Atqa", "Sak", "Content", "Size", "Md5Imei", "CardType"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(36);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_descriptor, new String[]{"Cplc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(37);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_descriptor, new String[]{"Result", "CardInfoList", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(38);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_descriptor, new String[]{"Aid", "Name", "VcStatus", "UserTerms", "CardArt", "FingerFlag", "CardType"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(39);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_descriptor, new String[]{"Cplc", "CardInfo"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(40);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_descriptor, new String[]{"Acquirer", "OrderNumber", "MerchantName", "MerchantId", "TotalAmount", "DiscountAmount", "PayAmount", "EncryptPayAmount", "Pan", "CurrencyCode", "Sign", "SignKeyIndex", "VerifyMethod", "PbocAid", "CardReferenceId", "DeviceId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(41);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_descriptor, new String[]{"Result", "Apdus", "Sign", "Timestamp", "KeyIndex", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(42);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_descriptor, new String[]{"Result", "QrToken", "VrfMode", "Sign", "KeyIndex"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(43);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_descriptor, new String[]{"Result", "Acquirer", "OrderNumber", "MerchantId", "Pan"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(44);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_descriptor, new String[]{"Uid", "Atqa", "Sak", "Content", "Size", "SectorType"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(45);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_descriptor, new String[]{"SessionId", "IssuerId", "ProductId", "MifareCardParam", "ApplyChannel", "CardType", "IssuerToken", "CommunityCode", "BusinessId", "Ticket", "Overwrite"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(46);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_descriptor, new String[]{"Aid", "Name", "VcStatus", "UserTerms", "CardArt", "FingerFlag", "CardType", "Cid", "ProductId", "ApplyChannel", "CommunityCode", "Status", "BusinessId", "SeId", "ProductName"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(47);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_descriptor, new String[]{"Result", "CardInfoList", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(48);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_descriptor, new String[]{"Cplc", "CardInfo"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(49);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_descriptor, new String[]{"Cplc", "Aid", "CardType", "ProductId", "DeviceInfo"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(50);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_descriptor, new String[]{"Result", "ErrorDesc", "NeedUpgrade", "FrontConfig"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(51);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_descriptor, new String[]{"SessionId", "SpToken"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(52);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_descriptor, new String[]{"Name", "VcStatus", "CardArt", "Aid"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(53);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_descriptor, new String[]{"Result", "EidInfo", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(54);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_descriptor, new String[]{"DeviceId", "CipheredPan"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(55);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_descriptor, new String[]{"Result", "CardIssuerInfo", "CardType", "ErrorDesc", "UserTerms"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(56);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_descriptor, new String[]{"DeviceId", "CardInfo", "Cvn2"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(57);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrRequest_descriptor, new String[]{"DeviceId", "CardInfo", "Cvn2", "RiskInfo", "IssuerId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(58);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QrCardInfo_descriptor, new String[]{"CardReferenceId", "LastDigits", "UserId", "IssuerInfo", "CardType"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(59);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AddCardForQrResponse_descriptor, new String[]{"Result", "CardInfo", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(60);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrRequest_descriptor, new String[]{"DeviceId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(61);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardListForQrResponse_descriptor, new String[]{"Result", "CardInfoList", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(62);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteQrBankCardRequest_descriptor, new String[]{"DeviceId", "CardReferenceId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(63);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityResponse_descriptor, new String[]{"Result", "Name", "IdCardNo", "ErrorDesc", "CardType"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(64);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_IdentityBindRequest_descriptor, new String[]{"Name", "IdCardNo"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(65);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeRequest_descriptor, new String[]{"CardReferenceId", "Latitude", "Longitude", "DeviceId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(66);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrCodeResponse_descriptor, new String[]{"Result", "QrNo", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(67);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionResponse_descriptor, new String[]{"Result", "SessionId", "ErrorDesc", "ApduCommand"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(68);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmStartActionInfo_descriptor, new String[]{"SeInfo", "ActionName", "Params"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(69);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpTransStatusResponse_descriptor, new String[]{"Result", "TransStatus", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(70);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpQrTokenIdResponse_descriptor, new String[]{"Result", "QrTokenId", "ErrorDesc"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(71);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskRequest_descriptor, new String[]{"SessionId", "Event"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(72);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullExecuteTaskResponse_descriptor, new String[]{"Result", "ErrorDesc", "TsmLibData", "VirtualCards"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(73);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmLibData_descriptor, new String[]{"Event", "Sign", "Ssid"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(74);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeleteBankCardRequest_descriptor, new String[]{"SessionId", "VirtualCardReferenceId"});
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_descriptor = TsmRpcModels.getDescriptor().getMessageTypes().get(75);
                TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_fieldAccessorTable = new GeneratedMessage.FieldAccessorTable(TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_AppletStatusResponse_descriptor, new String[]{"Result", "ErrorDesc", "Status"});
                return null;
            }
        });
    }

    public static Descriptors.FileDescriptor getDescriptor() {
        return descriptor;
    }

    public static void registerAllExtensions(ExtensionRegistry extensionRegistry) {
    }

    private TsmRpcModels() {
    }

    public enum SeOperationType implements ProtocolMessageEnum {
        LOCK(0, 1),
        UNLOCK(1, 2),
        INSTALL(2, 3),
        DELETE(3, 4),
        SYNC(4, 5),
        LOAD(5, 6),
        CLEAN(6, 7),
        TOPUP(7, 8),
        UNRESTRICT(8, 9),
        UPGRADE(9, 10),
        SHIFT_OUT(10, 11),
        SHIFT_IN(11, 12),
        CHECK_SHIFT_OUT(12, 13),
        UPGRADE_SE(13, 14),
        OUT_INSTALL(14, 21),
        OUT_TOPUP(15, 22),
        OUT_RETURN(16, 23),
        RETURN(17, 24),
        READ_CARD(18, 25),
        DOOR_CARD_ENROLL(19, 30);
        
        private static final SeOperationType[] VALUES = values();
        private static Internal.EnumLiteMap<SeOperationType> internalValueMap = new Internal.EnumLiteMap<SeOperationType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.SeOperationType.AnonymousClass1 */

            public final SeOperationType findValueByNumber(int i) {
                return SeOperationType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static SeOperationType valueOf(int i) {
            if (i == 30) {
                return DOOR_CARD_ENROLL;
            }
            switch (i) {
                case 1:
                    return LOCK;
                case 2:
                    return UNLOCK;
                case 3:
                    return INSTALL;
                case 4:
                    return DELETE;
                case 5:
                    return SYNC;
                case 6:
                    return LOAD;
                case 7:
                    return CLEAN;
                case C.MSG_SET_VIDEO_DECODER_OUTPUT_BUFFER_RENDERER:
                    return TOPUP;
                case 9:
                    return UNRESTRICT;
                case 10:
                    return UPGRADE;
                case 11:
                    return SHIFT_OUT;
                case DfuSettingsConstants.SETTINGS_NUMBER_OF_PACKETS_DEFAULT /*12*/:
                    return SHIFT_IN;
                case 13:
                    return CHECK_SHIFT_OUT;
                case 14:
                    return UPGRADE_SE;
                default:
                    switch (i) {
                        case 21:
                            return OUT_INSTALL;
                        case 22:
                            return OUT_TOPUP;
                        case 23:
                            return OUT_RETURN;
                        case 24:
                            return RETURN;
                        case 25:
                            return READ_CARD;
                        default:
                            return null;
                    }
            }
        }

        public static Internal.EnumLiteMap<SeOperationType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(0);
        }

        public static SeOperationType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private SeOperationType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum ActionSource implements ProtocolMessageEnum {
        APP_CLIENT(0, 0),
        WEB_CLIENT(1, 1),
        MI_CLOUD(2, 3),
        SP(3, 4),
        UNKNOWN(4, 5);
        
        private static final ActionSource[] VALUES = values();
        private static Internal.EnumLiteMap<ActionSource> internalValueMap = new Internal.EnumLiteMap<ActionSource>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.ActionSource.AnonymousClass1 */

            public final ActionSource findValueByNumber(int i) {
                return ActionSource.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static ActionSource valueOf(int i) {
            if (i == 0) {
                return APP_CLIENT;
            }
            if (i == 1) {
                return WEB_CLIENT;
            }
            if (i == 3) {
                return MI_CLOUD;
            }
            if (i == 4) {
                return SP;
            }
            if (i != 5) {
                return null;
            }
            return UNKNOWN;
        }

        public static Internal.EnumLiteMap<ActionSource> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(1);
        }

        public static ActionSource valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private ActionSource(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum OtpMethod implements ProtocolMessageEnum {
        SMS(0, 1),
        TEL(1, 2),
        EMAIL(2, 3);
        
        private static final OtpMethod[] VALUES = values();
        private static Internal.EnumLiteMap<OtpMethod> internalValueMap = new Internal.EnumLiteMap<OtpMethod>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.OtpMethod.AnonymousClass1 */

            public final OtpMethod findValueByNumber(int i) {
                return OtpMethod.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static OtpMethod valueOf(int i) {
            if (i == 1) {
                return SMS;
            }
            if (i == 2) {
                return TEL;
            }
            if (i != 3) {
                return null;
            }
            return EMAIL;
        }

        public static Internal.EnumLiteMap<OtpMethod> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(2);
        }

        public static OtpMethod valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private OtpMethod(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum BankCardType implements ProtocolMessageEnum {
        DEBIT(0, 1),
        CREDIT(1, 2);
        
        private static final BankCardType[] VALUES = values();
        private static Internal.EnumLiteMap<BankCardType> internalValueMap = new Internal.EnumLiteMap<BankCardType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.BankCardType.AnonymousClass1 */

            public final BankCardType findValueByNumber(int i) {
                return BankCardType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static BankCardType valueOf(int i) {
            if (i == 1) {
                return DEBIT;
            }
            if (i != 2) {
                return null;
            }
            return CREDIT;
        }

        public static Internal.EnumLiteMap<BankCardType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(3);
        }

        public static BankCardType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private BankCardType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum CardIssueChannel implements ProtocolMessageEnum {
        UP(0, 1),
        CMB(1, 2);
        
        private static final CardIssueChannel[] VALUES = values();
        private static Internal.EnumLiteMap<CardIssueChannel> internalValueMap = new Internal.EnumLiteMap<CardIssueChannel>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CardIssueChannel.AnonymousClass1 */

            public final CardIssueChannel findValueByNumber(int i) {
                return CardIssueChannel.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static CardIssueChannel valueOf(int i) {
            if (i == 1) {
                return UP;
            }
            if (i != 2) {
                return null;
            }
            return CMB;
        }

        public static Internal.EnumLiteMap<CardIssueChannel> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(4);
        }

        public static CardIssueChannel valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private CardIssueChannel(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum DeviceType implements ProtocolMessageEnum {
        PHONE(0, 1),
        PAD(1, 2),
        WATCH(2, 3),
        BAND(3, 4);
        
        private static final DeviceType[] VALUES = values();
        private static Internal.EnumLiteMap<DeviceType> internalValueMap = new Internal.EnumLiteMap<DeviceType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.DeviceType.AnonymousClass1 */

            public final DeviceType findValueByNumber(int i) {
                return DeviceType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static DeviceType valueOf(int i) {
            if (i == 1) {
                return PHONE;
            }
            if (i == 2) {
                return PAD;
            }
            if (i == 3) {
                return WATCH;
            }
            if (i != 4) {
                return null;
            }
            return BAND;
        }

        public static Internal.EnumLiteMap<DeviceType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(5);
        }

        public static DeviceType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private DeviceType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum ApplyChannel implements ProtocolMessageEnum {
        XIAOMI(0, 1),
        BANK(1, 2);
        
        private static final ApplyChannel[] VALUES = values();
        private static Internal.EnumLiteMap<ApplyChannel> internalValueMap = new Internal.EnumLiteMap<ApplyChannel>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.ApplyChannel.AnonymousClass1 */

            public final ApplyChannel findValueByNumber(int i) {
                return ApplyChannel.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static ApplyChannel valueOf(int i) {
            if (i == 1) {
                return XIAOMI;
            }
            if (i != 2) {
                return null;
            }
            return BANK;
        }

        public static Internal.EnumLiteMap<ApplyChannel> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(6);
        }

        public static ApplyChannel valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private ApplyChannel(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum CaptureMethod implements ProtocolMessageEnum {
        MANUAL(0, 1),
        NFC(1, 2),
        CAMERA(2, 3),
        UNKNOWN_CAPTURE_METHOD(3, 4);
        
        private static final CaptureMethod[] VALUES = values();
        private static Internal.EnumLiteMap<CaptureMethod> internalValueMap = new Internal.EnumLiteMap<CaptureMethod>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CaptureMethod.AnonymousClass1 */

            public final CaptureMethod findValueByNumber(int i) {
                return CaptureMethod.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static CaptureMethod valueOf(int i) {
            if (i == 1) {
                return MANUAL;
            }
            if (i == 2) {
                return NFC;
            }
            if (i == 3) {
                return CAMERA;
            }
            if (i != 4) {
                return null;
            }
            return UNKNOWN_CAPTURE_METHOD;
        }

        public static Internal.EnumLiteMap<CaptureMethod> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(7);
        }

        public static CaptureMethod valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private CaptureMethod(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum MifareCardType implements ProtocolMessageEnum {
        NORMAL(0, 0),
        BLANK(1, 1);
        
        private static final MifareCardType[] VALUES = values();
        private static Internal.EnumLiteMap<MifareCardType> internalValueMap = new Internal.EnumLiteMap<MifareCardType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.MifareCardType.AnonymousClass1 */

            public final MifareCardType findValueByNumber(int i) {
                return MifareCardType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static MifareCardType valueOf(int i) {
            if (i == 0) {
                return NORMAL;
            }
            if (i != 1) {
                return null;
            }
            return BLANK;
        }

        public static Internal.EnumLiteMap<MifareCardType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(8);
        }

        public static MifareCardType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private MifareCardType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum ServiceType implements ProtocolMessageEnum {
        BANK_CARD(0, 0),
        MIFARE_CARD(1, 1),
        BUS_CARD(2, 2),
        INAPP(3, 3),
        MIFARE_BLANK_CARD(4, 4),
        CPU_CARD(5, 5),
        DOOR_CARD(6, 6);
        
        private static final ServiceType[] VALUES = values();
        private static Internal.EnumLiteMap<ServiceType> internalValueMap = new Internal.EnumLiteMap<ServiceType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.ServiceType.AnonymousClass1 */

            public final ServiceType findValueByNumber(int i) {
                return ServiceType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static ServiceType valueOf(int i) {
            switch (i) {
                case 0:
                    return BANK_CARD;
                case 1:
                    return MIFARE_CARD;
                case 2:
                    return BUS_CARD;
                case 3:
                    return INAPP;
                case 4:
                    return MIFARE_BLANK_CARD;
                case 5:
                    return CPU_CARD;
                case 6:
                    return DOOR_CARD;
                default:
                    return null;
            }
        }

        public static Internal.EnumLiteMap<ServiceType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(9);
        }

        public static ServiceType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private ServiceType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum DoorCardType implements ProtocolMessageEnum {
        M1_NORMAL(0, 0),
        DOOR(1, 1),
        M1_ONLINE_V3(2, 6);
        
        private static final DoorCardType[] VALUES = values();
        private static Internal.EnumLiteMap<DoorCardType> internalValueMap = new Internal.EnumLiteMap<DoorCardType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.DoorCardType.AnonymousClass1 */

            public final DoorCardType findValueByNumber(int i) {
                return DoorCardType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static DoorCardType valueOf(int i) {
            if (i == 0) {
                return M1_NORMAL;
            }
            if (i == 1) {
                return DOOR;
            }
            if (i != 6) {
                return null;
            }
            return M1_ONLINE_V3;
        }

        public static Internal.EnumLiteMap<DoorCardType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(10);
        }

        public static DoorCardType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private DoorCardType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum IdType implements ProtocolMessageEnum {
        IDENTITY_CARD(0, 1),
        OFFICIAL_CARD(1, 2),
        PASSPORT(2, 3),
        HONGKONG_AND_MACAO_CARD(3, 4),
        TAIWAN_COMPATRIOTS(4, 5),
        POLICE_CARD(5, 6),
        SOLDIER_CARD(6, 7),
        OTHER(7, 99);
        
        private static final IdType[] VALUES = values();
        private static Internal.EnumLiteMap<IdType> internalValueMap = new Internal.EnumLiteMap<IdType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.IdType.AnonymousClass1 */

            public final IdType findValueByNumber(int i) {
                return IdType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static IdType valueOf(int i) {
            if (i == 99) {
                return OTHER;
            }
            switch (i) {
                case 1:
                    return IDENTITY_CARD;
                case 2:
                    return OFFICIAL_CARD;
                case 3:
                    return PASSPORT;
                case 4:
                    return HONGKONG_AND_MACAO_CARD;
                case 5:
                    return TAIWAN_COMPATRIOTS;
                case 6:
                    return POLICE_CARD;
                case 7:
                    return SOLDIER_CARD;
                default:
                    return null;
            }
        }

        public static Internal.EnumLiteMap<IdType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(11);
        }

        public static IdType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private IdType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public enum IdentityCardType implements ProtocolMessageEnum {
        ID_CARD(0, 1),
        FOREIGN_PASSPORT(1, 2),
        HK_MC_ID_CARD(2, 3),
        TW_RETURN(3, 4);
        
        private static final IdentityCardType[] VALUES = values();
        private static Internal.EnumLiteMap<IdentityCardType> internalValueMap = new Internal.EnumLiteMap<IdentityCardType>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.IdentityCardType.AnonymousClass1 */

            public final IdentityCardType findValueByNumber(int i) {
                return IdentityCardType.valueOf(i);
            }
        };
        private final int index;
        private final int value;

        public final int getNumber() {
            return this.value;
        }

        public static IdentityCardType valueOf(int i) {
            if (i == 1) {
                return ID_CARD;
            }
            if (i == 2) {
                return FOREIGN_PASSPORT;
            }
            if (i == 3) {
                return HK_MC_ID_CARD;
            }
            if (i != 4) {
                return null;
            }
            return TW_RETURN;
        }

        public static Internal.EnumLiteMap<IdentityCardType> internalGetValueMap() {
            return internalValueMap;
        }

        public final Descriptors.EnumValueDescriptor getValueDescriptor() {
            return getDescriptor().getValues().get(this.index);
        }

        public final Descriptors.EnumDescriptor getDescriptorForType() {
            return getDescriptor();
        }

        public static final Descriptors.EnumDescriptor getDescriptor() {
            return TsmRpcModels.getDescriptor().getEnumTypes().get(12);
        }

        public static IdentityCardType valueOf(Descriptors.EnumValueDescriptor enumValueDescriptor) {
            if (enumValueDescriptor.getType() == getDescriptor()) {
                return VALUES[enumValueDescriptor.getIndex()];
            }
            throw new IllegalArgumentException("EnumValueDescriptor is not for this type.");
        }

        private IdentityCardType(int i, int i2) {
            this.index = i;
            this.value = i2;
        }
    }

    public static final class SeInfo extends GeneratedMessage implements SeInfoOrBuilder {
        public static Parser<SeInfo> PARSER = new AbstractParser<SeInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.SeInfo.AnonymousClass1 */

            public final SeInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new SeInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final SeInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public ActionSource actionSource_;
        public int bitField0_;
        public ByteString cplc_;
        public Object deviceId_;
        public DeviceInfo deviceInfo_;
        public Object deviceType_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private SeInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SeInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SeInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final SeInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SeInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.deviceType_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (readTag == 32) {
                            int readEnum = codedInputStream.readEnum();
                            ActionSource valueOf = ActionSource.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(4, readEnum);
                            } else {
                                this.bitField0_ |= 8;
                                this.actionSource_ = valueOf;
                            }
                        } else if (readTag == 42) {
                            DeviceInfo.Builder builder = (this.bitField0_ & 16) == 16 ? this.deviceInfo_.toBuilder() : null;
                            this.deviceInfo_ = (DeviceInfo) codedInputStream.readMessage(DeviceInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.deviceInfo_);
                                this.deviceInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 16;
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SeInfo.class, Builder.class);
        }

        static {
            SeInfo seInfo = new SeInfo(true);
            defaultInstance = seInfo;
            seInfo.initFields();
        }

        public final Parser<SeInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final ByteString getCplc() {
            return this.cplc_;
        }

        public final boolean hasDeviceType() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getDeviceType() {
            Object obj = this.deviceType_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceType_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceTypeBytes() {
            Object obj = this.deviceType_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceType_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasActionSource() {
            return (this.bitField0_ & 8) == 8;
        }

        public final ActionSource getActionSource() {
            return this.actionSource_;
        }

        public final boolean hasDeviceInfo() {
            return (this.bitField0_ & 16) == 16;
        }

        public final DeviceInfo getDeviceInfo() {
            return this.deviceInfo_;
        }

        public final DeviceInfoOrBuilder getDeviceInfoOrBuilder() {
            return this.deviceInfo_;
        }

        private void initFields() {
            this.cplc_ = ByteString.EMPTY;
            this.deviceType_ = "";
            this.deviceId_ = "";
            this.actionSource_ = ActionSource.APP_CLIENT;
            this.deviceInfo_ = DeviceInfo.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasCplc()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDeviceType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDeviceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasActionSource()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasDeviceInfo() || getDeviceInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, this.cplc_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getDeviceTypeBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeEnum(4, this.actionSource_.getNumber());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeMessage(5, this.deviceInfo_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, this.cplc_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getDeviceTypeBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeEnumSize(4, this.actionSource_.getNumber());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeMessageSize(5, this.deviceInfo_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SeInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static SeInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static SeInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static SeInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static SeInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static SeInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static SeInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static SeInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static SeInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static SeInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SeInfo seInfo) {
            return newBuilder().mergeFrom(seInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements SeInfoOrBuilder {
            private ActionSource actionSource_;
            private int bitField0_;
            private ByteString cplc_;
            private Object deviceId_;
            private SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> deviceInfoBuilder_;
            private DeviceInfo deviceInfo_;
            private Object deviceType_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(SeInfo.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = ByteString.EMPTY;
                this.deviceType_ = "";
                this.deviceId_ = "";
                this.actionSource_ = ActionSource.APP_CLIENT;
                this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = ByteString.EMPTY;
                this.deviceType_ = "";
                this.deviceId_ = "";
                this.actionSource_ = ActionSource.APP_CLIENT;
                this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SeInfo.alwaysUseFieldBuilders) {
                    getDeviceInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = ByteString.EMPTY;
                this.bitField0_ &= -2;
                this.deviceType_ = "";
                this.bitField0_ &= -3;
                this.deviceId_ = "";
                this.bitField0_ &= -5;
                this.actionSource_ = ActionSource.APP_CLIENT;
                this.bitField0_ &= -9;
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeInfo_descriptor;
            }

            public final SeInfo getDefaultInstanceForType() {
                return SeInfo.getDefaultInstance();
            }

            public final SeInfo build() {
                SeInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final SeInfo buildPartial() {
                SeInfo seInfo = new SeInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                seInfo.cplc_ = this.cplc_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                seInfo.deviceType_ = this.deviceType_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                seInfo.deviceId_ = this.deviceId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                seInfo.actionSource_ = this.actionSource_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    seInfo.deviceInfo_ = this.deviceInfo_;
                } else {
                    seInfo.deviceInfo_ = singleFieldBuilder.build();
                }
                seInfo.bitField0_ = i2;
                onBuilt();
                return seInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof SeInfo) {
                    return mergeFrom((SeInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(SeInfo seInfo) {
                if (seInfo == SeInfo.getDefaultInstance()) {
                    return this;
                }
                if (seInfo.hasCplc()) {
                    setCplc(seInfo.getCplc());
                }
                if (seInfo.hasDeviceType()) {
                    this.bitField0_ |= 2;
                    this.deviceType_ = seInfo.deviceType_;
                    onChanged();
                }
                if (seInfo.hasDeviceId()) {
                    this.bitField0_ |= 4;
                    this.deviceId_ = seInfo.deviceId_;
                    onChanged();
                }
                if (seInfo.hasActionSource()) {
                    setActionSource(seInfo.getActionSource());
                }
                if (seInfo.hasDeviceInfo()) {
                    mergeDeviceInfo(seInfo.getDeviceInfo());
                }
                mergeUnknownFields(seInfo.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasCplc() || !hasDeviceType() || !hasDeviceId() || !hasActionSource()) {
                    return false;
                }
                if (!hasDeviceInfo() || getDeviceInfo().isInitialized()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                SeInfo seInfo;
                SeInfo seInfo2 = null;
                try {
                    SeInfo parsePartialFrom = SeInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    seInfo = (SeInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    seInfo2 = seInfo;
                }
                if (seInfo2 != null) {
                    mergeFrom(seInfo2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final ByteString getCplc() {
                return this.cplc_;
            }

            public final Builder setCplc(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = SeInfo.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final boolean hasDeviceType() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getDeviceType() {
                Object obj = this.deviceType_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceType_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceTypeBytes() {
                Object obj = this.deviceType_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceType_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceType(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.deviceType_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceType() {
                this.bitField0_ &= -3;
                this.deviceType_ = SeInfo.getDefaultInstance().getDeviceType();
                onChanged();
                return this;
            }

            public final Builder setDeviceTypeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.deviceType_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -5;
                this.deviceId_ = SeInfo.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasActionSource() {
                return (this.bitField0_ & 8) == 8;
            }

            public final ActionSource getActionSource() {
                return this.actionSource_;
            }

            public final Builder setActionSource(ActionSource actionSource) {
                if (actionSource != null) {
                    this.bitField0_ |= 8;
                    this.actionSource_ = actionSource;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearActionSource() {
                this.bitField0_ &= -9;
                this.actionSource_ = ActionSource.APP_CLIENT;
                onChanged();
                return this;
            }

            public final boolean hasDeviceInfo() {
                return (this.bitField0_ & 16) == 16;
            }

            public final DeviceInfo getDeviceInfo() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.deviceInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setDeviceInfo(DeviceInfo deviceInfo) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(deviceInfo);
                } else if (deviceInfo != null) {
                    this.deviceInfo_ = deviceInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                return this;
            }

            public final Builder setDeviceInfo(DeviceInfo.Builder builder) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 16;
                return this;
            }

            public final Builder mergeDeviceInfo(DeviceInfo deviceInfo) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 16) != 16 || this.deviceInfo_ == DeviceInfo.getDefaultInstance()) {
                        this.deviceInfo_ = deviceInfo;
                    } else {
                        this.deviceInfo_ = DeviceInfo.newBuilder(this.deviceInfo_).mergeFrom(deviceInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(deviceInfo);
                }
                this.bitField0_ |= 16;
                return this;
            }

            public final Builder clearDeviceInfo() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -17;
                return this;
            }

            public final DeviceInfo.Builder getDeviceInfoBuilder() {
                this.bitField0_ |= 16;
                onChanged();
                return getDeviceInfoFieldBuilder().getBuilder();
            }

            public final DeviceInfoOrBuilder getDeviceInfoOrBuilder() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.deviceInfo_;
            }

            private SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> getDeviceInfoFieldBuilder() {
                if (this.deviceInfoBuilder_ == null) {
                    this.deviceInfoBuilder_ = new SingleFieldBuilder<>(this.deviceInfo_, getParentForChildren(), isClean());
                    this.deviceInfo_ = null;
                }
                return this.deviceInfoBuilder_;
            }
        }
    }

    public static final class SeOperation extends GeneratedMessage implements SeOperationOrBuilder {
        public static Parser<SeOperation> PARSER = new AbstractParser<SeOperation>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.SeOperation.AnonymousClass1 */

            public final SeOperation parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new SeOperation(codedInputStream, extensionRegistryLite);
            }
        };
        private static final SeOperation defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public ByteString authenticationCode_;
        public int bitField0_;
        public Object cityId_;
        public Object extra_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        public Object sourceChannel_;
        public SeOperationType type_;
        private final UnknownFieldSet unknownFields;

        private SeOperation(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SeOperation(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SeOperation getDefaultInstance() {
            return defaultInstance;
        }

        public final SeOperation getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SeOperation(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 16) {
                            int readEnum = codedInputStream.readEnum();
                            SeOperationType valueOf = SeOperationType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(2, readEnum);
                            } else {
                                this.bitField0_ |= 2;
                                this.type_ = valueOf;
                            }
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.authenticationCode_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.cityId_ = codedInputStream.readBytes();
                        } else if (readTag == 50) {
                            this.bitField0_ |= 32;
                            this.sourceChannel_ = codedInputStream.readBytes();
                        } else if (readTag == 58) {
                            this.bitField0_ |= 64;
                            this.extra_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_fieldAccessorTable.ensureFieldAccessorsInitialized(SeOperation.class, Builder.class);
        }

        static {
            SeOperation seOperation = new SeOperation(true);
            defaultInstance = seOperation;
            seOperation.initFields();
        }

        public final Parser<SeOperation> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasType() {
            return (this.bitField0_ & 2) == 2;
        }

        public final SeOperationType getType() {
            return this.type_;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAuthenticationCode() {
            return (this.bitField0_ & 8) == 8;
        }

        public final ByteString getAuthenticationCode() {
            return this.authenticationCode_;
        }

        public final boolean hasCityId() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getCityId() {
            Object obj = this.cityId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cityId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCityIdBytes() {
            Object obj = this.cityId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cityId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSourceChannel() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getSourceChannel() {
            Object obj = this.sourceChannel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sourceChannel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSourceChannelBytes() {
            Object obj = this.sourceChannel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sourceChannel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasExtra() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getExtra() {
            Object obj = this.extra_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.extra_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getExtraBytes() {
            Object obj = this.extra_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.extra_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.type_ = SeOperationType.LOCK;
            this.aid_ = "";
            this.authenticationCode_ = ByteString.EMPTY;
            this.cityId_ = "";
            this.sourceChannel_ = "";
            this.extra_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeEnum(2, this.type_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getAidBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, this.authenticationCode_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getCityIdBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getSourceChannelBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getExtraBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeEnumSize(2, this.type_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getAidBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, this.authenticationCode_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getCityIdBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getSourceChannelBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getExtraBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SeOperation parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static SeOperation parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static SeOperation parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static SeOperation parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static SeOperation parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static SeOperation parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static SeOperation parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static SeOperation parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static SeOperation parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static SeOperation parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SeOperation seOperation) {
            return newBuilder().mergeFrom(seOperation);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements SeOperationOrBuilder {
            private Object aid_;
            private ByteString authenticationCode_;
            private int bitField0_;
            private Object cityId_;
            private Object extra_;
            private Object sessionId_;
            private Object sourceChannel_;
            private SeOperationType type_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_fieldAccessorTable.ensureFieldAccessorsInitialized(SeOperation.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.type_ = SeOperationType.LOCK;
                this.aid_ = "";
                this.authenticationCode_ = ByteString.EMPTY;
                this.cityId_ = "";
                this.sourceChannel_ = "";
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.type_ = SeOperationType.LOCK;
                this.aid_ = "";
                this.authenticationCode_ = ByteString.EMPTY;
                this.cityId_ = "";
                this.sourceChannel_ = "";
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = SeOperation.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.type_ = SeOperationType.LOCK;
                this.bitField0_ &= -3;
                this.aid_ = "";
                this.bitField0_ &= -5;
                this.authenticationCode_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                this.cityId_ = "";
                this.bitField0_ &= -17;
                this.sourceChannel_ = "";
                this.bitField0_ &= -33;
                this.extra_ = "";
                this.bitField0_ &= -65;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeOperation_descriptor;
            }

            public final SeOperation getDefaultInstanceForType() {
                return SeOperation.getDefaultInstance();
            }

            public final SeOperation build() {
                SeOperation buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final SeOperation buildPartial() {
                SeOperation seOperation = new SeOperation(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                seOperation.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                seOperation.type_ = this.type_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                seOperation.aid_ = this.aid_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                seOperation.authenticationCode_ = this.authenticationCode_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                seOperation.cityId_ = this.cityId_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                seOperation.sourceChannel_ = this.sourceChannel_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                seOperation.extra_ = this.extra_;
                seOperation.bitField0_ = i2;
                onBuilt();
                return seOperation;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof SeOperation) {
                    return mergeFrom((SeOperation) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(SeOperation seOperation) {
                if (seOperation == SeOperation.getDefaultInstance()) {
                    return this;
                }
                if (seOperation.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = seOperation.sessionId_;
                    onChanged();
                }
                if (seOperation.hasType()) {
                    setType(seOperation.getType());
                }
                if (seOperation.hasAid()) {
                    this.bitField0_ |= 4;
                    this.aid_ = seOperation.aid_;
                    onChanged();
                }
                if (seOperation.hasAuthenticationCode()) {
                    setAuthenticationCode(seOperation.getAuthenticationCode());
                }
                if (seOperation.hasCityId()) {
                    this.bitField0_ |= 16;
                    this.cityId_ = seOperation.cityId_;
                    onChanged();
                }
                if (seOperation.hasSourceChannel()) {
                    this.bitField0_ |= 32;
                    this.sourceChannel_ = seOperation.sourceChannel_;
                    onChanged();
                }
                if (seOperation.hasExtra()) {
                    this.bitField0_ |= 64;
                    this.extra_ = seOperation.extra_;
                    onChanged();
                }
                mergeUnknownFields(seOperation.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasType()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                SeOperation seOperation;
                SeOperation seOperation2 = null;
                try {
                    SeOperation parsePartialFrom = SeOperation.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    seOperation = (SeOperation) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    seOperation2 = seOperation;
                }
                if (seOperation2 != null) {
                    mergeFrom(seOperation2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = SeOperation.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasType() {
                return (this.bitField0_ & 2) == 2;
            }

            public final SeOperationType getType() {
                return this.type_;
            }

            public final Builder setType(SeOperationType seOperationType) {
                if (seOperationType != null) {
                    this.bitField0_ |= 2;
                    this.type_ = seOperationType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearType() {
                this.bitField0_ &= -3;
                this.type_ = SeOperationType.LOCK;
                onChanged();
                return this;
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -5;
                this.aid_ = SeOperation.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAuthenticationCode() {
                return (this.bitField0_ & 8) == 8;
            }

            public final ByteString getAuthenticationCode() {
                return this.authenticationCode_;
            }

            public final Builder setAuthenticationCode(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.authenticationCode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAuthenticationCode() {
                this.bitField0_ &= -9;
                this.authenticationCode_ = SeOperation.getDefaultInstance().getAuthenticationCode();
                onChanged();
                return this;
            }

            public final boolean hasCityId() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getCityId() {
                Object obj = this.cityId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cityId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCityIdBytes() {
                Object obj = this.cityId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cityId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCityId(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.cityId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCityId() {
                this.bitField0_ &= -17;
                this.cityId_ = SeOperation.getDefaultInstance().getCityId();
                onChanged();
                return this;
            }

            public final Builder setCityIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.cityId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSourceChannel() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getSourceChannel() {
                Object obj = this.sourceChannel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sourceChannel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSourceChannelBytes() {
                Object obj = this.sourceChannel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sourceChannel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSourceChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.sourceChannel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSourceChannel() {
                this.bitField0_ &= -33;
                this.sourceChannel_ = SeOperation.getDefaultInstance().getSourceChannel();
                onChanged();
                return this;
            }

            public final Builder setSourceChannelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.sourceChannel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasExtra() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getExtra() {
                Object obj = this.extra_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.extra_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getExtraBytes() {
                Object obj = this.extra_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.extra_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setExtra(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.extra_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearExtra() {
                this.bitField0_ &= -65;
                this.extra_ = SeOperation.getDefaultInstance().getExtra();
                onChanged();
                return this;
            }

            public final Builder setExtraBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.extra_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class TsmSessionInfo extends GeneratedMessage implements TsmSessionInfoOrBuilder {
        public static Parser<TsmSessionInfo> PARSER = new AbstractParser<TsmSessionInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TsmSessionInfo.AnonymousClass1 */

            public final TsmSessionInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TsmSessionInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TsmSessionInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private TsmSessionInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TsmSessionInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TsmSessionInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final TsmSessionInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TsmSessionInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmSessionInfo.class, Builder.class);
        }

        static {
            TsmSessionInfo tsmSessionInfo = new TsmSessionInfo(true);
            defaultInstance = tsmSessionInfo;
            tsmSessionInfo.initFields();
        }

        public final Parser<TsmSessionInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.sessionId_ = "";
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSessionIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static TsmSessionInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TsmSessionInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TsmSessionInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TsmSessionInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TsmSessionInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TsmSessionInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TsmSessionInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TsmSessionInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TsmSessionInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TsmSessionInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(TsmSessionInfo tsmSessionInfo) {
            return newBuilder().mergeFrom(tsmSessionInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TsmSessionInfoOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private int result_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmSessionInfo.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = TsmSessionInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.sessionId_ = "";
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmSessionInfo_descriptor;
            }

            public final TsmSessionInfo getDefaultInstanceForType() {
                return TsmSessionInfo.getDefaultInstance();
            }

            public final TsmSessionInfo build() {
                TsmSessionInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TsmSessionInfo buildPartial() {
                TsmSessionInfo tsmSessionInfo = new TsmSessionInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                tsmSessionInfo.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                tsmSessionInfo.sessionId_ = this.sessionId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                tsmSessionInfo.errorDesc_ = this.errorDesc_;
                tsmSessionInfo.bitField0_ = i2;
                onBuilt();
                return tsmSessionInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TsmSessionInfo) {
                    return mergeFrom((TsmSessionInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TsmSessionInfo tsmSessionInfo) {
                if (tsmSessionInfo == TsmSessionInfo.getDefaultInstance()) {
                    return this;
                }
                if (tsmSessionInfo.hasResult()) {
                    setResult(tsmSessionInfo.getResult());
                }
                if (tsmSessionInfo.hasSessionId()) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = tsmSessionInfo.sessionId_;
                    onChanged();
                }
                if (tsmSessionInfo.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = tsmSessionInfo.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(tsmSessionInfo.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TsmSessionInfo tsmSessionInfo;
                TsmSessionInfo tsmSessionInfo2 = null;
                try {
                    TsmSessionInfo parsePartialFrom = TsmSessionInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    tsmSessionInfo = (TsmSessionInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    tsmSessionInfo2 = tsmSessionInfo;
                }
                if (tsmSessionInfo2 != null) {
                    mergeFrom(tsmSessionInfo2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -3;
                this.sessionId_ = TsmSessionInfo.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = TsmSessionInfo.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class TsmCAPDU extends GeneratedMessage implements TsmCAPDUOrBuilder {
        public static Parser<TsmCAPDU> PARSER = new AbstractParser<TsmCAPDU>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TsmCAPDU.AnonymousClass1 */

            public final TsmCAPDU parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TsmCAPDU(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TsmCAPDU defaultInstance;
        private static final long serialVersionUID = 0;
        public ByteString apdu_;
        public int bitField0_;
        public Object expectSwRegex_;
        public int index_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private TsmCAPDU(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TsmCAPDU(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TsmCAPDU getDefaultInstance() {
            return defaultInstance;
        }

        public final TsmCAPDU getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TsmCAPDU(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.apdu_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.expectSwRegex_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.index_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmCAPDU.class, Builder.class);
        }

        static {
            TsmCAPDU tsmCAPDU = new TsmCAPDU(true);
            defaultInstance = tsmCAPDU;
            tsmCAPDU.initFields();
        }

        public final Parser<TsmCAPDU> getParserForType() {
            return PARSER;
        }

        public final boolean hasApdu() {
            return (this.bitField0_ & 1) == 1;
        }

        public final ByteString getApdu() {
            return this.apdu_;
        }

        public final boolean hasExpectSwRegex() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getExpectSwRegex() {
            Object obj = this.expectSwRegex_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.expectSwRegex_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getExpectSwRegexBytes() {
            Object obj = this.expectSwRegex_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.expectSwRegex_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasIndex() {
            return (this.bitField0_ & 4) == 4;
        }

        public final int getIndex() {
            return this.index_;
        }

        private void initFields() {
            this.apdu_ = ByteString.EMPTY;
            this.expectSwRegex_ = "";
            this.index_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasApdu()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasExpectSwRegex()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, this.apdu_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getExpectSwRegexBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.index_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, this.apdu_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getExpectSwRegexBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.index_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static TsmCAPDU parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TsmCAPDU parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TsmCAPDU parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TsmCAPDU parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TsmCAPDU parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TsmCAPDU parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TsmCAPDU parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TsmCAPDU parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TsmCAPDU parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TsmCAPDU parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(TsmCAPDU tsmCAPDU) {
            return newBuilder().mergeFrom(tsmCAPDU);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TsmCAPDUOrBuilder {
            private ByteString apdu_;
            private int bitField0_;
            private Object expectSwRegex_;
            private int index_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmCAPDU.class, Builder.class);
            }

            private Builder() {
                this.apdu_ = ByteString.EMPTY;
                this.expectSwRegex_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.apdu_ = ByteString.EMPTY;
                this.expectSwRegex_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = TsmCAPDU.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.apdu_ = ByteString.EMPTY;
                this.bitField0_ &= -2;
                this.expectSwRegex_ = "";
                this.bitField0_ &= -3;
                this.index_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmCAPDU_descriptor;
            }

            public final TsmCAPDU getDefaultInstanceForType() {
                return TsmCAPDU.getDefaultInstance();
            }

            public final TsmCAPDU build() {
                TsmCAPDU buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TsmCAPDU buildPartial() {
                TsmCAPDU tsmCAPDU = new TsmCAPDU(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                tsmCAPDU.apdu_ = this.apdu_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                tsmCAPDU.expectSwRegex_ = this.expectSwRegex_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                tsmCAPDU.index_ = this.index_;
                tsmCAPDU.bitField0_ = i2;
                onBuilt();
                return tsmCAPDU;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TsmCAPDU) {
                    return mergeFrom((TsmCAPDU) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TsmCAPDU tsmCAPDU) {
                if (tsmCAPDU == TsmCAPDU.getDefaultInstance()) {
                    return this;
                }
                if (tsmCAPDU.hasApdu()) {
                    setApdu(tsmCAPDU.getApdu());
                }
                if (tsmCAPDU.hasExpectSwRegex()) {
                    this.bitField0_ |= 2;
                    this.expectSwRegex_ = tsmCAPDU.expectSwRegex_;
                    onChanged();
                }
                if (tsmCAPDU.hasIndex()) {
                    setIndex(tsmCAPDU.getIndex());
                }
                mergeUnknownFields(tsmCAPDU.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasApdu() && hasExpectSwRegex()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TsmCAPDU tsmCAPDU;
                TsmCAPDU tsmCAPDU2 = null;
                try {
                    TsmCAPDU parsePartialFrom = TsmCAPDU.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    tsmCAPDU = (TsmCAPDU) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    tsmCAPDU2 = tsmCAPDU;
                }
                if (tsmCAPDU2 != null) {
                    mergeFrom(tsmCAPDU2);
                }
                throw th;
            }

            public final boolean hasApdu() {
                return (this.bitField0_ & 1) == 1;
            }

            public final ByteString getApdu() {
                return this.apdu_;
            }

            public final Builder setApdu(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.apdu_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearApdu() {
                this.bitField0_ &= -2;
                this.apdu_ = TsmCAPDU.getDefaultInstance().getApdu();
                onChanged();
                return this;
            }

            public final boolean hasExpectSwRegex() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getExpectSwRegex() {
                Object obj = this.expectSwRegex_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.expectSwRegex_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getExpectSwRegexBytes() {
                Object obj = this.expectSwRegex_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.expectSwRegex_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setExpectSwRegex(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.expectSwRegex_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearExpectSwRegex() {
                this.bitField0_ &= -3;
                this.expectSwRegex_ = TsmCAPDU.getDefaultInstance().getExpectSwRegex();
                onChanged();
                return this;
            }

            public final Builder setExpectSwRegexBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.expectSwRegex_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasIndex() {
                return (this.bitField0_ & 4) == 4;
            }

            public final int getIndex() {
                return this.index_;
            }

            public final Builder setIndex(int i) {
                this.bitField0_ |= 4;
                this.index_ = i;
                onChanged();
                return this;
            }

            public final Builder clearIndex() {
                this.bitField0_ &= -5;
                this.index_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class TsmAPDUCommand extends GeneratedMessage implements TsmAPDUCommandOrBuilder {
        public static Parser<TsmAPDUCommand> PARSER = new AbstractParser<TsmAPDUCommand>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TsmAPDUCommand.AnonymousClass1 */

            public final TsmAPDUCommand parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TsmAPDUCommand(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TsmAPDUCommand defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public List<TsmCAPDU> apdus_;
        public int bitField0_;
        public Object errorDesc_;
        public boolean hasMore_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private TsmAPDUCommand(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TsmAPDUCommand(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TsmAPDUCommand getDefaultInstance() {
            return defaultInstance;
        }

        public final TsmAPDUCommand getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TsmAPDUCommand(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 16) {
                            this.bitField0_ |= 2;
                            this.hasMore_ = codedInputStream.readBool();
                        } else if (readTag == 26) {
                            if (!(z2 & true)) {
                                this.apdus_ = new ArrayList();
                                z2 |= true;
                            }
                            this.apdus_.add(codedInputStream.readMessage(TsmCAPDU.PARSER, extensionRegistryLite));
                        } else if (readTag == 34) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 8;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.apdus_ = Collections.unmodifiableList(this.apdus_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.apdus_ = Collections.unmodifiableList(this.apdus_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmAPDUCommand.class, Builder.class);
        }

        static {
            TsmAPDUCommand tsmAPDUCommand = new TsmAPDUCommand(true);
            defaultInstance = tsmAPDUCommand;
            tsmAPDUCommand.initFields();
        }

        public final Parser<TsmAPDUCommand> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasHasMore() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean getHasMore() {
            return this.hasMore_;
        }

        public final List<TsmCAPDU> getApdusList() {
            return this.apdus_;
        }

        public final List<? extends TsmCAPDUOrBuilder> getApdusOrBuilderList() {
            return this.apdus_;
        }

        public final int getApdusCount() {
            return this.apdus_.size();
        }

        public final TsmCAPDU getApdus(int i) {
            return this.apdus_.get(i);
        }

        public final TsmCAPDUOrBuilder getApdusOrBuilder(int i) {
            return this.apdus_.get(i);
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.hasMore_ = false;
            this.apdus_ = Collections.emptyList();
            this.errorDesc_ = "";
            this.aid_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasHasMore()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getApdusCount(); i++) {
                    if (!getApdus(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBool(2, this.hasMore_);
            }
            for (int i = 0; i < this.apdus_.size(); i++) {
                codedOutputStream.writeMessage(3, this.apdus_.get(i));
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(4, getErrorDescBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(5, getAidBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBoolSize(2, this.hasMore_);
            }
            for (int i2 = 0; i2 < this.apdus_.size(); i2++) {
                computeInt32Size += CodedOutputStream.computeMessageSize(3, this.apdus_.get(i2));
            }
            if ((this.bitField0_ & 4) == 4) {
                computeInt32Size += CodedOutputStream.computeBytesSize(4, getErrorDescBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                computeInt32Size += CodedOutputStream.computeBytesSize(5, getAidBytes());
            }
            int serializedSize = computeInt32Size + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static TsmAPDUCommand parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TsmAPDUCommand parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TsmAPDUCommand parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TsmAPDUCommand parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TsmAPDUCommand parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TsmAPDUCommand parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TsmAPDUCommand parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TsmAPDUCommand parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TsmAPDUCommand parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TsmAPDUCommand parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(TsmAPDUCommand tsmAPDUCommand) {
            return newBuilder().mergeFrom(tsmAPDUCommand);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TsmAPDUCommandOrBuilder {
            private Object aid_;
            private RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> apdusBuilder_;
            private List<TsmCAPDU> apdus_;
            private int bitField0_;
            private Object errorDesc_;
            private boolean hasMore_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_fieldAccessorTable.ensureFieldAccessorsInitialized(TsmAPDUCommand.class, Builder.class);
            }

            private Builder() {
                this.apdus_ = Collections.emptyList();
                this.errorDesc_ = "";
                this.aid_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.apdus_ = Collections.emptyList();
                this.errorDesc_ = "";
                this.aid_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (TsmAPDUCommand.alwaysUseFieldBuilders) {
                    getApdusFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.hasMore_ = false;
                this.bitField0_ &= -3;
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.apdus_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                } else {
                    repeatedFieldBuilder.clear();
                }
                this.errorDesc_ = "";
                this.bitField0_ &= -9;
                this.aid_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TsmAPDUCommand_descriptor;
            }

            public final TsmAPDUCommand getDefaultInstanceForType() {
                return TsmAPDUCommand.getDefaultInstance();
            }

            public final TsmAPDUCommand build() {
                TsmAPDUCommand buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TsmAPDUCommand buildPartial() {
                TsmAPDUCommand tsmAPDUCommand = new TsmAPDUCommand(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                tsmAPDUCommand.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                tsmAPDUCommand.hasMore_ = this.hasMore_;
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 4) == 4) {
                        this.apdus_ = Collections.unmodifiableList(this.apdus_);
                        this.bitField0_ &= -5;
                    }
                    tsmAPDUCommand.apdus_ = this.apdus_;
                } else {
                    tsmAPDUCommand.apdus_ = repeatedFieldBuilder.build();
                }
                if ((i & 8) == 8) {
                    i2 |= 4;
                }
                tsmAPDUCommand.errorDesc_ = this.errorDesc_;
                if ((i & 16) == 16) {
                    i2 |= 8;
                }
                tsmAPDUCommand.aid_ = this.aid_;
                tsmAPDUCommand.bitField0_ = i2;
                onBuilt();
                return tsmAPDUCommand;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TsmAPDUCommand) {
                    return mergeFrom((TsmAPDUCommand) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TsmAPDUCommand tsmAPDUCommand) {
                if (tsmAPDUCommand == TsmAPDUCommand.getDefaultInstance()) {
                    return this;
                }
                if (tsmAPDUCommand.hasResult()) {
                    setResult(tsmAPDUCommand.getResult());
                }
                if (tsmAPDUCommand.hasHasMore()) {
                    setHasMore(tsmAPDUCommand.getHasMore());
                }
                if (this.apdusBuilder_ == null) {
                    if (!tsmAPDUCommand.apdus_.isEmpty()) {
                        if (this.apdus_.isEmpty()) {
                            this.apdus_ = tsmAPDUCommand.apdus_;
                            this.bitField0_ &= -5;
                        } else {
                            ensureApdusIsMutable();
                            this.apdus_.addAll(tsmAPDUCommand.apdus_);
                        }
                        onChanged();
                    }
                } else if (!tsmAPDUCommand.apdus_.isEmpty()) {
                    if (this.apdusBuilder_.isEmpty()) {
                        this.apdusBuilder_.dispose();
                        RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = null;
                        this.apdusBuilder_ = null;
                        this.apdus_ = tsmAPDUCommand.apdus_;
                        this.bitField0_ &= -5;
                        if (TsmAPDUCommand.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getApdusFieldBuilder();
                        }
                        this.apdusBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.apdusBuilder_.addAllMessages(tsmAPDUCommand.apdus_);
                    }
                }
                if (tsmAPDUCommand.hasErrorDesc()) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = tsmAPDUCommand.errorDesc_;
                    onChanged();
                }
                if (tsmAPDUCommand.hasAid()) {
                    this.bitField0_ |= 16;
                    this.aid_ = tsmAPDUCommand.aid_;
                    onChanged();
                }
                mergeUnknownFields(tsmAPDUCommand.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResult() || !hasHasMore()) {
                    return false;
                }
                for (int i = 0; i < getApdusCount(); i++) {
                    if (!getApdus(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TsmAPDUCommand tsmAPDUCommand;
                TsmAPDUCommand tsmAPDUCommand2 = null;
                try {
                    TsmAPDUCommand parsePartialFrom = TsmAPDUCommand.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    tsmAPDUCommand = (TsmAPDUCommand) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    tsmAPDUCommand2 = tsmAPDUCommand;
                }
                if (tsmAPDUCommand2 != null) {
                    mergeFrom(tsmAPDUCommand2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasHasMore() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean getHasMore() {
                return this.hasMore_;
            }

            public final Builder setHasMore(boolean z) {
                this.bitField0_ |= 2;
                this.hasMore_ = z;
                onChanged();
                return this;
            }

            public final Builder clearHasMore() {
                this.bitField0_ &= -3;
                this.hasMore_ = false;
                onChanged();
                return this;
            }

            private void ensureApdusIsMutable() {
                if ((this.bitField0_ & 4) != 4) {
                    this.apdus_ = new ArrayList(this.apdus_);
                    this.bitField0_ |= 4;
                }
            }

            public final List<TsmCAPDU> getApdusList() {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.apdus_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getApdusCount() {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.apdus_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final TsmCAPDU getApdus(int i) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.apdus_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setApdus(int i, TsmCAPDU tsmCAPDU) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, tsmCAPDU);
                } else if (tsmCAPDU != null) {
                    ensureApdusIsMutable();
                    this.apdus_.set(i, tsmCAPDU);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setApdus(int i, TsmCAPDU.Builder builder) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureApdusIsMutable();
                    this.apdus_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addApdus(TsmCAPDU tsmCAPDU) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(tsmCAPDU);
                } else if (tsmCAPDU != null) {
                    ensureApdusIsMutable();
                    this.apdus_.add(tsmCAPDU);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addApdus(int i, TsmCAPDU tsmCAPDU) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, tsmCAPDU);
                } else if (tsmCAPDU != null) {
                    ensureApdusIsMutable();
                    this.apdus_.add(i, tsmCAPDU);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addApdus(TsmCAPDU.Builder builder) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureApdusIsMutable();
                    this.apdus_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addApdus(int i, TsmCAPDU.Builder builder) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureApdusIsMutable();
                    this.apdus_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$TsmCAPDU>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$TsmCAPDU>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllApdus(Iterable<? extends TsmCAPDU> iterable) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureApdusIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.apdus_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearApdus() {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.apdus_ = Collections.emptyList();
                    this.bitField0_ &= -5;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeApdus(int i) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureApdusIsMutable();
                    this.apdus_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final TsmCAPDU.Builder getApdusBuilder(int i) {
                return getApdusFieldBuilder().getBuilder(i);
            }

            public final TsmCAPDUOrBuilder getApdusOrBuilder(int i) {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.apdus_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends TsmCAPDUOrBuilder> getApdusOrBuilderList() {
                RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> repeatedFieldBuilder = this.apdusBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.apdus_);
            }

            public final TsmCAPDU.Builder addApdusBuilder() {
                return getApdusFieldBuilder().addBuilder(TsmCAPDU.getDefaultInstance());
            }

            public final TsmCAPDU.Builder addApdusBuilder(int i) {
                return getApdusFieldBuilder().addBuilder(i, TsmCAPDU.getDefaultInstance());
            }

            public final List<TsmCAPDU.Builder> getApdusBuilderList() {
                return getApdusFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> getApdusFieldBuilder() {
                if (this.apdusBuilder_ == null) {
                    this.apdusBuilder_ = new RepeatedFieldBuilder<>(this.apdus_, (this.bitField0_ & 4) == 4, getParentForChildren(), isClean());
                    this.apdus_ = null;
                }
                return this.apdusBuilder_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -9;
                this.errorDesc_ = TsmAPDUCommand.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -17;
                this.aid_ = TsmAPDUCommand.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class SeAPDUResponseItem extends GeneratedMessage implements SeAPDUResponseItemOrBuilder {
        public static Parser<SeAPDUResponseItem> PARSER = new AbstractParser<SeAPDUResponseItem>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.SeAPDUResponseItem.AnonymousClass1 */

            public final SeAPDUResponseItem parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new SeAPDUResponseItem(codedInputStream, extensionRegistryLite);
            }
        };
        private static final SeAPDUResponseItem defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public int index_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public ByteString responseData_;
        public ByteString responseSw_;
        private final UnknownFieldSet unknownFields;

        private SeAPDUResponseItem(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SeAPDUResponseItem(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SeAPDUResponseItem getDefaultInstance() {
            return defaultInstance;
        }

        public final SeAPDUResponseItem getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SeAPDUResponseItem(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.responseData_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.responseSw_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.index_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_fieldAccessorTable.ensureFieldAccessorsInitialized(SeAPDUResponseItem.class, Builder.class);
        }

        static {
            SeAPDUResponseItem seAPDUResponseItem = new SeAPDUResponseItem(true);
            defaultInstance = seAPDUResponseItem;
            seAPDUResponseItem.initFields();
        }

        public final Parser<SeAPDUResponseItem> getParserForType() {
            return PARSER;
        }

        public final boolean hasResponseData() {
            return (this.bitField0_ & 1) == 1;
        }

        public final ByteString getResponseData() {
            return this.responseData_;
        }

        public final boolean hasResponseSw() {
            return (this.bitField0_ & 2) == 2;
        }

        public final ByteString getResponseSw() {
            return this.responseSw_;
        }

        public final boolean hasIndex() {
            return (this.bitField0_ & 4) == 4;
        }

        public final int getIndex() {
            return this.index_;
        }

        private void initFields() {
            this.responseData_ = ByteString.EMPTY;
            this.responseSw_ = ByteString.EMPTY;
            this.index_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResponseData()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasResponseSw()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, this.responseData_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, this.responseSw_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.index_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, this.responseData_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, this.responseSw_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.index_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SeAPDUResponseItem parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static SeAPDUResponseItem parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static SeAPDUResponseItem parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static SeAPDUResponseItem parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static SeAPDUResponseItem parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static SeAPDUResponseItem parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static SeAPDUResponseItem parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static SeAPDUResponseItem parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static SeAPDUResponseItem parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static SeAPDUResponseItem parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SeAPDUResponseItem seAPDUResponseItem) {
            return newBuilder().mergeFrom(seAPDUResponseItem);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements SeAPDUResponseItemOrBuilder {
            private int bitField0_;
            private int index_;
            private ByteString responseData_;
            private ByteString responseSw_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_fieldAccessorTable.ensureFieldAccessorsInitialized(SeAPDUResponseItem.class, Builder.class);
            }

            private Builder() {
                this.responseData_ = ByteString.EMPTY;
                this.responseSw_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.responseData_ = ByteString.EMPTY;
                this.responseSw_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = SeAPDUResponseItem.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.responseData_ = ByteString.EMPTY;
                this.bitField0_ &= -2;
                this.responseSw_ = ByteString.EMPTY;
                this.bitField0_ &= -3;
                this.index_ = 0;
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponseItem_descriptor;
            }

            public final SeAPDUResponseItem getDefaultInstanceForType() {
                return SeAPDUResponseItem.getDefaultInstance();
            }

            public final SeAPDUResponseItem build() {
                SeAPDUResponseItem buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final SeAPDUResponseItem buildPartial() {
                SeAPDUResponseItem seAPDUResponseItem = new SeAPDUResponseItem(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                seAPDUResponseItem.responseData_ = this.responseData_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                seAPDUResponseItem.responseSw_ = this.responseSw_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                seAPDUResponseItem.index_ = this.index_;
                seAPDUResponseItem.bitField0_ = i2;
                onBuilt();
                return seAPDUResponseItem;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof SeAPDUResponseItem) {
                    return mergeFrom((SeAPDUResponseItem) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(SeAPDUResponseItem seAPDUResponseItem) {
                if (seAPDUResponseItem == SeAPDUResponseItem.getDefaultInstance()) {
                    return this;
                }
                if (seAPDUResponseItem.hasResponseData()) {
                    setResponseData(seAPDUResponseItem.getResponseData());
                }
                if (seAPDUResponseItem.hasResponseSw()) {
                    setResponseSw(seAPDUResponseItem.getResponseSw());
                }
                if (seAPDUResponseItem.hasIndex()) {
                    setIndex(seAPDUResponseItem.getIndex());
                }
                mergeUnknownFields(seAPDUResponseItem.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasResponseData() && hasResponseSw()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                SeAPDUResponseItem seAPDUResponseItem;
                SeAPDUResponseItem seAPDUResponseItem2 = null;
                try {
                    SeAPDUResponseItem parsePartialFrom = SeAPDUResponseItem.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    seAPDUResponseItem = (SeAPDUResponseItem) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    seAPDUResponseItem2 = seAPDUResponseItem;
                }
                if (seAPDUResponseItem2 != null) {
                    mergeFrom(seAPDUResponseItem2);
                }
                throw th;
            }

            public final boolean hasResponseData() {
                return (this.bitField0_ & 1) == 1;
            }

            public final ByteString getResponseData() {
                return this.responseData_;
            }

            public final Builder setResponseData(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.responseData_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearResponseData() {
                this.bitField0_ &= -2;
                this.responseData_ = SeAPDUResponseItem.getDefaultInstance().getResponseData();
                onChanged();
                return this;
            }

            public final boolean hasResponseSw() {
                return (this.bitField0_ & 2) == 2;
            }

            public final ByteString getResponseSw() {
                return this.responseSw_;
            }

            public final Builder setResponseSw(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.responseSw_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearResponseSw() {
                this.bitField0_ &= -3;
                this.responseSw_ = SeAPDUResponseItem.getDefaultInstance().getResponseSw();
                onChanged();
                return this;
            }

            public final boolean hasIndex() {
                return (this.bitField0_ & 4) == 4;
            }

            public final int getIndex() {
                return this.index_;
            }

            public final Builder setIndex(int i) {
                this.bitField0_ |= 4;
                this.index_ = i;
                onChanged();
                return this;
            }

            public final Builder clearIndex() {
                this.bitField0_ &= -5;
                this.index_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class SeAPDUResponse extends GeneratedMessage implements SeAPDUResponseOrBuilder {
        public static Parser<SeAPDUResponse> PARSER = new AbstractParser<SeAPDUResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.SeAPDUResponse.AnonymousClass1 */

            public final SeAPDUResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new SeAPDUResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final SeAPDUResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public List<SeAPDUResponseItem> response_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private SeAPDUResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SeAPDUResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SeAPDUResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final SeAPDUResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SeAPDUResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.response_ = new ArrayList();
                                z2 |= true;
                            }
                            this.response_.add(codedInputStream.readMessage(SeAPDUResponseItem.PARSER, extensionRegistryLite));
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.response_ = Collections.unmodifiableList(this.response_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.response_ = Collections.unmodifiableList(this.response_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SeAPDUResponse.class, Builder.class);
        }

        static {
            SeAPDUResponse seAPDUResponse = new SeAPDUResponse(true);
            defaultInstance = seAPDUResponse;
            seAPDUResponse.initFields();
        }

        public final Parser<SeAPDUResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final List<SeAPDUResponseItem> getResponseList() {
            return this.response_;
        }

        public final List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList() {
            return this.response_;
        }

        public final int getResponseCount() {
            return this.response_.size();
        }

        public final SeAPDUResponseItem getResponse(int i) {
            return this.response_.get(i);
        }

        public final SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i) {
            return this.response_.get(i);
        }

        private void initFields() {
            this.sessionId_ = "";
            this.response_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getResponseCount(); i++) {
                if (!getResponse(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            for (int i = 0; i < this.response_.size(); i++) {
                codedOutputStream.writeMessage(2, this.response_.get(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getSessionIdBytes()) + 0 : 0;
            for (int i2 = 0; i2 < this.response_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(2, this.response_.get(i2));
            }
            int serializedSize = computeBytesSize + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SeAPDUResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static SeAPDUResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static SeAPDUResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static SeAPDUResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static SeAPDUResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static SeAPDUResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static SeAPDUResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static SeAPDUResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static SeAPDUResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static SeAPDUResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SeAPDUResponse seAPDUResponse) {
            return newBuilder().mergeFrom(seAPDUResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements SeAPDUResponseOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> responseBuilder_;
            private List<SeAPDUResponseItem> response_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(SeAPDUResponse.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.response_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.response_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (SeAPDUResponse.alwaysUseFieldBuilders) {
                    getResponseFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.response_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SeAPDUResponse_descriptor;
            }

            public final SeAPDUResponse getDefaultInstanceForType() {
                return SeAPDUResponse.getDefaultInstance();
            }

            public final SeAPDUResponse build() {
                SeAPDUResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final SeAPDUResponse buildPartial() {
                SeAPDUResponse seAPDUResponse = new SeAPDUResponse(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                seAPDUResponse.sessionId_ = this.sessionId_;
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.response_ = Collections.unmodifiableList(this.response_);
                        this.bitField0_ &= -3;
                    }
                    seAPDUResponse.response_ = this.response_;
                } else {
                    seAPDUResponse.response_ = repeatedFieldBuilder.build();
                }
                seAPDUResponse.bitField0_ = i;
                onBuilt();
                return seAPDUResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof SeAPDUResponse) {
                    return mergeFrom((SeAPDUResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(SeAPDUResponse seAPDUResponse) {
                if (seAPDUResponse == SeAPDUResponse.getDefaultInstance()) {
                    return this;
                }
                if (seAPDUResponse.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = seAPDUResponse.sessionId_;
                    onChanged();
                }
                if (this.responseBuilder_ == null) {
                    if (!seAPDUResponse.response_.isEmpty()) {
                        if (this.response_.isEmpty()) {
                            this.response_ = seAPDUResponse.response_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureResponseIsMutable();
                            this.response_.addAll(seAPDUResponse.response_);
                        }
                        onChanged();
                    }
                } else if (!seAPDUResponse.response_.isEmpty()) {
                    if (this.responseBuilder_.isEmpty()) {
                        this.responseBuilder_.dispose();
                        RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = null;
                        this.responseBuilder_ = null;
                        this.response_ = seAPDUResponse.response_;
                        this.bitField0_ &= -3;
                        if (SeAPDUResponse.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getResponseFieldBuilder();
                        }
                        this.responseBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.responseBuilder_.addAllMessages(seAPDUResponse.response_);
                    }
                }
                mergeUnknownFields(seAPDUResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSessionId()) {
                    return false;
                }
                for (int i = 0; i < getResponseCount(); i++) {
                    if (!getResponse(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                SeAPDUResponse seAPDUResponse;
                SeAPDUResponse seAPDUResponse2 = null;
                try {
                    SeAPDUResponse parsePartialFrom = SeAPDUResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    seAPDUResponse = (SeAPDUResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    seAPDUResponse2 = seAPDUResponse;
                }
                if (seAPDUResponse2 != null) {
                    mergeFrom(seAPDUResponse2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = SeAPDUResponse.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            private void ensureResponseIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.response_ = new ArrayList(this.response_);
                    this.bitField0_ |= 2;
                }
            }

            public final List<SeAPDUResponseItem> getResponseList() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.response_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getResponseCount() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final SeAPDUResponseItem getResponse(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setResponse(int i, SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.set(i, seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setResponse(int i, SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addResponse(SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.add(seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addResponse(int i, SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.add(i, seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addResponse(SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addResponse(int i, SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$SeAPDUResponseItem>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$SeAPDUResponseItem>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllResponse(Iterable<? extends SeAPDUResponseItem> iterable) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.response_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearResponse() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.response_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeResponse(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final SeAPDUResponseItem.Builder getResponseBuilder(int i) {
                return getResponseFieldBuilder().getBuilder(i);
            }

            public final SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.response_);
            }

            public final SeAPDUResponseItem.Builder addResponseBuilder() {
                return getResponseFieldBuilder().addBuilder(SeAPDUResponseItem.getDefaultInstance());
            }

            public final SeAPDUResponseItem.Builder addResponseBuilder(int i) {
                return getResponseFieldBuilder().addBuilder(i, SeAPDUResponseItem.getDefaultInstance());
            }

            public final List<SeAPDUResponseItem.Builder> getResponseBuilderList() {
                return getResponseFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> getResponseFieldBuilder() {
                if (this.responseBuilder_ == null) {
                    this.responseBuilder_ = new RepeatedFieldBuilder<>(this.response_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.response_ = null;
                }
                return this.responseBuilder_;
            }
        }
    }

    public static final class TopUpOperation extends GeneratedMessage implements TopUpOperationOrBuilder {
        public static Parser<TopUpOperation> PARSER = new AbstractParser<TopUpOperation>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TopUpOperation.AnonymousClass1 */

            public final TopUpOperation parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TopUpOperation(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TopUpOperation defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public ByteString authenticationCode_;
        public int balance_;
        public int bitField0_;
        public Object cardNumber_;
        public Object cityId_;
        public Object extra_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private TopUpOperation(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TopUpOperation(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TopUpOperation getDefaultInstance() {
            return defaultInstance;
        }

        public final TopUpOperation getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TopUpOperation(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.authenticationCode_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.cityId_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.cardNumber_ = codedInputStream.readBytes();
                        } else if (readTag == 48) {
                            this.bitField0_ |= 32;
                            this.balance_ = codedInputStream.readInt32();
                        } else if (readTag == 58) {
                            this.bitField0_ |= 64;
                            this.extra_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_fieldAccessorTable.ensureFieldAccessorsInitialized(TopUpOperation.class, Builder.class);
        }

        static {
            TopUpOperation topUpOperation = new TopUpOperation(true);
            defaultInstance = topUpOperation;
            topUpOperation.initFields();
        }

        public final Parser<TopUpOperation> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAuthenticationCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public final ByteString getAuthenticationCode() {
            return this.authenticationCode_;
        }

        public final boolean hasCityId() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getCityId() {
            Object obj = this.cityId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cityId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCityIdBytes() {
            Object obj = this.cityId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cityId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardNumber() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getCardNumber() {
            Object obj = this.cardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardNumberBytes() {
            Object obj = this.cardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBalance() {
            return (this.bitField0_ & 32) == 32;
        }

        public final int getBalance() {
            return this.balance_;
        }

        public final boolean hasExtra() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getExtra() {
            Object obj = this.extra_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.extra_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getExtraBytes() {
            Object obj = this.extra_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.extra_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.aid_ = "";
            this.authenticationCode_ = ByteString.EMPTY;
            this.cityId_ = "";
            this.cardNumber_ = "";
            this.balance_ = 0;
            this.extra_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasAid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasAuthenticationCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, this.authenticationCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getCityIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getCardNumberBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(6, this.balance_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getExtraBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, this.authenticationCode_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getCityIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getCardNumberBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt32Size(6, this.balance_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getExtraBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static TopUpOperation parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TopUpOperation parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TopUpOperation parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TopUpOperation parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TopUpOperation parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TopUpOperation parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TopUpOperation parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TopUpOperation parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TopUpOperation parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TopUpOperation parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(TopUpOperation topUpOperation) {
            return newBuilder().mergeFrom(topUpOperation);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TopUpOperationOrBuilder {
            private Object aid_;
            private ByteString authenticationCode_;
            private int balance_;
            private int bitField0_;
            private Object cardNumber_;
            private Object cityId_;
            private Object extra_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_fieldAccessorTable.ensureFieldAccessorsInitialized(TopUpOperation.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.aid_ = "";
                this.authenticationCode_ = ByteString.EMPTY;
                this.cityId_ = "";
                this.cardNumber_ = "";
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.aid_ = "";
                this.authenticationCode_ = ByteString.EMPTY;
                this.cityId_ = "";
                this.cardNumber_ = "";
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = TopUpOperation.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.aid_ = "";
                this.bitField0_ &= -3;
                this.authenticationCode_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                this.cityId_ = "";
                this.bitField0_ &= -9;
                this.cardNumber_ = "";
                this.bitField0_ &= -17;
                this.balance_ = 0;
                this.bitField0_ &= -33;
                this.extra_ = "";
                this.bitField0_ &= -65;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TopUpOperation_descriptor;
            }

            public final TopUpOperation getDefaultInstanceForType() {
                return TopUpOperation.getDefaultInstance();
            }

            public final TopUpOperation build() {
                TopUpOperation buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TopUpOperation buildPartial() {
                TopUpOperation topUpOperation = new TopUpOperation(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                topUpOperation.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                topUpOperation.aid_ = this.aid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                topUpOperation.authenticationCode_ = this.authenticationCode_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                topUpOperation.cityId_ = this.cityId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                topUpOperation.cardNumber_ = this.cardNumber_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                topUpOperation.balance_ = this.balance_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                topUpOperation.extra_ = this.extra_;
                topUpOperation.bitField0_ = i2;
                onBuilt();
                return topUpOperation;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TopUpOperation) {
                    return mergeFrom((TopUpOperation) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TopUpOperation topUpOperation) {
                if (topUpOperation == TopUpOperation.getDefaultInstance()) {
                    return this;
                }
                if (topUpOperation.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = topUpOperation.sessionId_;
                    onChanged();
                }
                if (topUpOperation.hasAid()) {
                    this.bitField0_ |= 2;
                    this.aid_ = topUpOperation.aid_;
                    onChanged();
                }
                if (topUpOperation.hasAuthenticationCode()) {
                    setAuthenticationCode(topUpOperation.getAuthenticationCode());
                }
                if (topUpOperation.hasCityId()) {
                    this.bitField0_ |= 8;
                    this.cityId_ = topUpOperation.cityId_;
                    onChanged();
                }
                if (topUpOperation.hasCardNumber()) {
                    this.bitField0_ |= 16;
                    this.cardNumber_ = topUpOperation.cardNumber_;
                    onChanged();
                }
                if (topUpOperation.hasBalance()) {
                    setBalance(topUpOperation.getBalance());
                }
                if (topUpOperation.hasExtra()) {
                    this.bitField0_ |= 64;
                    this.extra_ = topUpOperation.extra_;
                    onChanged();
                }
                mergeUnknownFields(topUpOperation.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasAid() && hasAuthenticationCode()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TopUpOperation topUpOperation;
                TopUpOperation topUpOperation2 = null;
                try {
                    TopUpOperation parsePartialFrom = TopUpOperation.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    topUpOperation = (TopUpOperation) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    topUpOperation2 = topUpOperation;
                }
                if (topUpOperation2 != null) {
                    mergeFrom(topUpOperation2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = TopUpOperation.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -3;
                this.aid_ = TopUpOperation.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAuthenticationCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public final ByteString getAuthenticationCode() {
                return this.authenticationCode_;
            }

            public final Builder setAuthenticationCode(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.authenticationCode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAuthenticationCode() {
                this.bitField0_ &= -5;
                this.authenticationCode_ = TopUpOperation.getDefaultInstance().getAuthenticationCode();
                onChanged();
                return this;
            }

            public final boolean hasCityId() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getCityId() {
                Object obj = this.cityId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cityId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCityIdBytes() {
                Object obj = this.cityId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cityId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCityId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.cityId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCityId() {
                this.bitField0_ &= -9;
                this.cityId_ = TopUpOperation.getDefaultInstance().getCityId();
                onChanged();
                return this;
            }

            public final Builder setCityIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.cityId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardNumber() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getCardNumber() {
                Object obj = this.cardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardNumberBytes() {
                Object obj = this.cardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.cardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardNumber() {
                this.bitField0_ &= -17;
                this.cardNumber_ = TopUpOperation.getDefaultInstance().getCardNumber();
                onChanged();
                return this;
            }

            public final Builder setCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.cardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBalance() {
                return (this.bitField0_ & 32) == 32;
            }

            public final int getBalance() {
                return this.balance_;
            }

            public final Builder setBalance(int i) {
                this.bitField0_ |= 32;
                this.balance_ = i;
                onChanged();
                return this;
            }

            public final Builder clearBalance() {
                this.bitField0_ &= -33;
                this.balance_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasExtra() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getExtra() {
                Object obj = this.extra_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.extra_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getExtraBytes() {
                Object obj = this.extra_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.extra_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setExtra(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.extra_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearExtra() {
                this.bitField0_ &= -65;
                this.extra_ = TopUpOperation.getDefaultInstance().getExtra();
                onChanged();
                return this;
            }

            public final Builder setExtraBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.extra_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class QueryProductInfoRequest extends GeneratedMessage implements QueryProductInfoRequestOrBuilder {
        public static Parser<QueryProductInfoRequest> PARSER = new AbstractParser<QueryProductInfoRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryProductInfoRequest.AnonymousClass1 */

            public final QueryProductInfoRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryProductInfoRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryProductInfoRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object bin_;
        public long bindId_;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private QueryProductInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryProductInfoRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryProductInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryProductInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryProductInfoRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.bin_ = codedInputStream.readBytes();
                        } else if (readTag == 16) {
                            this.bitField0_ |= 2;
                            this.bindId_ = codedInputStream.readInt64();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryProductInfoRequest.class, Builder.class);
        }

        static {
            QueryProductInfoRequest queryProductInfoRequest = new QueryProductInfoRequest(true);
            defaultInstance = queryProductInfoRequest;
            queryProductInfoRequest.initFields();
        }

        public final Parser<QueryProductInfoRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasBin() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getBin() {
            Object obj = this.bin_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.bin_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBinBytes() {
            Object obj = this.bin_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.bin_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBindId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final long getBindId() {
            return this.bindId_;
        }

        private void initFields() {
            this.bin_ = "";
            this.bindId_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getBinBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt64(2, this.bindId_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getBinBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt64Size(2, this.bindId_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryProductInfoRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryProductInfoRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryProductInfoRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryProductInfoRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryProductInfoRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryProductInfoRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryProductInfoRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryProductInfoRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryProductInfoRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryProductInfoRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryProductInfoRequest queryProductInfoRequest) {
            return newBuilder().mergeFrom(queryProductInfoRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryProductInfoRequestOrBuilder {
            private Object bin_;
            private long bindId_;
            private int bitField0_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryProductInfoRequest.class, Builder.class);
            }

            private Builder() {
                this.bin_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.bin_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = QueryProductInfoRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.bin_ = "";
                this.bitField0_ &= -2;
                this.bindId_ = 0;
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryProductInfoRequest_descriptor;
            }

            public final QueryProductInfoRequest getDefaultInstanceForType() {
                return QueryProductInfoRequest.getDefaultInstance();
            }

            public final QueryProductInfoRequest build() {
                QueryProductInfoRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryProductInfoRequest buildPartial() {
                QueryProductInfoRequest queryProductInfoRequest = new QueryProductInfoRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryProductInfoRequest.bin_ = this.bin_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                queryProductInfoRequest.bindId_ = this.bindId_;
                queryProductInfoRequest.bitField0_ = i2;
                onBuilt();
                return queryProductInfoRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryProductInfoRequest) {
                    return mergeFrom((QueryProductInfoRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryProductInfoRequest queryProductInfoRequest) {
                if (queryProductInfoRequest == QueryProductInfoRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryProductInfoRequest.hasBin()) {
                    this.bitField0_ |= 1;
                    this.bin_ = queryProductInfoRequest.bin_;
                    onChanged();
                }
                if (queryProductInfoRequest.hasBindId()) {
                    setBindId(queryProductInfoRequest.getBindId());
                }
                mergeUnknownFields(queryProductInfoRequest.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryProductInfoRequest queryProductInfoRequest;
                QueryProductInfoRequest queryProductInfoRequest2 = null;
                try {
                    QueryProductInfoRequest parsePartialFrom = QueryProductInfoRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryProductInfoRequest = (QueryProductInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryProductInfoRequest2 = queryProductInfoRequest;
                }
                if (queryProductInfoRequest2 != null) {
                    mergeFrom(queryProductInfoRequest2);
                }
                throw th;
            }

            public final boolean hasBin() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getBin() {
                Object obj = this.bin_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.bin_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBinBytes() {
                Object obj = this.bin_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.bin_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBin(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.bin_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBin() {
                this.bitField0_ &= -2;
                this.bin_ = QueryProductInfoRequest.getDefaultInstance().getBin();
                onChanged();
                return this;
            }

            public final Builder setBinBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.bin_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBindId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final long getBindId() {
                return this.bindId_;
            }

            public final Builder setBindId(long j) {
                this.bitField0_ |= 2;
                this.bindId_ = j;
                onChanged();
                return this;
            }

            public final Builder clearBindId() {
                this.bitField0_ &= -3;
                this.bindId_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class VerifyCardInfoRequest extends GeneratedMessage implements VerifyCardInfoRequestOrBuilder {
        public static Parser<VerifyCardInfoRequest> PARSER = new AbstractParser<VerifyCardInfoRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.VerifyCardInfoRequest.AnonymousClass1 */

            public final VerifyCardInfoRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new VerifyCardInfoRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final VerifyCardInfoRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cardNumber_;
        public ByteString cipherData_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public RiskInfo riskInfo_;
        public Object sessionId_;
        public Object sourceChannel_;
        private final UnknownFieldSet unknownFields;

        private VerifyCardInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private VerifyCardInfoRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static VerifyCardInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final VerifyCardInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private VerifyCardInfoRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.cardNumber_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.cipherData_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            RiskInfo.Builder builder = (this.bitField0_ & 8) == 8 ? this.riskInfo_.toBuilder() : null;
                            this.riskInfo_ = (RiskInfo) codedInputStream.readMessage(RiskInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.riskInfo_);
                                this.riskInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 8;
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.sourceChannel_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(VerifyCardInfoRequest.class, Builder.class);
        }

        static {
            VerifyCardInfoRequest verifyCardInfoRequest = new VerifyCardInfoRequest(true);
            defaultInstance = verifyCardInfoRequest;
            verifyCardInfoRequest.initFields();
        }

        public final Parser<VerifyCardInfoRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardNumber() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getCardNumber() {
            Object obj = this.cardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardNumberBytes() {
            Object obj = this.cardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCipherData() {
            return (this.bitField0_ & 4) == 4;
        }

        public final ByteString getCipherData() {
            return this.cipherData_;
        }

        public final boolean hasRiskInfo() {
            return (this.bitField0_ & 8) == 8;
        }

        public final RiskInfo getRiskInfo() {
            return this.riskInfo_;
        }

        public final RiskInfoOrBuilder getRiskInfoOrBuilder() {
            return this.riskInfo_;
        }

        public final boolean hasSourceChannel() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getSourceChannel() {
            Object obj = this.sourceChannel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sourceChannel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSourceChannelBytes() {
            Object obj = this.sourceChannel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sourceChannel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.cardNumber_ = "";
            this.cipherData_ = ByteString.EMPTY;
            this.riskInfo_ = RiskInfo.getDefaultInstance();
            this.sourceChannel_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCipherData()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasRiskInfo()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getCardNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, this.cipherData_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeMessage(4, this.riskInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getSourceChannelBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getCardNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, this.cipherData_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeMessageSize(4, this.riskInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getSourceChannelBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static VerifyCardInfoRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static VerifyCardInfoRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static VerifyCardInfoRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static VerifyCardInfoRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static VerifyCardInfoRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static VerifyCardInfoRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static VerifyCardInfoRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static VerifyCardInfoRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static VerifyCardInfoRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static VerifyCardInfoRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(VerifyCardInfoRequest verifyCardInfoRequest) {
            return newBuilder().mergeFrom(verifyCardInfoRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements VerifyCardInfoRequestOrBuilder {
            private int bitField0_;
            private Object cardNumber_;
            private ByteString cipherData_;
            private SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> riskInfoBuilder_;
            private RiskInfo riskInfo_;
            private Object sessionId_;
            private Object sourceChannel_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(VerifyCardInfoRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.cardNumber_ = "";
                this.cipherData_ = ByteString.EMPTY;
                this.riskInfo_ = RiskInfo.getDefaultInstance();
                this.sourceChannel_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.cardNumber_ = "";
                this.cipherData_ = ByteString.EMPTY;
                this.riskInfo_ = RiskInfo.getDefaultInstance();
                this.sourceChannel_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (VerifyCardInfoRequest.alwaysUseFieldBuilders) {
                    getRiskInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.cardNumber_ = "";
                this.bitField0_ &= -3;
                this.cipherData_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = RiskInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                this.sourceChannel_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoRequest_descriptor;
            }

            public final VerifyCardInfoRequest getDefaultInstanceForType() {
                return VerifyCardInfoRequest.getDefaultInstance();
            }

            public final VerifyCardInfoRequest build() {
                VerifyCardInfoRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final VerifyCardInfoRequest buildPartial() {
                VerifyCardInfoRequest verifyCardInfoRequest = new VerifyCardInfoRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                verifyCardInfoRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                verifyCardInfoRequest.cardNumber_ = this.cardNumber_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                verifyCardInfoRequest.cipherData_ = this.cipherData_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    verifyCardInfoRequest.riskInfo_ = this.riskInfo_;
                } else {
                    verifyCardInfoRequest.riskInfo_ = singleFieldBuilder.build();
                }
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                verifyCardInfoRequest.sourceChannel_ = this.sourceChannel_;
                verifyCardInfoRequest.bitField0_ = i2;
                onBuilt();
                return verifyCardInfoRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof VerifyCardInfoRequest) {
                    return mergeFrom((VerifyCardInfoRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(VerifyCardInfoRequest verifyCardInfoRequest) {
                if (verifyCardInfoRequest == VerifyCardInfoRequest.getDefaultInstance()) {
                    return this;
                }
                if (verifyCardInfoRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = verifyCardInfoRequest.sessionId_;
                    onChanged();
                }
                if (verifyCardInfoRequest.hasCardNumber()) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = verifyCardInfoRequest.cardNumber_;
                    onChanged();
                }
                if (verifyCardInfoRequest.hasCipherData()) {
                    setCipherData(verifyCardInfoRequest.getCipherData());
                }
                if (verifyCardInfoRequest.hasRiskInfo()) {
                    mergeRiskInfo(verifyCardInfoRequest.getRiskInfo());
                }
                if (verifyCardInfoRequest.hasSourceChannel()) {
                    this.bitField0_ |= 16;
                    this.sourceChannel_ = verifyCardInfoRequest.sourceChannel_;
                    onChanged();
                }
                mergeUnknownFields(verifyCardInfoRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasCipherData() && hasRiskInfo()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                VerifyCardInfoRequest verifyCardInfoRequest;
                VerifyCardInfoRequest verifyCardInfoRequest2 = null;
                try {
                    VerifyCardInfoRequest parsePartialFrom = VerifyCardInfoRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    verifyCardInfoRequest = (VerifyCardInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    verifyCardInfoRequest2 = verifyCardInfoRequest;
                }
                if (verifyCardInfoRequest2 != null) {
                    mergeFrom(verifyCardInfoRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = VerifyCardInfoRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardNumber() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getCardNumber() {
                Object obj = this.cardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardNumberBytes() {
                Object obj = this.cardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardNumber() {
                this.bitField0_ &= -3;
                this.cardNumber_ = VerifyCardInfoRequest.getDefaultInstance().getCardNumber();
                onChanged();
                return this;
            }

            public final Builder setCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCipherData() {
                return (this.bitField0_ & 4) == 4;
            }

            public final ByteString getCipherData() {
                return this.cipherData_;
            }

            public final Builder setCipherData(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.cipherData_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCipherData() {
                this.bitField0_ &= -5;
                this.cipherData_ = VerifyCardInfoRequest.getDefaultInstance().getCipherData();
                onChanged();
                return this;
            }

            public final boolean hasRiskInfo() {
                return (this.bitField0_ & 8) == 8;
            }

            public final RiskInfo getRiskInfo() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.riskInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setRiskInfo(RiskInfo riskInfo) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(riskInfo);
                } else if (riskInfo != null) {
                    this.riskInfo_ = riskInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setRiskInfo(RiskInfo.Builder builder) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder mergeRiskInfo(RiskInfo riskInfo) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 8) != 8 || this.riskInfo_ == RiskInfo.getDefaultInstance()) {
                        this.riskInfo_ = riskInfo;
                    } else {
                        this.riskInfo_ = RiskInfo.newBuilder(this.riskInfo_).mergeFrom(riskInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(riskInfo);
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder clearRiskInfo() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = RiskInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                return this;
            }

            public final RiskInfo.Builder getRiskInfoBuilder() {
                this.bitField0_ |= 8;
                onChanged();
                return getRiskInfoFieldBuilder().getBuilder();
            }

            public final RiskInfoOrBuilder getRiskInfoOrBuilder() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.riskInfo_;
            }

            private SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> getRiskInfoFieldBuilder() {
                if (this.riskInfoBuilder_ == null) {
                    this.riskInfoBuilder_ = new SingleFieldBuilder<>(this.riskInfo_, getParentForChildren(), isClean());
                    this.riskInfo_ = null;
                }
                return this.riskInfoBuilder_;
            }

            public final boolean hasSourceChannel() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getSourceChannel() {
                Object obj = this.sourceChannel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sourceChannel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSourceChannelBytes() {
                Object obj = this.sourceChannel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sourceChannel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSourceChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.sourceChannel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSourceChannel() {
                this.bitField0_ &= -17;
                this.sourceChannel_ = VerifyCardInfoRequest.getDefaultInstance().getSourceChannel();
                onChanged();
                return this;
            }

            public final Builder setSourceChannelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.sourceChannel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class VerifyCardInfoResponse extends GeneratedMessage implements VerifyCardInfoResponseOrBuilder {
        public static Parser<VerifyCardInfoResponse> PARSER = new AbstractParser<VerifyCardInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.VerifyCardInfoResponse.AnonymousClass1 */

            public final VerifyCardInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new VerifyCardInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final VerifyCardInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public Object cardProductTypeId_;
        public Object cardReferenceId_;
        public Object expireDate_;
        public Object lastDigits_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object phoneNumLastDigits_;
        public int result_;
        private final UnknownFieldSet unknownFields;
        public Object virtualCardNumber_;
        public Object virtualCardReferenceId_;

        private VerifyCardInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private VerifyCardInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static VerifyCardInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final VerifyCardInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private VerifyCardInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.virtualCardNumber_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.expireDate_ = codedInputStream.readBytes();
                        } else if (readTag == 50) {
                            this.bitField0_ |= 32;
                            this.lastDigits_ = codedInputStream.readBytes();
                        } else if (readTag == 58) {
                            this.bitField0_ |= 64;
                            this.cardProductTypeId_ = codedInputStream.readBytes();
                        } else if (readTag == 66) {
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.cardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 74) {
                            this.bitField0_ |= 256;
                            this.phoneNumLastDigits_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(VerifyCardInfoResponse.class, Builder.class);
        }

        static {
            VerifyCardInfoResponse verifyCardInfoResponse = new VerifyCardInfoResponse(true);
            defaultInstance = verifyCardInfoResponse;
            verifyCardInfoResponse.initFields();
        }

        public final Parser<VerifyCardInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardNumber() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getVirtualCardNumber() {
            Object obj = this.virtualCardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardNumberBytes() {
            Object obj = this.virtualCardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasExpireDate() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getExpireDate() {
            Object obj = this.expireDate_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.expireDate_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getExpireDateBytes() {
            Object obj = this.expireDate_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.expireDate_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLastDigits() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getLastDigits() {
            Object obj = this.lastDigits_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.lastDigits_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLastDigitsBytes() {
            Object obj = this.lastDigits_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.lastDigits_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardProductTypeId() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getCardProductTypeId() {
            Object obj = this.cardProductTypeId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardProductTypeId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardProductTypeIdBytes() {
            Object obj = this.cardProductTypeId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardProductTypeId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardReferenceId() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getCardReferenceId() {
            Object obj = this.cardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardReferenceIdBytes() {
            Object obj = this.cardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPhoneNumLastDigits() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getPhoneNumLastDigits() {
            Object obj = this.phoneNumLastDigits_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.phoneNumLastDigits_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPhoneNumLastDigitsBytes() {
            Object obj = this.phoneNumLastDigits_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.phoneNumLastDigits_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.aid_ = "";
            this.virtualCardReferenceId_ = "";
            this.virtualCardNumber_ = "";
            this.expireDate_ = "";
            this.lastDigits_ = "";
            this.cardProductTypeId_ = "";
            this.cardReferenceId_ = "";
            this.phoneNumLastDigits_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getVirtualCardNumberBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getExpireDateBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getCardProductTypeIdBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getPhoneNumLastDigitsBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getVirtualCardNumberBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getExpireDateBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getCardProductTypeIdBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getPhoneNumLastDigitsBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static VerifyCardInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static VerifyCardInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static VerifyCardInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static VerifyCardInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static VerifyCardInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static VerifyCardInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static VerifyCardInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static VerifyCardInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static VerifyCardInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static VerifyCardInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(VerifyCardInfoResponse verifyCardInfoResponse) {
            return newBuilder().mergeFrom(verifyCardInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements VerifyCardInfoResponseOrBuilder {
            private Object aid_;
            private int bitField0_;
            private Object cardProductTypeId_;
            private Object cardReferenceId_;
            private Object expireDate_;
            private Object lastDigits_;
            private Object phoneNumLastDigits_;
            private int result_;
            private Object virtualCardNumber_;
            private Object virtualCardReferenceId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(VerifyCardInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.aid_ = "";
                this.virtualCardReferenceId_ = "";
                this.virtualCardNumber_ = "";
                this.expireDate_ = "";
                this.lastDigits_ = "";
                this.cardProductTypeId_ = "";
                this.cardReferenceId_ = "";
                this.phoneNumLastDigits_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.aid_ = "";
                this.virtualCardReferenceId_ = "";
                this.virtualCardNumber_ = "";
                this.expireDate_ = "";
                this.lastDigits_ = "";
                this.cardProductTypeId_ = "";
                this.cardReferenceId_ = "";
                this.phoneNumLastDigits_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = VerifyCardInfoResponse.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.aid_ = "";
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -5;
                this.virtualCardNumber_ = "";
                this.bitField0_ &= -9;
                this.expireDate_ = "";
                this.bitField0_ &= -17;
                this.lastDigits_ = "";
                this.bitField0_ &= -33;
                this.cardProductTypeId_ = "";
                this.bitField0_ &= -65;
                this.cardReferenceId_ = "";
                this.bitField0_ &= -129;
                this.phoneNumLastDigits_ = "";
                this.bitField0_ &= -257;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyCardInfoResponse_descriptor;
            }

            public final VerifyCardInfoResponse getDefaultInstanceForType() {
                return VerifyCardInfoResponse.getDefaultInstance();
            }

            public final VerifyCardInfoResponse build() {
                VerifyCardInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final VerifyCardInfoResponse buildPartial() {
                VerifyCardInfoResponse verifyCardInfoResponse = new VerifyCardInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                verifyCardInfoResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                verifyCardInfoResponse.aid_ = this.aid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                verifyCardInfoResponse.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                verifyCardInfoResponse.virtualCardNumber_ = this.virtualCardNumber_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                verifyCardInfoResponse.expireDate_ = this.expireDate_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                verifyCardInfoResponse.lastDigits_ = this.lastDigits_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                verifyCardInfoResponse.cardProductTypeId_ = this.cardProductTypeId_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                verifyCardInfoResponse.cardReferenceId_ = this.cardReferenceId_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                verifyCardInfoResponse.phoneNumLastDigits_ = this.phoneNumLastDigits_;
                verifyCardInfoResponse.bitField0_ = i2;
                onBuilt();
                return verifyCardInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof VerifyCardInfoResponse) {
                    return mergeFrom((VerifyCardInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(VerifyCardInfoResponse verifyCardInfoResponse) {
                if (verifyCardInfoResponse == VerifyCardInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (verifyCardInfoResponse.hasResult()) {
                    setResult(verifyCardInfoResponse.getResult());
                }
                if (verifyCardInfoResponse.hasAid()) {
                    this.bitField0_ |= 2;
                    this.aid_ = verifyCardInfoResponse.aid_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = verifyCardInfoResponse.virtualCardReferenceId_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasVirtualCardNumber()) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = verifyCardInfoResponse.virtualCardNumber_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasExpireDate()) {
                    this.bitField0_ |= 16;
                    this.expireDate_ = verifyCardInfoResponse.expireDate_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasLastDigits()) {
                    this.bitField0_ |= 32;
                    this.lastDigits_ = verifyCardInfoResponse.lastDigits_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasCardProductTypeId()) {
                    this.bitField0_ |= 64;
                    this.cardProductTypeId_ = verifyCardInfoResponse.cardProductTypeId_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasCardReferenceId()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cardReferenceId_ = verifyCardInfoResponse.cardReferenceId_;
                    onChanged();
                }
                if (verifyCardInfoResponse.hasPhoneNumLastDigits()) {
                    this.bitField0_ |= 256;
                    this.phoneNumLastDigits_ = verifyCardInfoResponse.phoneNumLastDigits_;
                    onChanged();
                }
                mergeUnknownFields(verifyCardInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                VerifyCardInfoResponse verifyCardInfoResponse;
                VerifyCardInfoResponse verifyCardInfoResponse2 = null;
                try {
                    VerifyCardInfoResponse parsePartialFrom = VerifyCardInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    verifyCardInfoResponse = (VerifyCardInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    verifyCardInfoResponse2 = verifyCardInfoResponse;
                }
                if (verifyCardInfoResponse2 != null) {
                    mergeFrom(verifyCardInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -3;
                this.aid_ = VerifyCardInfoResponse.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -5;
                this.virtualCardReferenceId_ = VerifyCardInfoResponse.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardNumber() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getVirtualCardNumber() {
                Object obj = this.virtualCardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardNumberBytes() {
                Object obj = this.virtualCardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardNumber() {
                this.bitField0_ &= -9;
                this.virtualCardNumber_ = VerifyCardInfoResponse.getDefaultInstance().getVirtualCardNumber();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasExpireDate() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getExpireDate() {
                Object obj = this.expireDate_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.expireDate_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getExpireDateBytes() {
                Object obj = this.expireDate_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.expireDate_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setExpireDate(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.expireDate_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearExpireDate() {
                this.bitField0_ &= -17;
                this.expireDate_ = VerifyCardInfoResponse.getDefaultInstance().getExpireDate();
                onChanged();
                return this;
            }

            public final Builder setExpireDateBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.expireDate_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLastDigits() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getLastDigits() {
                Object obj = this.lastDigits_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.lastDigits_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLastDigitsBytes() {
                Object obj = this.lastDigits_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.lastDigits_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLastDigits(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.lastDigits_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLastDigits() {
                this.bitField0_ &= -33;
                this.lastDigits_ = VerifyCardInfoResponse.getDefaultInstance().getLastDigits();
                onChanged();
                return this;
            }

            public final Builder setLastDigitsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.lastDigits_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardProductTypeId() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getCardProductTypeId() {
                Object obj = this.cardProductTypeId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardProductTypeId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardProductTypeIdBytes() {
                Object obj = this.cardProductTypeId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardProductTypeId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardProductTypeId(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.cardProductTypeId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardProductTypeId() {
                this.bitField0_ &= -65;
                this.cardProductTypeId_ = VerifyCardInfoResponse.getDefaultInstance().getCardProductTypeId();
                onChanged();
                return this;
            }

            public final Builder setCardProductTypeIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.cardProductTypeId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardReferenceId() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getCardReferenceId() {
                Object obj = this.cardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardReferenceIdBytes() {
                Object obj = this.cardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardReferenceId() {
                this.bitField0_ &= -129;
                this.cardReferenceId_ = VerifyCardInfoResponse.getDefaultInstance().getCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPhoneNumLastDigits() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getPhoneNumLastDigits() {
                Object obj = this.phoneNumLastDigits_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.phoneNumLastDigits_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPhoneNumLastDigitsBytes() {
                Object obj = this.phoneNumLastDigits_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.phoneNumLastDigits_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPhoneNumLastDigits(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.phoneNumLastDigits_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPhoneNumLastDigits() {
                this.bitField0_ &= -257;
                this.phoneNumLastDigits_ = VerifyCardInfoResponse.getDefaultInstance().getPhoneNumLastDigits();
                onChanged();
                return this;
            }

            public final Builder setPhoneNumLastDigitsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.phoneNumLastDigits_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class RequestVerificationCode extends GeneratedMessage implements RequestVerificationCodeOrBuilder {
        public static Parser<RequestVerificationCode> PARSER = new AbstractParser<RequestVerificationCode>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.RequestVerificationCode.AnonymousClass1 */

            public final RequestVerificationCode parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new RequestVerificationCode(codedInputStream, extensionRegistryLite);
            }
        };
        private static final RequestVerificationCode defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public OtpMethod optMethod_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;
        public Object virtualCardReferenceId_;

        private RequestVerificationCode(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RequestVerificationCode(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RequestVerificationCode getDefaultInstance() {
            return defaultInstance;
        }

        public final RequestVerificationCode getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RequestVerificationCode(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            int readEnum = codedInputStream.readEnum();
                            OtpMethod valueOf = OtpMethod.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(3, readEnum);
                            } else {
                                this.bitField0_ |= 4;
                                this.optMethod_ = valueOf;
                            }
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_fieldAccessorTable.ensureFieldAccessorsInitialized(RequestVerificationCode.class, Builder.class);
        }

        static {
            RequestVerificationCode requestVerificationCode = new RequestVerificationCode(true);
            defaultInstance = requestVerificationCode;
            requestVerificationCode.initFields();
        }

        public final Parser<RequestVerificationCode> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasOptMethod() {
            return (this.bitField0_ & 4) == 4;
        }

        public final OtpMethod getOptMethod() {
            return this.optMethod_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.virtualCardReferenceId_ = "";
            this.optMethod_ = OtpMethod.SMS;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVirtualCardReferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasOptMethod()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.optMethod_.getNumber());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeEnumSize(3, this.optMethod_.getNumber());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RequestVerificationCode parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static RequestVerificationCode parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static RequestVerificationCode parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static RequestVerificationCode parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static RequestVerificationCode parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static RequestVerificationCode parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static RequestVerificationCode parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static RequestVerificationCode parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static RequestVerificationCode parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static RequestVerificationCode parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RequestVerificationCode requestVerificationCode) {
            return newBuilder().mergeFrom(requestVerificationCode);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements RequestVerificationCodeOrBuilder {
            private int bitField0_;
            private OtpMethod optMethod_;
            private Object sessionId_;
            private Object virtualCardReferenceId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_fieldAccessorTable.ensureFieldAccessorsInitialized(RequestVerificationCode.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                this.optMethod_ = OtpMethod.SMS;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                this.optMethod_ = OtpMethod.SMS;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = RequestVerificationCode.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -3;
                this.optMethod_ = OtpMethod.SMS;
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCode_descriptor;
            }

            public final RequestVerificationCode getDefaultInstanceForType() {
                return RequestVerificationCode.getDefaultInstance();
            }

            public final RequestVerificationCode build() {
                RequestVerificationCode buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final RequestVerificationCode buildPartial() {
                RequestVerificationCode requestVerificationCode = new RequestVerificationCode(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                requestVerificationCode.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                requestVerificationCode.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                requestVerificationCode.optMethod_ = this.optMethod_;
                requestVerificationCode.bitField0_ = i2;
                onBuilt();
                return requestVerificationCode;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof RequestVerificationCode) {
                    return mergeFrom((RequestVerificationCode) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(RequestVerificationCode requestVerificationCode) {
                if (requestVerificationCode == RequestVerificationCode.getDefaultInstance()) {
                    return this;
                }
                if (requestVerificationCode.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = requestVerificationCode.sessionId_;
                    onChanged();
                }
                if (requestVerificationCode.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = requestVerificationCode.virtualCardReferenceId_;
                    onChanged();
                }
                if (requestVerificationCode.hasOptMethod()) {
                    setOptMethod(requestVerificationCode.getOptMethod());
                }
                mergeUnknownFields(requestVerificationCode.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasVirtualCardReferenceId() && hasOptMethod()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                RequestVerificationCode requestVerificationCode;
                RequestVerificationCode requestVerificationCode2 = null;
                try {
                    RequestVerificationCode parsePartialFrom = RequestVerificationCode.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    requestVerificationCode = (RequestVerificationCode) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    requestVerificationCode2 = requestVerificationCode;
                }
                if (requestVerificationCode2 != null) {
                    mergeFrom(requestVerificationCode2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = RequestVerificationCode.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = RequestVerificationCode.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasOptMethod() {
                return (this.bitField0_ & 4) == 4;
            }

            public final OtpMethod getOptMethod() {
                return this.optMethod_;
            }

            public final Builder setOptMethod(OtpMethod otpMethod) {
                if (otpMethod != null) {
                    this.bitField0_ |= 4;
                    this.optMethod_ = otpMethod;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearOptMethod() {
                this.bitField0_ &= -5;
                this.optMethod_ = OtpMethod.SMS;
                onChanged();
                return this;
            }
        }
    }

    public static final class VerifyVerificationCode extends GeneratedMessage implements VerifyVerificationCodeOrBuilder {
        public static Parser<VerifyVerificationCode> PARSER = new AbstractParser<VerifyVerificationCode>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.VerifyVerificationCode.AnonymousClass1 */

            public final VerifyVerificationCode parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new VerifyVerificationCode(codedInputStream, extensionRegistryLite);
            }
        };
        private static final VerifyVerificationCode defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;
        public Object verificationCode_;
        public Object virtualCardReferenceId_;

        private VerifyVerificationCode(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private VerifyVerificationCode(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static VerifyVerificationCode getDefaultInstance() {
            return defaultInstance;
        }

        public final VerifyVerificationCode getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private VerifyVerificationCode(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.verificationCode_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_fieldAccessorTable.ensureFieldAccessorsInitialized(VerifyVerificationCode.class, Builder.class);
        }

        static {
            VerifyVerificationCode verifyVerificationCode = new VerifyVerificationCode(true);
            defaultInstance = verifyVerificationCode;
            verifyVerificationCode.initFields();
        }

        public final Parser<VerifyVerificationCode> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVerificationCode() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getVerificationCode() {
            Object obj = this.verificationCode_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.verificationCode_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVerificationCodeBytes() {
            Object obj = this.verificationCode_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.verificationCode_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.virtualCardReferenceId_ = "";
            this.verificationCode_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVirtualCardReferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVerificationCode()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getVerificationCodeBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getVerificationCodeBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static VerifyVerificationCode parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static VerifyVerificationCode parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static VerifyVerificationCode parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static VerifyVerificationCode parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static VerifyVerificationCode parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static VerifyVerificationCode parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static VerifyVerificationCode parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static VerifyVerificationCode parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static VerifyVerificationCode parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static VerifyVerificationCode parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(VerifyVerificationCode verifyVerificationCode) {
            return newBuilder().mergeFrom(verifyVerificationCode);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements VerifyVerificationCodeOrBuilder {
            private int bitField0_;
            private Object sessionId_;
            private Object verificationCode_;
            private Object virtualCardReferenceId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_fieldAccessorTable.ensureFieldAccessorsInitialized(VerifyVerificationCode.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                this.verificationCode_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                this.verificationCode_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = VerifyVerificationCode.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -3;
                this.verificationCode_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VerifyVerificationCode_descriptor;
            }

            public final VerifyVerificationCode getDefaultInstanceForType() {
                return VerifyVerificationCode.getDefaultInstance();
            }

            public final VerifyVerificationCode build() {
                VerifyVerificationCode buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final VerifyVerificationCode buildPartial() {
                VerifyVerificationCode verifyVerificationCode = new VerifyVerificationCode(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                verifyVerificationCode.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                verifyVerificationCode.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                verifyVerificationCode.verificationCode_ = this.verificationCode_;
                verifyVerificationCode.bitField0_ = i2;
                onBuilt();
                return verifyVerificationCode;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof VerifyVerificationCode) {
                    return mergeFrom((VerifyVerificationCode) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(VerifyVerificationCode verifyVerificationCode) {
                if (verifyVerificationCode == VerifyVerificationCode.getDefaultInstance()) {
                    return this;
                }
                if (verifyVerificationCode.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = verifyVerificationCode.sessionId_;
                    onChanged();
                }
                if (verifyVerificationCode.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = verifyVerificationCode.virtualCardReferenceId_;
                    onChanged();
                }
                if (verifyVerificationCode.hasVerificationCode()) {
                    this.bitField0_ |= 4;
                    this.verificationCode_ = verifyVerificationCode.verificationCode_;
                    onChanged();
                }
                mergeUnknownFields(verifyVerificationCode.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasVirtualCardReferenceId() && hasVerificationCode()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                VerifyVerificationCode verifyVerificationCode;
                VerifyVerificationCode verifyVerificationCode2 = null;
                try {
                    VerifyVerificationCode parsePartialFrom = VerifyVerificationCode.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    verifyVerificationCode = (VerifyVerificationCode) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    verifyVerificationCode2 = verifyVerificationCode;
                }
                if (verifyVerificationCode2 != null) {
                    mergeFrom(verifyVerificationCode2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = VerifyVerificationCode.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = VerifyVerificationCode.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVerificationCode() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getVerificationCode() {
                Object obj = this.verificationCode_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.verificationCode_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVerificationCodeBytes() {
                Object obj = this.verificationCode_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.verificationCode_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVerificationCode(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.verificationCode_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVerificationCode() {
                this.bitField0_ &= -5;
                this.verificationCode_ = VerifyVerificationCode.getDefaultInstance().getVerificationCode();
                onChanged();
                return this;
            }

            public final Builder setVerificationCodeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.verificationCode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class UpCardMoreInfoRequest extends GeneratedMessage implements UpCardMoreInfoRequestOrBuilder {
        public static Parser<UpCardMoreInfoRequest> PARSER = new AbstractParser<UpCardMoreInfoRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpCardMoreInfoRequest.AnonymousClass1 */

            public final UpCardMoreInfoRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpCardMoreInfoRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpCardMoreInfoRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object oldVcReferenceId_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private UpCardMoreInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpCardMoreInfoRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpCardMoreInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final UpCardMoreInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private UpCardMoreInfoRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.oldVcReferenceId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpCardMoreInfoRequest.class, Builder.class);
        }

        static {
            UpCardMoreInfoRequest upCardMoreInfoRequest = new UpCardMoreInfoRequest(true);
            defaultInstance = upCardMoreInfoRequest;
            upCardMoreInfoRequest.initFields();
        }

        public final Parser<UpCardMoreInfoRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasOldVcReferenceId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getOldVcReferenceId() {
            Object obj = this.oldVcReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.oldVcReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getOldVcReferenceIdBytes() {
            Object obj = this.oldVcReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.oldVcReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.oldVcReferenceId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getOldVcReferenceIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getOldVcReferenceIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static UpCardMoreInfoRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpCardMoreInfoRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpCardMoreInfoRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpCardMoreInfoRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static UpCardMoreInfoRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpCardMoreInfoRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpCardMoreInfoRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpCardMoreInfoRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpCardMoreInfoRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpCardMoreInfoRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(UpCardMoreInfoRequest upCardMoreInfoRequest) {
            return newBuilder().mergeFrom(upCardMoreInfoRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpCardMoreInfoRequestOrBuilder {
            private int bitField0_;
            private Object oldVcReferenceId_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpCardMoreInfoRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.oldVcReferenceId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.oldVcReferenceId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = UpCardMoreInfoRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.oldVcReferenceId_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoRequest_descriptor;
            }

            public final UpCardMoreInfoRequest getDefaultInstanceForType() {
                return UpCardMoreInfoRequest.getDefaultInstance();
            }

            public final UpCardMoreInfoRequest build() {
                UpCardMoreInfoRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpCardMoreInfoRequest buildPartial() {
                UpCardMoreInfoRequest upCardMoreInfoRequest = new UpCardMoreInfoRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                upCardMoreInfoRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                upCardMoreInfoRequest.oldVcReferenceId_ = this.oldVcReferenceId_;
                upCardMoreInfoRequest.bitField0_ = i2;
                onBuilt();
                return upCardMoreInfoRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpCardMoreInfoRequest) {
                    return mergeFrom((UpCardMoreInfoRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpCardMoreInfoRequest upCardMoreInfoRequest) {
                if (upCardMoreInfoRequest == UpCardMoreInfoRequest.getDefaultInstance()) {
                    return this;
                }
                if (upCardMoreInfoRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = upCardMoreInfoRequest.sessionId_;
                    onChanged();
                }
                if (upCardMoreInfoRequest.hasOldVcReferenceId()) {
                    this.bitField0_ |= 2;
                    this.oldVcReferenceId_ = upCardMoreInfoRequest.oldVcReferenceId_;
                    onChanged();
                }
                mergeUnknownFields(upCardMoreInfoRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasSessionId();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpCardMoreInfoRequest upCardMoreInfoRequest;
                UpCardMoreInfoRequest upCardMoreInfoRequest2 = null;
                try {
                    UpCardMoreInfoRequest parsePartialFrom = UpCardMoreInfoRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    upCardMoreInfoRequest = (UpCardMoreInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    upCardMoreInfoRequest2 = upCardMoreInfoRequest;
                }
                if (upCardMoreInfoRequest2 != null) {
                    mergeFrom(upCardMoreInfoRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = UpCardMoreInfoRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasOldVcReferenceId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getOldVcReferenceId() {
                Object obj = this.oldVcReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.oldVcReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getOldVcReferenceIdBytes() {
                Object obj = this.oldVcReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.oldVcReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setOldVcReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.oldVcReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearOldVcReferenceId() {
                this.bitField0_ &= -3;
                this.oldVcReferenceId_ = UpCardMoreInfoRequest.getDefaultInstance().getOldVcReferenceId();
                onChanged();
                return this;
            }

            public final Builder setOldVcReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.oldVcReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class UpCardMoreInfoResponse extends GeneratedMessage implements UpCardMoreInfoResponseOrBuilder {
        public static Parser<UpCardMoreInfoResponse> PARSER = new AbstractParser<UpCardMoreInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpCardMoreInfoResponse.AnonymousClass1 */

            public final UpCardMoreInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpCardMoreInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpCardMoreInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object contactNumber_;
        public Object errorDesc_;
        public Object fakePan_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private UpCardMoreInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpCardMoreInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpCardMoreInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final UpCardMoreInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private UpCardMoreInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.contactNumber_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.fakePan_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpCardMoreInfoResponse.class, Builder.class);
        }

        static {
            UpCardMoreInfoResponse upCardMoreInfoResponse = new UpCardMoreInfoResponse(true);
            defaultInstance = upCardMoreInfoResponse;
            upCardMoreInfoResponse.initFields();
        }

        public final Parser<UpCardMoreInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasContactNumber() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getContactNumber() {
            Object obj = this.contactNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.contactNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getContactNumberBytes() {
            Object obj = this.contactNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.contactNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasFakePan() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getFakePan() {
            Object obj = this.fakePan_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.fakePan_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getFakePanBytes() {
            Object obj = this.fakePan_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.fakePan_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.contactNumber_ = "";
            this.fakePan_ = "";
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getContactNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getFakePanBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getContactNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getFakePanBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static UpCardMoreInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpCardMoreInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpCardMoreInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpCardMoreInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static UpCardMoreInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpCardMoreInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpCardMoreInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpCardMoreInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpCardMoreInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpCardMoreInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(UpCardMoreInfoResponse upCardMoreInfoResponse) {
            return newBuilder().mergeFrom(upCardMoreInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpCardMoreInfoResponseOrBuilder {
            private int bitField0_;
            private Object contactNumber_;
            private Object errorDesc_;
            private Object fakePan_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(UpCardMoreInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.contactNumber_ = "";
                this.fakePan_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.contactNumber_ = "";
                this.fakePan_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = UpCardMoreInfoResponse.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.contactNumber_ = "";
                this.bitField0_ &= -3;
                this.fakePan_ = "";
                this.bitField0_ &= -5;
                this.errorDesc_ = "";
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpCardMoreInfoResponse_descriptor;
            }

            public final UpCardMoreInfoResponse getDefaultInstanceForType() {
                return UpCardMoreInfoResponse.getDefaultInstance();
            }

            public final UpCardMoreInfoResponse build() {
                UpCardMoreInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpCardMoreInfoResponse buildPartial() {
                UpCardMoreInfoResponse upCardMoreInfoResponse = new UpCardMoreInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                upCardMoreInfoResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                upCardMoreInfoResponse.contactNumber_ = this.contactNumber_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                upCardMoreInfoResponse.fakePan_ = this.fakePan_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                upCardMoreInfoResponse.errorDesc_ = this.errorDesc_;
                upCardMoreInfoResponse.bitField0_ = i2;
                onBuilt();
                return upCardMoreInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpCardMoreInfoResponse) {
                    return mergeFrom((UpCardMoreInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpCardMoreInfoResponse upCardMoreInfoResponse) {
                if (upCardMoreInfoResponse == UpCardMoreInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (upCardMoreInfoResponse.hasResult()) {
                    setResult(upCardMoreInfoResponse.getResult());
                }
                if (upCardMoreInfoResponse.hasContactNumber()) {
                    this.bitField0_ |= 2;
                    this.contactNumber_ = upCardMoreInfoResponse.contactNumber_;
                    onChanged();
                }
                if (upCardMoreInfoResponse.hasFakePan()) {
                    this.bitField0_ |= 4;
                    this.fakePan_ = upCardMoreInfoResponse.fakePan_;
                    onChanged();
                }
                if (upCardMoreInfoResponse.hasErrorDesc()) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = upCardMoreInfoResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(upCardMoreInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpCardMoreInfoResponse upCardMoreInfoResponse;
                UpCardMoreInfoResponse upCardMoreInfoResponse2 = null;
                try {
                    UpCardMoreInfoResponse parsePartialFrom = UpCardMoreInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    upCardMoreInfoResponse = (UpCardMoreInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    upCardMoreInfoResponse2 = upCardMoreInfoResponse;
                }
                if (upCardMoreInfoResponse2 != null) {
                    mergeFrom(upCardMoreInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasContactNumber() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getContactNumber() {
                Object obj = this.contactNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.contactNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getContactNumberBytes() {
                Object obj = this.contactNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.contactNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setContactNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.contactNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearContactNumber() {
                this.bitField0_ &= -3;
                this.contactNumber_ = UpCardMoreInfoResponse.getDefaultInstance().getContactNumber();
                onChanged();
                return this;
            }

            public final Builder setContactNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.contactNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasFakePan() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getFakePan() {
                Object obj = this.fakePan_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.fakePan_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getFakePanBytes() {
                Object obj = this.fakePan_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.fakePan_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setFakePan(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.fakePan_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearFakePan() {
                this.bitField0_ &= -5;
                this.fakePan_ = UpCardMoreInfoResponse.getDefaultInstance().getFakePan();
                onChanged();
                return this;
            }

            public final Builder setFakePanBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.fakePan_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -9;
                this.errorDesc_ = UpCardMoreInfoResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class QueryBankCardInfoRequest extends GeneratedMessage implements QueryBankCardInfoRequestOrBuilder {
        public static Parser<QueryBankCardInfoRequest> PARSER = new AbstractParser<QueryBankCardInfoRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryBankCardInfoRequest.AnonymousClass1 */

            public final QueryBankCardInfoRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryBankCardInfoRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryBankCardInfoRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public Object cplc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int requestSource_;
        private final UnknownFieldSet unknownFields;
        public Object vcRefId_;

        private QueryBankCardInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryBankCardInfoRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryBankCardInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryBankCardInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryBankCardInfoRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.vcRefId_ = codedInputStream.readBytes();
                        } else if (readTag == 32) {
                            this.bitField0_ |= 8;
                            this.requestSource_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryBankCardInfoRequest.class, Builder.class);
        }

        static {
            QueryBankCardInfoRequest queryBankCardInfoRequest = new QueryBankCardInfoRequest(true);
            defaultInstance = queryBankCardInfoRequest;
            queryBankCardInfoRequest.initFields();
        }

        public final Parser<QueryBankCardInfoRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVcRefId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getVcRefId() {
            Object obj = this.vcRefId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.vcRefId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVcRefIdBytes() {
            Object obj = this.vcRefId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.vcRefId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasRequestSource() {
            return (this.bitField0_ & 8) == 8;
        }

        public final int getRequestSource() {
            return this.requestSource_;
        }

        private void initFields() {
            this.cplc_ = "";
            this.aid_ = "";
            this.vcRefId_ = "";
            this.requestSource_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasCplc()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCplcBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getVcRefIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.requestSource_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCplcBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getVcRefIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt32Size(4, this.requestSource_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryBankCardInfoRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryBankCardInfoRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryBankCardInfoRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryBankCardInfoRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryBankCardInfoRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryBankCardInfoRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryBankCardInfoRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryBankCardInfoRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryBankCardInfoRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryBankCardInfoRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryBankCardInfoRequest queryBankCardInfoRequest) {
            return newBuilder().mergeFrom(queryBankCardInfoRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryBankCardInfoRequestOrBuilder {
            private Object aid_;
            private int bitField0_;
            private Object cplc_;
            private int requestSource_;
            private Object vcRefId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryBankCardInfoRequest.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = "";
                this.aid_ = "";
                this.vcRefId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = "";
                this.aid_ = "";
                this.vcRefId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = QueryBankCardInfoRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = "";
                this.bitField0_ &= -2;
                this.aid_ = "";
                this.bitField0_ &= -3;
                this.vcRefId_ = "";
                this.bitField0_ &= -5;
                this.requestSource_ = 0;
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoRequest_descriptor;
            }

            public final QueryBankCardInfoRequest getDefaultInstanceForType() {
                return QueryBankCardInfoRequest.getDefaultInstance();
            }

            public final QueryBankCardInfoRequest build() {
                QueryBankCardInfoRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryBankCardInfoRequest buildPartial() {
                QueryBankCardInfoRequest queryBankCardInfoRequest = new QueryBankCardInfoRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryBankCardInfoRequest.cplc_ = this.cplc_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                queryBankCardInfoRequest.aid_ = this.aid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                queryBankCardInfoRequest.vcRefId_ = this.vcRefId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                queryBankCardInfoRequest.requestSource_ = this.requestSource_;
                queryBankCardInfoRequest.bitField0_ = i2;
                onBuilt();
                return queryBankCardInfoRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryBankCardInfoRequest) {
                    return mergeFrom((QueryBankCardInfoRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryBankCardInfoRequest queryBankCardInfoRequest) {
                if (queryBankCardInfoRequest == QueryBankCardInfoRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryBankCardInfoRequest.hasCplc()) {
                    this.bitField0_ |= 1;
                    this.cplc_ = queryBankCardInfoRequest.cplc_;
                    onChanged();
                }
                if (queryBankCardInfoRequest.hasAid()) {
                    this.bitField0_ |= 2;
                    this.aid_ = queryBankCardInfoRequest.aid_;
                    onChanged();
                }
                if (queryBankCardInfoRequest.hasVcRefId()) {
                    this.bitField0_ |= 4;
                    this.vcRefId_ = queryBankCardInfoRequest.vcRefId_;
                    onChanged();
                }
                if (queryBankCardInfoRequest.hasRequestSource()) {
                    setRequestSource(queryBankCardInfoRequest.getRequestSource());
                }
                mergeUnknownFields(queryBankCardInfoRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasCplc();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryBankCardInfoRequest queryBankCardInfoRequest;
                QueryBankCardInfoRequest queryBankCardInfoRequest2 = null;
                try {
                    QueryBankCardInfoRequest parsePartialFrom = QueryBankCardInfoRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryBankCardInfoRequest = (QueryBankCardInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryBankCardInfoRequest2 = queryBankCardInfoRequest;
                }
                if (queryBankCardInfoRequest2 != null) {
                    mergeFrom(queryBankCardInfoRequest2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = QueryBankCardInfoRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -3;
                this.aid_ = QueryBankCardInfoRequest.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVcRefId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getVcRefId() {
                Object obj = this.vcRefId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.vcRefId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVcRefIdBytes() {
                Object obj = this.vcRefId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.vcRefId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVcRefId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.vcRefId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVcRefId() {
                this.bitField0_ &= -5;
                this.vcRefId_ = QueryBankCardInfoRequest.getDefaultInstance().getVcRefId();
                onChanged();
                return this;
            }

            public final Builder setVcRefIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.vcRefId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasRequestSource() {
                return (this.bitField0_ & 8) == 8;
            }

            public final int getRequestSource() {
                return this.requestSource_;
            }

            public final Builder setRequestSource(int i) {
                this.bitField0_ |= 8;
                this.requestSource_ = i;
                onChanged();
                return this;
            }

            public final Builder clearRequestSource() {
                this.bitField0_ &= -9;
                this.requestSource_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class QueryQuickEnrollCardListRequest extends GeneratedMessage implements QueryQuickEnrollCardListRequestOrBuilder {
        public static Parser<QueryQuickEnrollCardListRequest> PARSER = new AbstractParser<QueryQuickEnrollCardListRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryQuickEnrollCardListRequest.AnonymousClass1 */

            public final QueryQuickEnrollCardListRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryQuickEnrollCardListRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryQuickEnrollCardListRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cplc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private QueryQuickEnrollCardListRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryQuickEnrollCardListRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryQuickEnrollCardListRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryQuickEnrollCardListRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryQuickEnrollCardListRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryQuickEnrollCardListRequest.class, Builder.class);
        }

        static {
            QueryQuickEnrollCardListRequest queryQuickEnrollCardListRequest = new QueryQuickEnrollCardListRequest(true);
            defaultInstance = queryQuickEnrollCardListRequest;
            queryQuickEnrollCardListRequest.initFields();
        }

        public final Parser<QueryQuickEnrollCardListRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.cplc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasCplc()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCplcBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCplcBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryQuickEnrollCardListRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryQuickEnrollCardListRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryQuickEnrollCardListRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryQuickEnrollCardListRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryQuickEnrollCardListRequest queryQuickEnrollCardListRequest) {
            return newBuilder().mergeFrom(queryQuickEnrollCardListRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryQuickEnrollCardListRequestOrBuilder {
            private int bitField0_;
            private Object cplc_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryQuickEnrollCardListRequest.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = QueryQuickEnrollCardListRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = "";
                this.bitField0_ &= -2;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryQuickEnrollCardListRequest_descriptor;
            }

            public final QueryQuickEnrollCardListRequest getDefaultInstanceForType() {
                return QueryQuickEnrollCardListRequest.getDefaultInstance();
            }

            public final QueryQuickEnrollCardListRequest build() {
                QueryQuickEnrollCardListRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryQuickEnrollCardListRequest buildPartial() {
                QueryQuickEnrollCardListRequest queryQuickEnrollCardListRequest = new QueryQuickEnrollCardListRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                queryQuickEnrollCardListRequest.cplc_ = this.cplc_;
                queryQuickEnrollCardListRequest.bitField0_ = i;
                onBuilt();
                return queryQuickEnrollCardListRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryQuickEnrollCardListRequest) {
                    return mergeFrom((QueryQuickEnrollCardListRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryQuickEnrollCardListRequest queryQuickEnrollCardListRequest) {
                if (queryQuickEnrollCardListRequest == QueryQuickEnrollCardListRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryQuickEnrollCardListRequest.hasCplc()) {
                    this.bitField0_ |= 1;
                    this.cplc_ = queryQuickEnrollCardListRequest.cplc_;
                    onChanged();
                }
                mergeUnknownFields(queryQuickEnrollCardListRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasCplc();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryQuickEnrollCardListRequest queryQuickEnrollCardListRequest;
                QueryQuickEnrollCardListRequest queryQuickEnrollCardListRequest2 = null;
                try {
                    QueryQuickEnrollCardListRequest parsePartialFrom = QueryQuickEnrollCardListRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryQuickEnrollCardListRequest = (QueryQuickEnrollCardListRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryQuickEnrollCardListRequest2 = queryQuickEnrollCardListRequest;
                }
                if (queryQuickEnrollCardListRequest2 != null) {
                    mergeFrom(queryQuickEnrollCardListRequest2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = QueryQuickEnrollCardListRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class BankCardInfo extends GeneratedMessage implements BankCardInfoOrBuilder {
        public static Parser<BankCardInfo> PARSER = new AbstractParser<BankCardInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.BankCardInfo.AnonymousClass1 */

            public final BankCardInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new BankCardInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final BankCardInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public Object cardArt_;
        public int cardElementsOption_;
        public Object cardNumber_;
        public int cardType_;
        public Object frontColor_;
        public boolean hasQrToken_;
        public CardIssuerInfo issuerInfo_;
        public Object lastDigits_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object productId_;
        public Object productName_;
        public Object serviceHotline_;
        public Object suggestion_;
        private final UnknownFieldSet unknownFields;
        public Object userId_;
        public Object userTerms_;
        public int vcStatus_;
        public Object virtualCardNumber_;
        public Object virtualCardReferenceId_;

        private BankCardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private BankCardInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static BankCardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final BankCardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private BankCardInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case 10:
                            this.bitField0_ |= 1;
                            this.aid_ = codedInputStream.readBytes();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.cardNumber_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                            continue;
                        case 34:
                            this.bitField0_ |= 8;
                            this.virtualCardNumber_ = codedInputStream.readBytes();
                            continue;
                        case 42:
                            this.bitField0_ |= 16;
                            this.lastDigits_ = codedInputStream.readBytes();
                            continue;
                        case 48:
                            this.bitField0_ |= 32;
                            this.vcStatus_ = codedInputStream.readInt32();
                            continue;
                        case 58:
                            this.bitField0_ |= 64;
                            this.userId_ = codedInputStream.readBytes();
                            continue;
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.productId_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.productName_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.userTerms_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.cardArt_ = codedInputStream.readBytes();
                            continue;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.cardType_ = codedInputStream.readInt32();
                            continue;
                        case 106:
                            CardIssuerInfo.Builder builder = (this.bitField0_ & 4096) == 4096 ? this.issuerInfo_.toBuilder() : null;
                            this.issuerInfo_ = (CardIssuerInfo) codedInputStream.readMessage(CardIssuerInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.issuerInfo_);
                                this.issuerInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 4096;
                            continue;
                        case 114:
                            this.bitField0_ |= 8192;
                            this.frontColor_ = codedInputStream.readBytes();
                            continue;
                        case 120:
                            this.bitField0_ |= 16384;
                            this.hasQrToken_ = codedInputStream.readBool();
                            continue;
                        case 130:
                            this.bitField0_ |= 32768;
                            this.serviceHotline_ = codedInputStream.readBytes();
                            continue;
                        case 138:
                            this.bitField0_ |= 65536;
                            this.suggestion_ = codedInputStream.readBytes();
                            continue;
                        case 144:
                            this.bitField0_ |= 131072;
                            this.cardElementsOption_ = codedInputStream.readInt32();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(BankCardInfo.class, Builder.class);
        }

        static {
            BankCardInfo bankCardInfo = new BankCardInfo(true);
            defaultInstance = bankCardInfo;
            bankCardInfo.initFields();
        }

        public final Parser<BankCardInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardNumber() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getCardNumber() {
            Object obj = this.cardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardNumberBytes() {
            Object obj = this.cardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardNumber() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getVirtualCardNumber() {
            Object obj = this.virtualCardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardNumberBytes() {
            Object obj = this.virtualCardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLastDigits() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getLastDigits() {
            Object obj = this.lastDigits_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.lastDigits_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLastDigitsBytes() {
            Object obj = this.lastDigits_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.lastDigits_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVcStatus() {
            return (this.bitField0_ & 32) == 32;
        }

        public final int getVcStatus() {
            return this.vcStatus_;
        }

        public final boolean hasUserId() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getUserId() {
            Object obj = this.userId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserIdBytes() {
            Object obj = this.userId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasProductId() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getProductId() {
            Object obj = this.productId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.productId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getProductIdBytes() {
            Object obj = this.productId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.productId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasProductName() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getProductName() {
            Object obj = this.productName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.productName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getProductNameBytes() {
            Object obj = this.productName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.productName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasUserTerms() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getUserTerms() {
            Object obj = this.userTerms_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userTerms_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserTermsBytes() {
            Object obj = this.userTerms_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userTerms_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardArt() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getCardArt() {
            Object obj = this.cardArt_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardArt_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardArtBytes() {
            Object obj = this.cardArt_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardArt_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public final int getCardType() {
            return this.cardType_;
        }

        public final boolean hasIssuerInfo() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public final CardIssuerInfo getIssuerInfo() {
            return this.issuerInfo_;
        }

        public final CardIssuerInfoOrBuilder getIssuerInfoOrBuilder() {
            return this.issuerInfo_;
        }

        public final boolean hasFrontColor() {
            return (this.bitField0_ & 8192) == 8192;
        }

        public final String getFrontColor() {
            Object obj = this.frontColor_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.frontColor_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getFrontColorBytes() {
            Object obj = this.frontColor_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.frontColor_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasHasQrToken() {
            return (this.bitField0_ & 16384) == 16384;
        }

        public final boolean getHasQrToken() {
            return this.hasQrToken_;
        }

        public final boolean hasServiceHotline() {
            return (this.bitField0_ & 32768) == 32768;
        }

        public final String getServiceHotline() {
            Object obj = this.serviceHotline_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.serviceHotline_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getServiceHotlineBytes() {
            Object obj = this.serviceHotline_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.serviceHotline_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSuggestion() {
            return (this.bitField0_ & 65536) == 65536;
        }

        public final String getSuggestion() {
            Object obj = this.suggestion_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.suggestion_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSuggestionBytes() {
            Object obj = this.suggestion_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.suggestion_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardElementsOption() {
            return (this.bitField0_ & 131072) == 131072;
        }

        public final int getCardElementsOption() {
            return this.cardElementsOption_;
        }

        private void initFields() {
            this.aid_ = "";
            this.cardNumber_ = "";
            this.virtualCardReferenceId_ = "";
            this.virtualCardNumber_ = "";
            this.lastDigits_ = "";
            this.vcStatus_ = 0;
            this.userId_ = "";
            this.productId_ = "";
            this.productName_ = "";
            this.userTerms_ = "";
            this.cardArt_ = "";
            this.cardType_ = 0;
            this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
            this.frontColor_ = "";
            this.hasQrToken_ = false;
            this.serviceHotline_ = "";
            this.suggestion_ = "";
            this.cardElementsOption_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasIssuerInfo() || getIssuerInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            }
            this.memoizedIsInitialized = 0;
            return false;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getAidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getCardNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getVirtualCardNumberBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(6, this.vcStatus_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getUserIdBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getProductIdBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getProductNameBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getUserTermsBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getCardArtBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeInt32(12, this.cardType_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeMessage(13, this.issuerInfo_);
            }
            if ((this.bitField0_ & 8192) == 8192) {
                codedOutputStream.writeBytes(14, getFrontColorBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                codedOutputStream.writeBool(15, this.hasQrToken_);
            }
            if ((this.bitField0_ & 32768) == 32768) {
                codedOutputStream.writeBytes(16, getServiceHotlineBytes());
            }
            if ((this.bitField0_ & 65536) == 65536) {
                codedOutputStream.writeBytes(17, getSuggestionBytes());
            }
            if ((this.bitField0_ & 131072) == 131072) {
                codedOutputStream.writeInt32(18, this.cardElementsOption_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getAidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getCardNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getVirtualCardNumberBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt32Size(6, this.vcStatus_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getUserIdBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getProductIdBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getProductNameBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getUserTermsBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(11, getCardArtBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                i2 += CodedOutputStream.computeInt32Size(12, this.cardType_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                i2 += CodedOutputStream.computeMessageSize(13, this.issuerInfo_);
            }
            if ((this.bitField0_ & 8192) == 8192) {
                i2 += CodedOutputStream.computeBytesSize(14, getFrontColorBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                i2 += CodedOutputStream.computeBoolSize(15, this.hasQrToken_);
            }
            if ((this.bitField0_ & 32768) == 32768) {
                i2 += CodedOutputStream.computeBytesSize(16, getServiceHotlineBytes());
            }
            if ((this.bitField0_ & 65536) == 65536) {
                i2 += CodedOutputStream.computeBytesSize(17, getSuggestionBytes());
            }
            if ((this.bitField0_ & 131072) == 131072) {
                i2 += CodedOutputStream.computeInt32Size(18, this.cardElementsOption_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static BankCardInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static BankCardInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static BankCardInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static BankCardInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static BankCardInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static BankCardInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static BankCardInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static BankCardInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static BankCardInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static BankCardInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(BankCardInfo bankCardInfo) {
            return newBuilder().mergeFrom(bankCardInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements BankCardInfoOrBuilder {
            private Object aid_;
            private int bitField0_;
            private Object cardArt_;
            private int cardElementsOption_;
            private Object cardNumber_;
            private int cardType_;
            private Object frontColor_;
            private boolean hasQrToken_;
            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> issuerInfoBuilder_;
            private CardIssuerInfo issuerInfo_;
            private Object lastDigits_;
            private Object productId_;
            private Object productName_;
            private Object serviceHotline_;
            private Object suggestion_;
            private Object userId_;
            private Object userTerms_;
            private int vcStatus_;
            private Object virtualCardNumber_;
            private Object virtualCardReferenceId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(BankCardInfo.class, Builder.class);
            }

            private Builder() {
                this.aid_ = "";
                this.cardNumber_ = "";
                this.virtualCardReferenceId_ = "";
                this.virtualCardNumber_ = "";
                this.lastDigits_ = "";
                this.userId_ = "";
                this.productId_ = "";
                this.productName_ = "";
                this.userTerms_ = "";
                this.cardArt_ = "";
                this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.frontColor_ = "";
                this.serviceHotline_ = "";
                this.suggestion_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.aid_ = "";
                this.cardNumber_ = "";
                this.virtualCardReferenceId_ = "";
                this.virtualCardNumber_ = "";
                this.lastDigits_ = "";
                this.userId_ = "";
                this.productId_ = "";
                this.productName_ = "";
                this.userTerms_ = "";
                this.cardArt_ = "";
                this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.frontColor_ = "";
                this.serviceHotline_ = "";
                this.suggestion_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (BankCardInfo.alwaysUseFieldBuilders) {
                    getIssuerInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.aid_ = "";
                this.bitField0_ &= -2;
                this.cardNumber_ = "";
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -5;
                this.virtualCardNumber_ = "";
                this.bitField0_ &= -9;
                this.lastDigits_ = "";
                this.bitField0_ &= -17;
                this.vcStatus_ = 0;
                this.bitField0_ &= -33;
                this.userId_ = "";
                this.bitField0_ &= -65;
                this.productId_ = "";
                this.bitField0_ &= -129;
                this.productName_ = "";
                this.bitField0_ &= -257;
                this.userTerms_ = "";
                this.bitField0_ &= -513;
                this.cardArt_ = "";
                this.bitField0_ &= -1025;
                this.cardType_ = 0;
                this.bitField0_ &= -2049;
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -4097;
                this.frontColor_ = "";
                this.bitField0_ &= -8193;
                this.hasQrToken_ = false;
                this.bitField0_ &= -16385;
                this.serviceHotline_ = "";
                this.bitField0_ &= -32769;
                this.suggestion_ = "";
                this.bitField0_ &= -65537;
                this.cardElementsOption_ = 0;
                this.bitField0_ &= -131073;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_BankCardInfo_descriptor;
            }

            public final BankCardInfo getDefaultInstanceForType() {
                return BankCardInfo.getDefaultInstance();
            }

            public final BankCardInfo build() {
                BankCardInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final BankCardInfo buildPartial() {
                BankCardInfo bankCardInfo = new BankCardInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                bankCardInfo.aid_ = this.aid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                bankCardInfo.cardNumber_ = this.cardNumber_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                bankCardInfo.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                bankCardInfo.virtualCardNumber_ = this.virtualCardNumber_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                bankCardInfo.lastDigits_ = this.lastDigits_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                bankCardInfo.vcStatus_ = this.vcStatus_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                bankCardInfo.userId_ = this.userId_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                bankCardInfo.productId_ = this.productId_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                bankCardInfo.productName_ = this.productName_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                bankCardInfo.userTerms_ = this.userTerms_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                bankCardInfo.cardArt_ = this.cardArt_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                bankCardInfo.cardType_ = this.cardType_;
                if ((i & 4096) == 4096) {
                    i2 |= 4096;
                }
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    bankCardInfo.issuerInfo_ = this.issuerInfo_;
                } else {
                    bankCardInfo.issuerInfo_ = singleFieldBuilder.build();
                }
                if ((i & 8192) == 8192) {
                    i2 |= 8192;
                }
                bankCardInfo.frontColor_ = this.frontColor_;
                if ((i & 16384) == 16384) {
                    i2 |= 16384;
                }
                bankCardInfo.hasQrToken_ = this.hasQrToken_;
                if ((32768 & i) == 32768) {
                    i2 |= 32768;
                }
                bankCardInfo.serviceHotline_ = this.serviceHotline_;
                if ((65536 & i) == 65536) {
                    i2 |= 65536;
                }
                bankCardInfo.suggestion_ = this.suggestion_;
                if ((i & 131072) == 131072) {
                    i2 |= 131072;
                }
                bankCardInfo.cardElementsOption_ = this.cardElementsOption_;
                bankCardInfo.bitField0_ = i2;
                onBuilt();
                return bankCardInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof BankCardInfo) {
                    return mergeFrom((BankCardInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(BankCardInfo bankCardInfo) {
                if (bankCardInfo == BankCardInfo.getDefaultInstance()) {
                    return this;
                }
                if (bankCardInfo.hasAid()) {
                    this.bitField0_ |= 1;
                    this.aid_ = bankCardInfo.aid_;
                    onChanged();
                }
                if (bankCardInfo.hasCardNumber()) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = bankCardInfo.cardNumber_;
                    onChanged();
                }
                if (bankCardInfo.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = bankCardInfo.virtualCardReferenceId_;
                    onChanged();
                }
                if (bankCardInfo.hasVirtualCardNumber()) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = bankCardInfo.virtualCardNumber_;
                    onChanged();
                }
                if (bankCardInfo.hasLastDigits()) {
                    this.bitField0_ |= 16;
                    this.lastDigits_ = bankCardInfo.lastDigits_;
                    onChanged();
                }
                if (bankCardInfo.hasVcStatus()) {
                    setVcStatus(bankCardInfo.getVcStatus());
                }
                if (bankCardInfo.hasUserId()) {
                    this.bitField0_ |= 64;
                    this.userId_ = bankCardInfo.userId_;
                    onChanged();
                }
                if (bankCardInfo.hasProductId()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.productId_ = bankCardInfo.productId_;
                    onChanged();
                }
                if (bankCardInfo.hasProductName()) {
                    this.bitField0_ |= 256;
                    this.productName_ = bankCardInfo.productName_;
                    onChanged();
                }
                if (bankCardInfo.hasUserTerms()) {
                    this.bitField0_ |= 512;
                    this.userTerms_ = bankCardInfo.userTerms_;
                    onChanged();
                }
                if (bankCardInfo.hasCardArt()) {
                    this.bitField0_ |= 1024;
                    this.cardArt_ = bankCardInfo.cardArt_;
                    onChanged();
                }
                if (bankCardInfo.hasCardType()) {
                    setCardType(bankCardInfo.getCardType());
                }
                if (bankCardInfo.hasIssuerInfo()) {
                    mergeIssuerInfo(bankCardInfo.getIssuerInfo());
                }
                if (bankCardInfo.hasFrontColor()) {
                    this.bitField0_ |= 8192;
                    this.frontColor_ = bankCardInfo.frontColor_;
                    onChanged();
                }
                if (bankCardInfo.hasHasQrToken()) {
                    setHasQrToken(bankCardInfo.getHasQrToken());
                }
                if (bankCardInfo.hasServiceHotline()) {
                    this.bitField0_ |= 32768;
                    this.serviceHotline_ = bankCardInfo.serviceHotline_;
                    onChanged();
                }
                if (bankCardInfo.hasSuggestion()) {
                    this.bitField0_ |= 65536;
                    this.suggestion_ = bankCardInfo.suggestion_;
                    onChanged();
                }
                if (bankCardInfo.hasCardElementsOption()) {
                    setCardElementsOption(bankCardInfo.getCardElementsOption());
                }
                mergeUnknownFields(bankCardInfo.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return !hasIssuerInfo() || getIssuerInfo().isInitialized();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                BankCardInfo bankCardInfo;
                BankCardInfo bankCardInfo2 = null;
                try {
                    BankCardInfo parsePartialFrom = BankCardInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    bankCardInfo = (BankCardInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    bankCardInfo2 = bankCardInfo;
                }
                if (bankCardInfo2 != null) {
                    mergeFrom(bankCardInfo2);
                }
                throw th;
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -2;
                this.aid_ = BankCardInfo.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardNumber() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getCardNumber() {
                Object obj = this.cardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardNumberBytes() {
                Object obj = this.cardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardNumber() {
                this.bitField0_ &= -3;
                this.cardNumber_ = BankCardInfo.getDefaultInstance().getCardNumber();
                onChanged();
                return this;
            }

            public final Builder setCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -5;
                this.virtualCardReferenceId_ = BankCardInfo.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardNumber() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getVirtualCardNumber() {
                Object obj = this.virtualCardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardNumberBytes() {
                Object obj = this.virtualCardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardNumber() {
                this.bitField0_ &= -9;
                this.virtualCardNumber_ = BankCardInfo.getDefaultInstance().getVirtualCardNumber();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLastDigits() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getLastDigits() {
                Object obj = this.lastDigits_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.lastDigits_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLastDigitsBytes() {
                Object obj = this.lastDigits_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.lastDigits_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLastDigits(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.lastDigits_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLastDigits() {
                this.bitField0_ &= -17;
                this.lastDigits_ = BankCardInfo.getDefaultInstance().getLastDigits();
                onChanged();
                return this;
            }

            public final Builder setLastDigitsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.lastDigits_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVcStatus() {
                return (this.bitField0_ & 32) == 32;
            }

            public final int getVcStatus() {
                return this.vcStatus_;
            }

            public final Builder setVcStatus(int i) {
                this.bitField0_ |= 32;
                this.vcStatus_ = i;
                onChanged();
                return this;
            }

            public final Builder clearVcStatus() {
                this.bitField0_ &= -33;
                this.vcStatus_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasUserId() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getUserId() {
                Object obj = this.userId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserIdBytes() {
                Object obj = this.userId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUserId(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.userId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUserId() {
                this.bitField0_ &= -65;
                this.userId_ = BankCardInfo.getDefaultInstance().getUserId();
                onChanged();
                return this;
            }

            public final Builder setUserIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.userId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasProductId() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getProductId() {
                Object obj = this.productId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.productId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getProductIdBytes() {
                Object obj = this.productId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.productId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setProductId(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.productId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearProductId() {
                this.bitField0_ &= -129;
                this.productId_ = BankCardInfo.getDefaultInstance().getProductId();
                onChanged();
                return this;
            }

            public final Builder setProductIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.productId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasProductName() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getProductName() {
                Object obj = this.productName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.productName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getProductNameBytes() {
                Object obj = this.productName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.productName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setProductName(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.productName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearProductName() {
                this.bitField0_ &= -257;
                this.productName_ = BankCardInfo.getDefaultInstance().getProductName();
                onChanged();
                return this;
            }

            public final Builder setProductNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.productName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasUserTerms() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getUserTerms() {
                Object obj = this.userTerms_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userTerms_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserTermsBytes() {
                Object obj = this.userTerms_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userTerms_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUserTerms(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.userTerms_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUserTerms() {
                this.bitField0_ &= -513;
                this.userTerms_ = BankCardInfo.getDefaultInstance().getUserTerms();
                onChanged();
                return this;
            }

            public final Builder setUserTermsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.userTerms_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardArt() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getCardArt() {
                Object obj = this.cardArt_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardArt_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardArtBytes() {
                Object obj = this.cardArt_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardArt_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardArt(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.cardArt_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardArt() {
                this.bitField0_ &= -1025;
                this.cardArt_ = BankCardInfo.getDefaultInstance().getCardArt();
                onChanged();
                return this;
            }

            public final Builder setCardArtBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.cardArt_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public final int getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(int i) {
                this.bitField0_ |= 2048;
                this.cardType_ = i;
                onChanged();
                return this;
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -2049;
                this.cardType_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasIssuerInfo() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public final CardIssuerInfo getIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.issuerInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(cardIssuerInfo);
                } else if (cardIssuerInfo != null) {
                    this.issuerInfo_ = cardIssuerInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4096;
                return this;
            }

            public final Builder setIssuerInfo(CardIssuerInfo.Builder builder) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.issuerInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 4096;
                return this;
            }

            public final Builder mergeIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 4096) != 4096 || this.issuerInfo_ == CardIssuerInfo.getDefaultInstance()) {
                        this.issuerInfo_ = cardIssuerInfo;
                    } else {
                        this.issuerInfo_ = CardIssuerInfo.newBuilder(this.issuerInfo_).mergeFrom(cardIssuerInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(cardIssuerInfo);
                }
                this.bitField0_ |= 4096;
                return this;
            }

            public final Builder clearIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.issuerInfo_ = CardIssuerInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -4097;
                return this;
            }

            public final CardIssuerInfo.Builder getIssuerInfoBuilder() {
                this.bitField0_ |= 4096;
                onChanged();
                return getIssuerInfoFieldBuilder().getBuilder();
            }

            public final CardIssuerInfoOrBuilder getIssuerInfoOrBuilder() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.issuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.issuerInfo_;
            }

            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> getIssuerInfoFieldBuilder() {
                if (this.issuerInfoBuilder_ == null) {
                    this.issuerInfoBuilder_ = new SingleFieldBuilder<>(this.issuerInfo_, getParentForChildren(), isClean());
                    this.issuerInfo_ = null;
                }
                return this.issuerInfoBuilder_;
            }

            public final boolean hasFrontColor() {
                return (this.bitField0_ & 8192) == 8192;
            }

            public final String getFrontColor() {
                Object obj = this.frontColor_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.frontColor_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getFrontColorBytes() {
                Object obj = this.frontColor_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.frontColor_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setFrontColor(String str) {
                if (str != null) {
                    this.bitField0_ |= 8192;
                    this.frontColor_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearFrontColor() {
                this.bitField0_ &= -8193;
                this.frontColor_ = BankCardInfo.getDefaultInstance().getFrontColor();
                onChanged();
                return this;
            }

            public final Builder setFrontColorBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8192;
                    this.frontColor_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasHasQrToken() {
                return (this.bitField0_ & 16384) == 16384;
            }

            public final boolean getHasQrToken() {
                return this.hasQrToken_;
            }

            public final Builder setHasQrToken(boolean z) {
                this.bitField0_ |= 16384;
                this.hasQrToken_ = z;
                onChanged();
                return this;
            }

            public final Builder clearHasQrToken() {
                this.bitField0_ &= -16385;
                this.hasQrToken_ = false;
                onChanged();
                return this;
            }

            public final boolean hasServiceHotline() {
                return (this.bitField0_ & 32768) == 32768;
            }

            public final String getServiceHotline() {
                Object obj = this.serviceHotline_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.serviceHotline_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getServiceHotlineBytes() {
                Object obj = this.serviceHotline_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.serviceHotline_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setServiceHotline(String str) {
                if (str != null) {
                    this.bitField0_ |= 32768;
                    this.serviceHotline_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearServiceHotline() {
                this.bitField0_ &= -32769;
                this.serviceHotline_ = BankCardInfo.getDefaultInstance().getServiceHotline();
                onChanged();
                return this;
            }

            public final Builder setServiceHotlineBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32768;
                    this.serviceHotline_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSuggestion() {
                return (this.bitField0_ & 65536) == 65536;
            }

            public final String getSuggestion() {
                Object obj = this.suggestion_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.suggestion_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSuggestionBytes() {
                Object obj = this.suggestion_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.suggestion_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSuggestion(String str) {
                if (str != null) {
                    this.bitField0_ |= 65536;
                    this.suggestion_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSuggestion() {
                this.bitField0_ &= -65537;
                this.suggestion_ = BankCardInfo.getDefaultInstance().getSuggestion();
                onChanged();
                return this;
            }

            public final Builder setSuggestionBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 65536;
                    this.suggestion_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardElementsOption() {
                return (this.bitField0_ & 131072) == 131072;
            }

            public final int getCardElementsOption() {
                return this.cardElementsOption_;
            }

            public final Builder setCardElementsOption(int i) {
                this.bitField0_ |= 131072;
                this.cardElementsOption_ = i;
                onChanged();
                return this;
            }

            public final Builder clearCardElementsOption() {
                this.bitField0_ &= -131073;
                this.cardElementsOption_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class QueryBankCardInfoResponse extends GeneratedMessage implements QueryBankCardInfoResponseOrBuilder {
        public static Parser<QueryBankCardInfoResponse> PARSER = new AbstractParser<QueryBankCardInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryBankCardInfoResponse.AnonymousClass1 */

            public final QueryBankCardInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryBankCardInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryBankCardInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public List<BankCardInfo> bankCardInfoList_;
        public int bitField0_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private QueryBankCardInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryBankCardInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryBankCardInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryBankCardInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryBankCardInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.bankCardInfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.bankCardInfoList_.add(codedInputStream.readMessage(BankCardInfo.PARSER, extensionRegistryLite));
                        } else if (readTag == 26) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.bankCardInfoList_ = Collections.unmodifiableList(this.bankCardInfoList_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.bankCardInfoList_ = Collections.unmodifiableList(this.bankCardInfoList_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryBankCardInfoResponse.class, Builder.class);
        }

        static {
            QueryBankCardInfoResponse queryBankCardInfoResponse = new QueryBankCardInfoResponse(true);
            defaultInstance = queryBankCardInfoResponse;
            queryBankCardInfoResponse.initFields();
        }

        public final Parser<QueryBankCardInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final List<BankCardInfo> getBankCardInfoListList() {
            return this.bankCardInfoList_;
        }

        public final List<? extends BankCardInfoOrBuilder> getBankCardInfoListOrBuilderList() {
            return this.bankCardInfoList_;
        }

        public final int getBankCardInfoListCount() {
            return this.bankCardInfoList_.size();
        }

        public final BankCardInfo getBankCardInfoList(int i) {
            return this.bankCardInfoList_.get(i);
        }

        public final BankCardInfoOrBuilder getBankCardInfoListOrBuilder(int i) {
            return this.bankCardInfoList_.get(i);
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.bankCardInfoList_ = Collections.emptyList();
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            for (int i = 0; i < getBankCardInfoListCount(); i++) {
                if (!getBankCardInfoList(i).isInitialized()) {
                    this.memoizedIsInitialized = 0;
                    return false;
                }
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            for (int i = 0; i < this.bankCardInfoList_.size(); i++) {
                codedOutputStream.writeMessage(2, this.bankCardInfoList_.get(i));
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            for (int i2 = 0; i2 < this.bankCardInfoList_.size(); i2++) {
                computeInt32Size += CodedOutputStream.computeMessageSize(2, this.bankCardInfoList_.get(i2));
            }
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = computeInt32Size + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryBankCardInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryBankCardInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryBankCardInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryBankCardInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryBankCardInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryBankCardInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryBankCardInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryBankCardInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryBankCardInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryBankCardInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryBankCardInfoResponse queryBankCardInfoResponse) {
            return newBuilder().mergeFrom(queryBankCardInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryBankCardInfoResponseOrBuilder {
            private RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> bankCardInfoListBuilder_;
            private List<BankCardInfo> bankCardInfoList_;
            private int bitField0_;
            private Object errorDesc_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryBankCardInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.bankCardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.bankCardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (QueryBankCardInfoResponse.alwaysUseFieldBuilders) {
                    getBankCardInfoListFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.bankCardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryBankCardInfoResponse_descriptor;
            }

            public final QueryBankCardInfoResponse getDefaultInstanceForType() {
                return QueryBankCardInfoResponse.getDefaultInstance();
            }

            public final QueryBankCardInfoResponse build() {
                QueryBankCardInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryBankCardInfoResponse buildPartial() {
                QueryBankCardInfoResponse queryBankCardInfoResponse = new QueryBankCardInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryBankCardInfoResponse.result_ = this.result_;
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.bankCardInfoList_ = Collections.unmodifiableList(this.bankCardInfoList_);
                        this.bitField0_ &= -3;
                    }
                    queryBankCardInfoResponse.bankCardInfoList_ = this.bankCardInfoList_;
                } else {
                    queryBankCardInfoResponse.bankCardInfoList_ = repeatedFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 2;
                }
                queryBankCardInfoResponse.errorDesc_ = this.errorDesc_;
                queryBankCardInfoResponse.bitField0_ = i2;
                onBuilt();
                return queryBankCardInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryBankCardInfoResponse) {
                    return mergeFrom((QueryBankCardInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryBankCardInfoResponse queryBankCardInfoResponse) {
                if (queryBankCardInfoResponse == QueryBankCardInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (queryBankCardInfoResponse.hasResult()) {
                    setResult(queryBankCardInfoResponse.getResult());
                }
                if (this.bankCardInfoListBuilder_ == null) {
                    if (!queryBankCardInfoResponse.bankCardInfoList_.isEmpty()) {
                        if (this.bankCardInfoList_.isEmpty()) {
                            this.bankCardInfoList_ = queryBankCardInfoResponse.bankCardInfoList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureBankCardInfoListIsMutable();
                            this.bankCardInfoList_.addAll(queryBankCardInfoResponse.bankCardInfoList_);
                        }
                        onChanged();
                    }
                } else if (!queryBankCardInfoResponse.bankCardInfoList_.isEmpty()) {
                    if (this.bankCardInfoListBuilder_.isEmpty()) {
                        this.bankCardInfoListBuilder_.dispose();
                        RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = null;
                        this.bankCardInfoListBuilder_ = null;
                        this.bankCardInfoList_ = queryBankCardInfoResponse.bankCardInfoList_;
                        this.bitField0_ &= -3;
                        if (QueryBankCardInfoResponse.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getBankCardInfoListFieldBuilder();
                        }
                        this.bankCardInfoListBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.bankCardInfoListBuilder_.addAllMessages(queryBankCardInfoResponse.bankCardInfoList_);
                    }
                }
                if (queryBankCardInfoResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = queryBankCardInfoResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(queryBankCardInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                for (int i = 0; i < getBankCardInfoListCount(); i++) {
                    if (!getBankCardInfoList(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryBankCardInfoResponse queryBankCardInfoResponse;
                QueryBankCardInfoResponse queryBankCardInfoResponse2 = null;
                try {
                    QueryBankCardInfoResponse parsePartialFrom = QueryBankCardInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryBankCardInfoResponse = (QueryBankCardInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryBankCardInfoResponse2 = queryBankCardInfoResponse;
                }
                if (queryBankCardInfoResponse2 != null) {
                    mergeFrom(queryBankCardInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            private void ensureBankCardInfoListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.bankCardInfoList_ = new ArrayList(this.bankCardInfoList_);
                    this.bitField0_ |= 2;
                }
            }

            public final List<BankCardInfo> getBankCardInfoListList() {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.bankCardInfoList_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getBankCardInfoListCount() {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.bankCardInfoList_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final BankCardInfo getBankCardInfoList(int i) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.bankCardInfoList_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setBankCardInfoList(int i, BankCardInfo bankCardInfo) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, bankCardInfo);
                } else if (bankCardInfo != null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.set(i, bankCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setBankCardInfoList(int i, BankCardInfo.Builder builder) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addBankCardInfoList(BankCardInfo bankCardInfo) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(bankCardInfo);
                } else if (bankCardInfo != null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.add(bankCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addBankCardInfoList(int i, BankCardInfo bankCardInfo) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, bankCardInfo);
                } else if (bankCardInfo != null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.add(i, bankCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addBankCardInfoList(BankCardInfo.Builder builder) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addBankCardInfoList(int i, BankCardInfo.Builder builder) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$BankCardInfo>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$BankCardInfo>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllBankCardInfoList(Iterable<? extends BankCardInfo> iterable) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureBankCardInfoListIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.bankCardInfoList_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearBankCardInfoList() {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.bankCardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeBankCardInfoList(int i) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureBankCardInfoListIsMutable();
                    this.bankCardInfoList_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final BankCardInfo.Builder getBankCardInfoListBuilder(int i) {
                return getBankCardInfoListFieldBuilder().getBuilder(i);
            }

            public final BankCardInfoOrBuilder getBankCardInfoListOrBuilder(int i) {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.bankCardInfoList_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends BankCardInfoOrBuilder> getBankCardInfoListOrBuilderList() {
                RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> repeatedFieldBuilder = this.bankCardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.bankCardInfoList_);
            }

            public final BankCardInfo.Builder addBankCardInfoListBuilder() {
                return getBankCardInfoListFieldBuilder().addBuilder(BankCardInfo.getDefaultInstance());
            }

            public final BankCardInfo.Builder addBankCardInfoListBuilder(int i) {
                return getBankCardInfoListFieldBuilder().addBuilder(i, BankCardInfo.getDefaultInstance());
            }

            public final List<BankCardInfo.Builder> getBankCardInfoListBuilderList() {
                return getBankCardInfoListFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<BankCardInfo, BankCardInfo.Builder, BankCardInfoOrBuilder> getBankCardInfoListFieldBuilder() {
                if (this.bankCardInfoListBuilder_ == null) {
                    this.bankCardInfoListBuilder_ = new RepeatedFieldBuilder<>(this.bankCardInfoList_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.bankCardInfoList_ = null;
                }
                return this.bankCardInfoListBuilder_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = QueryBankCardInfoResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class CommonResponse extends GeneratedMessage implements CommonResponseOrBuilder {
        public static Parser<CommonResponse> PARSER = new AbstractParser<CommonResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CommonResponse.AnonymousClass1 */

            public final CommonResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new CommonResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final CommonResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object description_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private CommonResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CommonResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CommonResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final CommonResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CommonResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.description_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CommonResponse.class, Builder.class);
        }

        static {
            CommonResponse commonResponse = new CommonResponse(true);
            defaultInstance = commonResponse;
            commonResponse.initFields();
        }

        public final Parser<CommonResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasDescription() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getDescription() {
            Object obj = this.description_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.description_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDescriptionBytes() {
            Object obj = this.description_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.description_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.description_ = "";
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getDescriptionBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getDescriptionBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CommonResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static CommonResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static CommonResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static CommonResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static CommonResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static CommonResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static CommonResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static CommonResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static CommonResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static CommonResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CommonResponse commonResponse) {
            return newBuilder().mergeFrom(commonResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements CommonResponseOrBuilder {
            private int bitField0_;
            private Object description_;
            private Object errorDesc_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CommonResponse.class, Builder.class);
            }

            private Builder() {
                this.description_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.description_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = CommonResponse.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.description_ = "";
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonResponse_descriptor;
            }

            public final CommonResponse getDefaultInstanceForType() {
                return CommonResponse.getDefaultInstance();
            }

            public final CommonResponse build() {
                CommonResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final CommonResponse buildPartial() {
                CommonResponse commonResponse = new CommonResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                commonResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                commonResponse.description_ = this.description_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                commonResponse.errorDesc_ = this.errorDesc_;
                commonResponse.bitField0_ = i2;
                onBuilt();
                return commonResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof CommonResponse) {
                    return mergeFrom((CommonResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(CommonResponse commonResponse) {
                if (commonResponse == CommonResponse.getDefaultInstance()) {
                    return this;
                }
                if (commonResponse.hasResult()) {
                    setResult(commonResponse.getResult());
                }
                if (commonResponse.hasDescription()) {
                    this.bitField0_ |= 2;
                    this.description_ = commonResponse.description_;
                    onChanged();
                }
                if (commonResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = commonResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(commonResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                CommonResponse commonResponse;
                CommonResponse commonResponse2 = null;
                try {
                    CommonResponse parsePartialFrom = CommonResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    commonResponse = (CommonResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    commonResponse2 = commonResponse;
                }
                if (commonResponse2 != null) {
                    mergeFrom(commonResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasDescription() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getDescription() {
                Object obj = this.description_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.description_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDescriptionBytes() {
                Object obj = this.description_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.description_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDescription(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.description_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDescription() {
                this.bitField0_ &= -3;
                this.description_ = CommonResponse.getDefaultInstance().getDescription();
                onChanged();
                return this;
            }

            public final Builder setDescriptionBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.description_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = CommonResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class SaveAppKeyRequest extends GeneratedMessage implements SaveAppKeyRequestOrBuilder {
        public static Parser<SaveAppKeyRequest> PARSER = new AbstractParser<SaveAppKeyRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.SaveAppKeyRequest.AnonymousClass1 */

            public final SaveAppKeyRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new SaveAppKeyRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final SaveAppKeyRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object appName_;
        public int bitField0_;
        public Object clientSign_;
        public Object cplc_;
        public Object cpuModel_;
        public Object deviceId_;
        public Object deviceModel_;
        public Object keyAlg_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object pkX_;
        public Object pkY_;
        public Object sessionId_;
        public Object tzId_;
        private final UnknownFieldSet unknownFields;

        private SaveAppKeyRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private SaveAppKeyRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static SaveAppKeyRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final SaveAppKeyRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private SaveAppKeyRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case 10:
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.appName_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.cpuModel_ = codedInputStream.readBytes();
                            continue;
                        case 34:
                            this.bitField0_ |= 8;
                            this.tzId_ = codedInputStream.readBytes();
                            continue;
                        case 42:
                            this.bitField0_ |= 16;
                            this.keyAlg_ = codedInputStream.readBytes();
                            continue;
                        case 50:
                            this.bitField0_ |= 32;
                            this.pkX_ = codedInputStream.readBytes();
                            continue;
                        case 58:
                            this.bitField0_ |= 64;
                            this.pkY_ = codedInputStream.readBytes();
                            continue;
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.clientSign_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.deviceModel_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.deviceId_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.cplc_ = codedInputStream.readBytes();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SaveAppKeyRequest.class, Builder.class);
        }

        static {
            SaveAppKeyRequest saveAppKeyRequest = new SaveAppKeyRequest(true);
            defaultInstance = saveAppKeyRequest;
            saveAppKeyRequest.initFields();
        }

        public final Parser<SaveAppKeyRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAppName() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAppName() {
            Object obj = this.appName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.appName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAppNameBytes() {
            Object obj = this.appName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.appName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCpuModel() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getCpuModel() {
            Object obj = this.cpuModel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cpuModel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCpuModelBytes() {
            Object obj = this.cpuModel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cpuModel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasTzId() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getTzId() {
            Object obj = this.tzId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.tzId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getTzIdBytes() {
            Object obj = this.tzId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.tzId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasKeyAlg() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getKeyAlg() {
            Object obj = this.keyAlg_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.keyAlg_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getKeyAlgBytes() {
            Object obj = this.keyAlg_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.keyAlg_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPkX() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getPkX() {
            Object obj = this.pkX_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.pkX_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPkXBytes() {
            Object obj = this.pkX_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pkX_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPkY() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getPkY() {
            Object obj = this.pkY_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.pkY_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPkYBytes() {
            Object obj = this.pkY_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pkY_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasClientSign() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getClientSign() {
            Object obj = this.clientSign_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.clientSign_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getClientSignBytes() {
            Object obj = this.clientSign_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.clientSign_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceModel() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getDeviceModel() {
            Object obj = this.deviceModel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceModel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceModelBytes() {
            Object obj = this.deviceModel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceModel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.appName_ = "";
            this.cpuModel_ = "";
            this.tzId_ = "";
            this.keyAlg_ = "";
            this.pkX_ = "";
            this.pkY_ = "";
            this.clientSign_ = "";
            this.deviceModel_ = "";
            this.deviceId_ = "";
            this.cplc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAppNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getCpuModelBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getTzIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getKeyAlgBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getPkXBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getPkYBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getClientSignBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getDeviceModelBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getCplcBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAppNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getCpuModelBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getTzIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getKeyAlgBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getPkXBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getPkYBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getClientSignBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getDeviceModelBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(11, getCplcBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static SaveAppKeyRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static SaveAppKeyRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static SaveAppKeyRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static SaveAppKeyRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static SaveAppKeyRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static SaveAppKeyRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static SaveAppKeyRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static SaveAppKeyRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static SaveAppKeyRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static SaveAppKeyRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(SaveAppKeyRequest saveAppKeyRequest) {
            return newBuilder().mergeFrom(saveAppKeyRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements SaveAppKeyRequestOrBuilder {
            private Object appName_;
            private int bitField0_;
            private Object clientSign_;
            private Object cplc_;
            private Object cpuModel_;
            private Object deviceId_;
            private Object deviceModel_;
            private Object keyAlg_;
            private Object pkX_;
            private Object pkY_;
            private Object sessionId_;
            private Object tzId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(SaveAppKeyRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.appName_ = "";
                this.cpuModel_ = "";
                this.tzId_ = "";
                this.keyAlg_ = "";
                this.pkX_ = "";
                this.pkY_ = "";
                this.clientSign_ = "";
                this.deviceModel_ = "";
                this.deviceId_ = "";
                this.cplc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.appName_ = "";
                this.cpuModel_ = "";
                this.tzId_ = "";
                this.keyAlg_ = "";
                this.pkX_ = "";
                this.pkY_ = "";
                this.clientSign_ = "";
                this.deviceModel_ = "";
                this.deviceId_ = "";
                this.cplc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = SaveAppKeyRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.appName_ = "";
                this.bitField0_ &= -3;
                this.cpuModel_ = "";
                this.bitField0_ &= -5;
                this.tzId_ = "";
                this.bitField0_ &= -9;
                this.keyAlg_ = "";
                this.bitField0_ &= -17;
                this.pkX_ = "";
                this.bitField0_ &= -33;
                this.pkY_ = "";
                this.bitField0_ &= -65;
                this.clientSign_ = "";
                this.bitField0_ &= -129;
                this.deviceModel_ = "";
                this.bitField0_ &= -257;
                this.deviceId_ = "";
                this.bitField0_ &= -513;
                this.cplc_ = "";
                this.bitField0_ &= -1025;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_SaveAppKeyRequest_descriptor;
            }

            public final SaveAppKeyRequest getDefaultInstanceForType() {
                return SaveAppKeyRequest.getDefaultInstance();
            }

            public final SaveAppKeyRequest build() {
                SaveAppKeyRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final SaveAppKeyRequest buildPartial() {
                SaveAppKeyRequest saveAppKeyRequest = new SaveAppKeyRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                saveAppKeyRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                saveAppKeyRequest.appName_ = this.appName_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                saveAppKeyRequest.cpuModel_ = this.cpuModel_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                saveAppKeyRequest.tzId_ = this.tzId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                saveAppKeyRequest.keyAlg_ = this.keyAlg_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                saveAppKeyRequest.pkX_ = this.pkX_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                saveAppKeyRequest.pkY_ = this.pkY_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                saveAppKeyRequest.clientSign_ = this.clientSign_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                saveAppKeyRequest.deviceModel_ = this.deviceModel_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                saveAppKeyRequest.deviceId_ = this.deviceId_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                saveAppKeyRequest.cplc_ = this.cplc_;
                saveAppKeyRequest.bitField0_ = i2;
                onBuilt();
                return saveAppKeyRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof SaveAppKeyRequest) {
                    return mergeFrom((SaveAppKeyRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(SaveAppKeyRequest saveAppKeyRequest) {
                if (saveAppKeyRequest == SaveAppKeyRequest.getDefaultInstance()) {
                    return this;
                }
                if (saveAppKeyRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = saveAppKeyRequest.sessionId_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasAppName()) {
                    this.bitField0_ |= 2;
                    this.appName_ = saveAppKeyRequest.appName_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasCpuModel()) {
                    this.bitField0_ |= 4;
                    this.cpuModel_ = saveAppKeyRequest.cpuModel_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasTzId()) {
                    this.bitField0_ |= 8;
                    this.tzId_ = saveAppKeyRequest.tzId_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasKeyAlg()) {
                    this.bitField0_ |= 16;
                    this.keyAlg_ = saveAppKeyRequest.keyAlg_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasPkX()) {
                    this.bitField0_ |= 32;
                    this.pkX_ = saveAppKeyRequest.pkX_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasPkY()) {
                    this.bitField0_ |= 64;
                    this.pkY_ = saveAppKeyRequest.pkY_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasClientSign()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.clientSign_ = saveAppKeyRequest.clientSign_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasDeviceModel()) {
                    this.bitField0_ |= 256;
                    this.deviceModel_ = saveAppKeyRequest.deviceModel_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasDeviceId()) {
                    this.bitField0_ |= 512;
                    this.deviceId_ = saveAppKeyRequest.deviceId_;
                    onChanged();
                }
                if (saveAppKeyRequest.hasCplc()) {
                    this.bitField0_ |= 1024;
                    this.cplc_ = saveAppKeyRequest.cplc_;
                    onChanged();
                }
                mergeUnknownFields(saveAppKeyRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasSessionId();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                SaveAppKeyRequest saveAppKeyRequest;
                SaveAppKeyRequest saveAppKeyRequest2 = null;
                try {
                    SaveAppKeyRequest parsePartialFrom = SaveAppKeyRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    saveAppKeyRequest = (SaveAppKeyRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    saveAppKeyRequest2 = saveAppKeyRequest;
                }
                if (saveAppKeyRequest2 != null) {
                    mergeFrom(saveAppKeyRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = SaveAppKeyRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAppName() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAppName() {
                Object obj = this.appName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.appName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAppNameBytes() {
                Object obj = this.appName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.appName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAppName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.appName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAppName() {
                this.bitField0_ &= -3;
                this.appName_ = SaveAppKeyRequest.getDefaultInstance().getAppName();
                onChanged();
                return this;
            }

            public final Builder setAppNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.appName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCpuModel() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getCpuModel() {
                Object obj = this.cpuModel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cpuModel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCpuModelBytes() {
                Object obj = this.cpuModel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cpuModel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCpuModel(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.cpuModel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCpuModel() {
                this.bitField0_ &= -5;
                this.cpuModel_ = SaveAppKeyRequest.getDefaultInstance().getCpuModel();
                onChanged();
                return this;
            }

            public final Builder setCpuModelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.cpuModel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasTzId() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getTzId() {
                Object obj = this.tzId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.tzId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getTzIdBytes() {
                Object obj = this.tzId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.tzId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setTzId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.tzId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearTzId() {
                this.bitField0_ &= -9;
                this.tzId_ = SaveAppKeyRequest.getDefaultInstance().getTzId();
                onChanged();
                return this;
            }

            public final Builder setTzIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.tzId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasKeyAlg() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getKeyAlg() {
                Object obj = this.keyAlg_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.keyAlg_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getKeyAlgBytes() {
                Object obj = this.keyAlg_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.keyAlg_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setKeyAlg(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.keyAlg_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearKeyAlg() {
                this.bitField0_ &= -17;
                this.keyAlg_ = SaveAppKeyRequest.getDefaultInstance().getKeyAlg();
                onChanged();
                return this;
            }

            public final Builder setKeyAlgBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.keyAlg_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPkX() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getPkX() {
                Object obj = this.pkX_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pkX_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPkXBytes() {
                Object obj = this.pkX_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.pkX_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPkX(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.pkX_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPkX() {
                this.bitField0_ &= -33;
                this.pkX_ = SaveAppKeyRequest.getDefaultInstance().getPkX();
                onChanged();
                return this;
            }

            public final Builder setPkXBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.pkX_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPkY() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getPkY() {
                Object obj = this.pkY_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pkY_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPkYBytes() {
                Object obj = this.pkY_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.pkY_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPkY(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.pkY_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPkY() {
                this.bitField0_ &= -65;
                this.pkY_ = SaveAppKeyRequest.getDefaultInstance().getPkY();
                onChanged();
                return this;
            }

            public final Builder setPkYBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.pkY_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasClientSign() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getClientSign() {
                Object obj = this.clientSign_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.clientSign_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getClientSignBytes() {
                Object obj = this.clientSign_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.clientSign_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setClientSign(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.clientSign_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearClientSign() {
                this.bitField0_ &= -129;
                this.clientSign_ = SaveAppKeyRequest.getDefaultInstance().getClientSign();
                onChanged();
                return this;
            }

            public final Builder setClientSignBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.clientSign_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceModel() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getDeviceModel() {
                Object obj = this.deviceModel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceModel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceModelBytes() {
                Object obj = this.deviceModel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceModel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceModel(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.deviceModel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceModel() {
                this.bitField0_ &= -257;
                this.deviceModel_ = SaveAppKeyRequest.getDefaultInstance().getDeviceModel();
                onChanged();
                return this;
            }

            public final Builder setDeviceModelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.deviceModel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -513;
                this.deviceId_ = SaveAppKeyRequest.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -1025;
                this.cplc_ = SaveAppKeyRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class CardIssuerInfo extends GeneratedMessage implements CardIssuerInfoOrBuilder {
        public static Parser<CardIssuerInfo> PARSER = new AbstractParser<CardIssuerInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CardIssuerInfo.AnonymousClass1 */

            public final CardIssuerInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new CardIssuerInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final CardIssuerInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object bankName_;
        public Object bgImage_;
        public int bitField0_;
        public CardIssueChannel cardIssueChannel_;
        public Object contactNumber_;
        public Object hotline_;
        public Object issuerId_;
        public Object logoUrl_;
        public Object logoWithBankNameUrl_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private CardIssuerInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CardIssuerInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CardIssuerInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final CardIssuerInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CardIssuerInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            int readEnum = codedInputStream.readEnum();
                            CardIssueChannel valueOf = CardIssueChannel.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(1, readEnum);
                            } else {
                                this.bitField0_ |= 1;
                                this.cardIssueChannel_ = valueOf;
                            }
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.issuerId_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.bankName_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.logoUrl_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.logoWithBankNameUrl_ = codedInputStream.readBytes();
                        } else if (readTag == 50) {
                            this.bitField0_ |= 32;
                            this.contactNumber_ = codedInputStream.readBytes();
                        } else if (readTag == 58) {
                            this.bitField0_ |= 64;
                            this.bgImage_ = codedInputStream.readBytes();
                        } else if (readTag == 66) {
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.hotline_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(CardIssuerInfo.class, Builder.class);
        }

        static {
            CardIssuerInfo cardIssuerInfo = new CardIssuerInfo(true);
            defaultInstance = cardIssuerInfo;
            cardIssuerInfo.initFields();
        }

        public final Parser<CardIssuerInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasCardIssueChannel() {
            return (this.bitField0_ & 1) == 1;
        }

        public final CardIssueChannel getCardIssueChannel() {
            return this.cardIssueChannel_;
        }

        public final boolean hasIssuerId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getIssuerId() {
            Object obj = this.issuerId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.issuerId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIssuerIdBytes() {
            Object obj = this.issuerId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.issuerId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBankName() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getBankName() {
            Object obj = this.bankName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.bankName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBankNameBytes() {
            Object obj = this.bankName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.bankName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLogoUrl() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getLogoUrl() {
            Object obj = this.logoUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.logoUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLogoUrlBytes() {
            Object obj = this.logoUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.logoUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLogoWithBankNameUrl() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getLogoWithBankNameUrl() {
            Object obj = this.logoWithBankNameUrl_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.logoWithBankNameUrl_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLogoWithBankNameUrlBytes() {
            Object obj = this.logoWithBankNameUrl_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.logoWithBankNameUrl_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasContactNumber() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getContactNumber() {
            Object obj = this.contactNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.contactNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getContactNumberBytes() {
            Object obj = this.contactNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.contactNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBgImage() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getBgImage() {
            Object obj = this.bgImage_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.bgImage_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBgImageBytes() {
            Object obj = this.bgImage_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.bgImage_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasHotline() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getHotline() {
            Object obj = this.hotline_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.hotline_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getHotlineBytes() {
            Object obj = this.hotline_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.hotline_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.cardIssueChannel_ = CardIssueChannel.UP;
            this.issuerId_ = "";
            this.bankName_ = "";
            this.logoUrl_ = "";
            this.logoWithBankNameUrl_ = "";
            this.contactNumber_ = "";
            this.bgImage_ = "";
            this.hotline_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasCardIssueChannel()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasIssuerId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeEnum(1, this.cardIssueChannel_.getNumber());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getIssuerIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getBankNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getLogoUrlBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getLogoWithBankNameUrlBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getContactNumberBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getBgImageBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getHotlineBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeEnumSize(1, this.cardIssueChannel_.getNumber());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getIssuerIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getBankNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getLogoUrlBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getLogoWithBankNameUrlBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getContactNumberBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getBgImageBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getHotlineBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CardIssuerInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static CardIssuerInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static CardIssuerInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static CardIssuerInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static CardIssuerInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static CardIssuerInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static CardIssuerInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static CardIssuerInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static CardIssuerInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static CardIssuerInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CardIssuerInfo cardIssuerInfo) {
            return newBuilder().mergeFrom(cardIssuerInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements CardIssuerInfoOrBuilder {
            private Object bankName_;
            private Object bgImage_;
            private int bitField0_;
            private CardIssueChannel cardIssueChannel_;
            private Object contactNumber_;
            private Object hotline_;
            private Object issuerId_;
            private Object logoUrl_;
            private Object logoWithBankNameUrl_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(CardIssuerInfo.class, Builder.class);
            }

            private Builder() {
                this.cardIssueChannel_ = CardIssueChannel.UP;
                this.issuerId_ = "";
                this.bankName_ = "";
                this.logoUrl_ = "";
                this.logoWithBankNameUrl_ = "";
                this.contactNumber_ = "";
                this.bgImage_ = "";
                this.hotline_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardIssueChannel_ = CardIssueChannel.UP;
                this.issuerId_ = "";
                this.bankName_ = "";
                this.logoUrl_ = "";
                this.logoWithBankNameUrl_ = "";
                this.contactNumber_ = "";
                this.bgImage_ = "";
                this.hotline_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = CardIssuerInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cardIssueChannel_ = CardIssueChannel.UP;
                this.bitField0_ &= -2;
                this.issuerId_ = "";
                this.bitField0_ &= -3;
                this.bankName_ = "";
                this.bitField0_ &= -5;
                this.logoUrl_ = "";
                this.bitField0_ &= -9;
                this.logoWithBankNameUrl_ = "";
                this.bitField0_ &= -17;
                this.contactNumber_ = "";
                this.bitField0_ &= -33;
                this.bgImage_ = "";
                this.bitField0_ &= -65;
                this.hotline_ = "";
                this.bitField0_ &= -129;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CardIssuerInfo_descriptor;
            }

            public final CardIssuerInfo getDefaultInstanceForType() {
                return CardIssuerInfo.getDefaultInstance();
            }

            public final CardIssuerInfo build() {
                CardIssuerInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final CardIssuerInfo buildPartial() {
                CardIssuerInfo cardIssuerInfo = new CardIssuerInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                cardIssuerInfo.cardIssueChannel_ = this.cardIssueChannel_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                cardIssuerInfo.issuerId_ = this.issuerId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                cardIssuerInfo.bankName_ = this.bankName_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                cardIssuerInfo.logoUrl_ = this.logoUrl_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                cardIssuerInfo.logoWithBankNameUrl_ = this.logoWithBankNameUrl_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                cardIssuerInfo.contactNumber_ = this.contactNumber_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                cardIssuerInfo.bgImage_ = this.bgImage_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                cardIssuerInfo.hotline_ = this.hotline_;
                cardIssuerInfo.bitField0_ = i2;
                onBuilt();
                return cardIssuerInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof CardIssuerInfo) {
                    return mergeFrom((CardIssuerInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(CardIssuerInfo cardIssuerInfo) {
                if (cardIssuerInfo == CardIssuerInfo.getDefaultInstance()) {
                    return this;
                }
                if (cardIssuerInfo.hasCardIssueChannel()) {
                    setCardIssueChannel(cardIssuerInfo.getCardIssueChannel());
                }
                if (cardIssuerInfo.hasIssuerId()) {
                    this.bitField0_ |= 2;
                    this.issuerId_ = cardIssuerInfo.issuerId_;
                    onChanged();
                }
                if (cardIssuerInfo.hasBankName()) {
                    this.bitField0_ |= 4;
                    this.bankName_ = cardIssuerInfo.bankName_;
                    onChanged();
                }
                if (cardIssuerInfo.hasLogoUrl()) {
                    this.bitField0_ |= 8;
                    this.logoUrl_ = cardIssuerInfo.logoUrl_;
                    onChanged();
                }
                if (cardIssuerInfo.hasLogoWithBankNameUrl()) {
                    this.bitField0_ |= 16;
                    this.logoWithBankNameUrl_ = cardIssuerInfo.logoWithBankNameUrl_;
                    onChanged();
                }
                if (cardIssuerInfo.hasContactNumber()) {
                    this.bitField0_ |= 32;
                    this.contactNumber_ = cardIssuerInfo.contactNumber_;
                    onChanged();
                }
                if (cardIssuerInfo.hasBgImage()) {
                    this.bitField0_ |= 64;
                    this.bgImage_ = cardIssuerInfo.bgImage_;
                    onChanged();
                }
                if (cardIssuerInfo.hasHotline()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.hotline_ = cardIssuerInfo.hotline_;
                    onChanged();
                }
                mergeUnknownFields(cardIssuerInfo.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasCardIssueChannel() && hasIssuerId()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                CardIssuerInfo cardIssuerInfo;
                CardIssuerInfo cardIssuerInfo2 = null;
                try {
                    CardIssuerInfo parsePartialFrom = CardIssuerInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    cardIssuerInfo = (CardIssuerInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    cardIssuerInfo2 = cardIssuerInfo;
                }
                if (cardIssuerInfo2 != null) {
                    mergeFrom(cardIssuerInfo2);
                }
                throw th;
            }

            public final boolean hasCardIssueChannel() {
                return (this.bitField0_ & 1) == 1;
            }

            public final CardIssueChannel getCardIssueChannel() {
                return this.cardIssueChannel_;
            }

            public final Builder setCardIssueChannel(CardIssueChannel cardIssueChannel) {
                if (cardIssueChannel != null) {
                    this.bitField0_ |= 1;
                    this.cardIssueChannel_ = cardIssueChannel;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardIssueChannel() {
                this.bitField0_ &= -2;
                this.cardIssueChannel_ = CardIssueChannel.UP;
                onChanged();
                return this;
            }

            public final boolean hasIssuerId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getIssuerId() {
                Object obj = this.issuerId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.issuerId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIssuerIdBytes() {
                Object obj = this.issuerId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.issuerId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setIssuerId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.issuerId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearIssuerId() {
                this.bitField0_ &= -3;
                this.issuerId_ = CardIssuerInfo.getDefaultInstance().getIssuerId();
                onChanged();
                return this;
            }

            public final Builder setIssuerIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.issuerId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBankName() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getBankName() {
                Object obj = this.bankName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.bankName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBankNameBytes() {
                Object obj = this.bankName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.bankName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBankName(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.bankName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBankName() {
                this.bitField0_ &= -5;
                this.bankName_ = CardIssuerInfo.getDefaultInstance().getBankName();
                onChanged();
                return this;
            }

            public final Builder setBankNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.bankName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLogoUrl() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getLogoUrl() {
                Object obj = this.logoUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.logoUrl_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLogoUrlBytes() {
                Object obj = this.logoUrl_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.logoUrl_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLogoUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.logoUrl_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLogoUrl() {
                this.bitField0_ &= -9;
                this.logoUrl_ = CardIssuerInfo.getDefaultInstance().getLogoUrl();
                onChanged();
                return this;
            }

            public final Builder setLogoUrlBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.logoUrl_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLogoWithBankNameUrl() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getLogoWithBankNameUrl() {
                Object obj = this.logoWithBankNameUrl_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.logoWithBankNameUrl_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLogoWithBankNameUrlBytes() {
                Object obj = this.logoWithBankNameUrl_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.logoWithBankNameUrl_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLogoWithBankNameUrl(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.logoWithBankNameUrl_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLogoWithBankNameUrl() {
                this.bitField0_ &= -17;
                this.logoWithBankNameUrl_ = CardIssuerInfo.getDefaultInstance().getLogoWithBankNameUrl();
                onChanged();
                return this;
            }

            public final Builder setLogoWithBankNameUrlBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.logoWithBankNameUrl_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasContactNumber() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getContactNumber() {
                Object obj = this.contactNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.contactNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getContactNumberBytes() {
                Object obj = this.contactNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.contactNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setContactNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.contactNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearContactNumber() {
                this.bitField0_ &= -33;
                this.contactNumber_ = CardIssuerInfo.getDefaultInstance().getContactNumber();
                onChanged();
                return this;
            }

            public final Builder setContactNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.contactNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBgImage() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getBgImage() {
                Object obj = this.bgImage_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.bgImage_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBgImageBytes() {
                Object obj = this.bgImage_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.bgImage_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBgImage(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.bgImage_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBgImage() {
                this.bitField0_ &= -65;
                this.bgImage_ = CardIssuerInfo.getDefaultInstance().getBgImage();
                onChanged();
                return this;
            }

            public final Builder setBgImageBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.bgImage_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasHotline() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getHotline() {
                Object obj = this.hotline_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.hotline_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getHotlineBytes() {
                Object obj = this.hotline_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.hotline_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setHotline(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.hotline_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearHotline() {
                this.bitField0_ &= -129;
                this.hotline_ = CardIssuerInfo.getDefaultInstance().getHotline();
                onChanged();
                return this;
            }

            public final Builder setHotlineBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.hotline_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class QueryPanRequest extends GeneratedMessage implements QueryPanRequestOrBuilder {
        public static Parser<QueryPanRequest> PARSER = new AbstractParser<QueryPanRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryPanRequest.AnonymousClass1 */

            public final QueryPanRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryPanRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryPanRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public long bindId_;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object pan_;
        public int requestSource_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private QueryPanRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryPanRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryPanRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryPanRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryPanRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.pan_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.bindId_ = codedInputStream.readInt64();
                        } else if (readTag == 32) {
                            this.bitField0_ |= 8;
                            this.requestSource_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanRequest.class, Builder.class);
        }

        static {
            QueryPanRequest queryPanRequest = new QueryPanRequest(true);
            defaultInstance = queryPanRequest;
            queryPanRequest.initFields();
        }

        public final Parser<QueryPanRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPan() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getPan() {
            Object obj = this.pan_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.pan_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPanBytes() {
            Object obj = this.pan_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pan_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBindId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final long getBindId() {
            return this.bindId_;
        }

        public final boolean hasRequestSource() {
            return (this.bitField0_ & 8) == 8;
        }

        public final int getRequestSource() {
            return this.requestSource_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.pan_ = "";
            this.bindId_ = 0;
            this.requestSource_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getPanBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt64(3, this.bindId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeInt32(4, this.requestSource_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getPanBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt64Size(3, this.bindId_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeInt32Size(4, this.requestSource_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryPanRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryPanRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryPanRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryPanRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryPanRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryPanRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryPanRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryPanRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryPanRequest queryPanRequest) {
            return newBuilder().mergeFrom(queryPanRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryPanRequestOrBuilder {
            private long bindId_;
            private int bitField0_;
            private Object pan_;
            private int requestSource_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.pan_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.pan_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = QueryPanRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.pan_ = "";
                this.bitField0_ &= -3;
                this.bindId_ = 0;
                this.bitField0_ &= -5;
                this.requestSource_ = 0;
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanRequest_descriptor;
            }

            public final QueryPanRequest getDefaultInstanceForType() {
                return QueryPanRequest.getDefaultInstance();
            }

            public final QueryPanRequest build() {
                QueryPanRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryPanRequest buildPartial() {
                QueryPanRequest queryPanRequest = new QueryPanRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryPanRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                queryPanRequest.pan_ = this.pan_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                queryPanRequest.bindId_ = this.bindId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                queryPanRequest.requestSource_ = this.requestSource_;
                queryPanRequest.bitField0_ = i2;
                onBuilt();
                return queryPanRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryPanRequest) {
                    return mergeFrom((QueryPanRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryPanRequest queryPanRequest) {
                if (queryPanRequest == QueryPanRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryPanRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = queryPanRequest.sessionId_;
                    onChanged();
                }
                if (queryPanRequest.hasPan()) {
                    this.bitField0_ |= 2;
                    this.pan_ = queryPanRequest.pan_;
                    onChanged();
                }
                if (queryPanRequest.hasBindId()) {
                    setBindId(queryPanRequest.getBindId());
                }
                if (queryPanRequest.hasRequestSource()) {
                    setRequestSource(queryPanRequest.getRequestSource());
                }
                mergeUnknownFields(queryPanRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasSessionId();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryPanRequest queryPanRequest;
                QueryPanRequest queryPanRequest2 = null;
                try {
                    QueryPanRequest parsePartialFrom = QueryPanRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryPanRequest = (QueryPanRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryPanRequest2 = queryPanRequest;
                }
                if (queryPanRequest2 != null) {
                    mergeFrom(queryPanRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = QueryPanRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPan() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getPan() {
                Object obj = this.pan_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pan_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPanBytes() {
                Object obj = this.pan_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.pan_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPan(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.pan_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPan() {
                this.bitField0_ &= -3;
                this.pan_ = QueryPanRequest.getDefaultInstance().getPan();
                onChanged();
                return this;
            }

            public final Builder setPanBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.pan_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBindId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final long getBindId() {
                return this.bindId_;
            }

            public final Builder setBindId(long j) {
                this.bitField0_ |= 4;
                this.bindId_ = j;
                onChanged();
                return this;
            }

            public final Builder clearBindId() {
                this.bitField0_ &= -5;
                this.bindId_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasRequestSource() {
                return (this.bitField0_ & 8) == 8;
            }

            public final int getRequestSource() {
                return this.requestSource_;
            }

            public final Builder setRequestSource(int i) {
                this.bitField0_ |= 8;
                this.requestSource_ = i;
                onChanged();
                return this;
            }

            public final Builder clearRequestSource() {
                this.bitField0_ &= -9;
                this.requestSource_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class QueryPanResponse extends GeneratedMessage implements QueryPanResponseOrBuilder {
        public static Parser<QueryPanResponse> PARSER = new AbstractParser<QueryPanResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryPanResponse.AnonymousClass1 */

            public final QueryPanResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryPanResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryPanResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public CardIssuerInfo cardIssuerInfo_;
        public BankCardType cardType_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;
        public Object userTerms_;

        private QueryPanResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryPanResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryPanResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryPanResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryPanResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            CardIssuerInfo.Builder builder = (this.bitField0_ & 2) == 2 ? this.cardIssuerInfo_.toBuilder() : null;
                            this.cardIssuerInfo_ = (CardIssuerInfo) codedInputStream.readMessage(CardIssuerInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.cardIssuerInfo_);
                                this.cardIssuerInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 2;
                        } else if (readTag == 24) {
                            int readEnum = codedInputStream.readEnum();
                            BankCardType valueOf = BankCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(3, readEnum);
                            } else {
                                this.bitField0_ |= 4;
                                this.cardType_ = valueOf;
                            }
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.userTerms_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanResponse.class, Builder.class);
        }

        static {
            QueryPanResponse queryPanResponse = new QueryPanResponse(true);
            defaultInstance = queryPanResponse;
            queryPanResponse.initFields();
        }

        public final Parser<QueryPanResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasCardIssuerInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final CardIssuerInfo getCardIssuerInfo() {
            return this.cardIssuerInfo_;
        }

        public final CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder() {
            return this.cardIssuerInfo_;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 4) == 4;
        }

        public final BankCardType getCardType() {
            return this.cardType_;
        }

        public final boolean hasUserTerms() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getUserTerms() {
            Object obj = this.userTerms_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userTerms_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserTermsBytes() {
            Object obj = this.userTerms_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userTerms_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
            this.cardType_ = BankCardType.DEBIT;
            this.userTerms_ = "";
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCardIssuerInfo() || getCardIssuerInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(2, this.cardIssuerInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getUserTermsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeMessageSize(2, this.cardIssuerInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeEnumSize(3, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getUserTermsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryPanResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryPanResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryPanResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryPanResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryPanResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryPanResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryPanResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryPanResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryPanResponse queryPanResponse) {
            return newBuilder().mergeFrom(queryPanResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryPanResponseOrBuilder {
            private int bitField0_;
            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> cardIssuerInfoBuilder_;
            private CardIssuerInfo cardIssuerInfo_;
            private BankCardType cardType_;
            private Object errorDesc_;
            private int result_;
            private Object userTerms_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanResponse.class, Builder.class);
            }

            private Builder() {
                this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                this.userTerms_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                this.userTerms_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (QueryPanResponse.alwaysUseFieldBuilders) {
                    getCardIssuerInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                this.cardType_ = BankCardType.DEBIT;
                this.bitField0_ &= -5;
                this.userTerms_ = "";
                this.bitField0_ &= -9;
                this.errorDesc_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanResponse_descriptor;
            }

            public final QueryPanResponse getDefaultInstanceForType() {
                return QueryPanResponse.getDefaultInstance();
            }

            public final QueryPanResponse build() {
                QueryPanResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryPanResponse buildPartial() {
                QueryPanResponse queryPanResponse = new QueryPanResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryPanResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    queryPanResponse.cardIssuerInfo_ = this.cardIssuerInfo_;
                } else {
                    queryPanResponse.cardIssuerInfo_ = singleFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                queryPanResponse.cardType_ = this.cardType_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                queryPanResponse.userTerms_ = this.userTerms_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                queryPanResponse.errorDesc_ = this.errorDesc_;
                queryPanResponse.bitField0_ = i2;
                onBuilt();
                return queryPanResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryPanResponse) {
                    return mergeFrom((QueryPanResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryPanResponse queryPanResponse) {
                if (queryPanResponse == QueryPanResponse.getDefaultInstance()) {
                    return this;
                }
                if (queryPanResponse.hasResult()) {
                    setResult(queryPanResponse.getResult());
                }
                if (queryPanResponse.hasCardIssuerInfo()) {
                    mergeCardIssuerInfo(queryPanResponse.getCardIssuerInfo());
                }
                if (queryPanResponse.hasCardType()) {
                    setCardType(queryPanResponse.getCardType());
                }
                if (queryPanResponse.hasUserTerms()) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = queryPanResponse.userTerms_;
                    onChanged();
                }
                if (queryPanResponse.hasErrorDesc()) {
                    this.bitField0_ |= 16;
                    this.errorDesc_ = queryPanResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(queryPanResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                if (!hasCardIssuerInfo() || getCardIssuerInfo().isInitialized()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryPanResponse queryPanResponse;
                QueryPanResponse queryPanResponse2 = null;
                try {
                    QueryPanResponse parsePartialFrom = QueryPanResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryPanResponse = (QueryPanResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryPanResponse2 = queryPanResponse;
                }
                if (queryPanResponse2 != null) {
                    mergeFrom(queryPanResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasCardIssuerInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final CardIssuerInfo getCardIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.cardIssuerInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setCardIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(cardIssuerInfo);
                } else if (cardIssuerInfo != null) {
                    this.cardIssuerInfo_ = cardIssuerInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setCardIssuerInfo(CardIssuerInfo.Builder builder) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder mergeCardIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 2) != 2 || this.cardIssuerInfo_ == CardIssuerInfo.getDefaultInstance()) {
                        this.cardIssuerInfo_ = cardIssuerInfo;
                    } else {
                        this.cardIssuerInfo_ = CardIssuerInfo.newBuilder(this.cardIssuerInfo_).mergeFrom(cardIssuerInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(cardIssuerInfo);
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder clearCardIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                return this;
            }

            public final CardIssuerInfo.Builder getCardIssuerInfoBuilder() {
                this.bitField0_ |= 2;
                onChanged();
                return getCardIssuerInfoFieldBuilder().getBuilder();
            }

            public final CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.cardIssuerInfo_;
            }

            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> getCardIssuerInfoFieldBuilder() {
                if (this.cardIssuerInfoBuilder_ == null) {
                    this.cardIssuerInfoBuilder_ = new SingleFieldBuilder<>(this.cardIssuerInfo_, getParentForChildren(), isClean());
                    this.cardIssuerInfo_ = null;
                }
                return this.cardIssuerInfoBuilder_;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 4) == 4;
            }

            public final BankCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(BankCardType bankCardType) {
                if (bankCardType != null) {
                    this.bitField0_ |= 4;
                    this.cardType_ = bankCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -5;
                this.cardType_ = BankCardType.DEBIT;
                onChanged();
                return this;
            }

            public final boolean hasUserTerms() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getUserTerms() {
                Object obj = this.userTerms_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userTerms_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserTermsBytes() {
                Object obj = this.userTerms_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userTerms_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUserTerms(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUserTerms() {
                this.bitField0_ &= -9;
                this.userTerms_ = QueryPanResponse.getDefaultInstance().getUserTerms();
                onChanged();
                return this;
            }

            public final Builder setUserTermsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -17;
                this.errorDesc_ = QueryPanResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class PreparePayAppletRequest extends GeneratedMessage implements PreparePayAppletRequestOrBuilder {
        public static Parser<PreparePayAppletRequest> PARSER = new AbstractParser<PreparePayAppletRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.PreparePayAppletRequest.AnonymousClass1 */

            public final PreparePayAppletRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PreparePayAppletRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final PreparePayAppletRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public CardIssuerInfo cardIssuerInfo_;
        public BankCardType cardType_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private PreparePayAppletRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PreparePayAppletRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PreparePayAppletRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final PreparePayAppletRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PreparePayAppletRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            CardIssuerInfo.Builder builder = (this.bitField0_ & 2) == 2 ? this.cardIssuerInfo_.toBuilder() : null;
                            this.cardIssuerInfo_ = (CardIssuerInfo) codedInputStream.readMessage(CardIssuerInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.cardIssuerInfo_);
                                this.cardIssuerInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 2;
                        } else if (readTag == 24) {
                            int readEnum = codedInputStream.readEnum();
                            BankCardType valueOf = BankCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(3, readEnum);
                            } else {
                                this.bitField0_ |= 4;
                                this.cardType_ = valueOf;
                            }
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PreparePayAppletRequest.class, Builder.class);
        }

        static {
            PreparePayAppletRequest preparePayAppletRequest = new PreparePayAppletRequest(true);
            defaultInstance = preparePayAppletRequest;
            preparePayAppletRequest.initFields();
        }

        public final Parser<PreparePayAppletRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardIssuerInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final CardIssuerInfo getCardIssuerInfo() {
            return this.cardIssuerInfo_;
        }

        public final CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder() {
            return this.cardIssuerInfo_;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 4) == 4;
        }

        public final BankCardType getCardType() {
            return this.cardType_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
            this.cardType_ = BankCardType.DEBIT;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCardIssuerInfo()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCardType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!getCardIssuerInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(2, this.cardIssuerInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.cardType_.getNumber());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeMessageSize(2, this.cardIssuerInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeEnumSize(3, this.cardType_.getNumber());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PreparePayAppletRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PreparePayAppletRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PreparePayAppletRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PreparePayAppletRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static PreparePayAppletRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static PreparePayAppletRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static PreparePayAppletRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static PreparePayAppletRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static PreparePayAppletRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static PreparePayAppletRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PreparePayAppletRequest preparePayAppletRequest) {
            return newBuilder().mergeFrom(preparePayAppletRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements PreparePayAppletRequestOrBuilder {
            private int bitField0_;
            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> cardIssuerInfoBuilder_;
            private CardIssuerInfo cardIssuerInfo_;
            private BankCardType cardType_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PreparePayAppletRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (PreparePayAppletRequest.alwaysUseFieldBuilders) {
                    getCardIssuerInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                this.cardType_ = BankCardType.DEBIT;
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PreparePayAppletRequest_descriptor;
            }

            public final PreparePayAppletRequest getDefaultInstanceForType() {
                return PreparePayAppletRequest.getDefaultInstance();
            }

            public final PreparePayAppletRequest build() {
                PreparePayAppletRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final PreparePayAppletRequest buildPartial() {
                PreparePayAppletRequest preparePayAppletRequest = new PreparePayAppletRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                preparePayAppletRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    preparePayAppletRequest.cardIssuerInfo_ = this.cardIssuerInfo_;
                } else {
                    preparePayAppletRequest.cardIssuerInfo_ = singleFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                preparePayAppletRequest.cardType_ = this.cardType_;
                preparePayAppletRequest.bitField0_ = i2;
                onBuilt();
                return preparePayAppletRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof PreparePayAppletRequest) {
                    return mergeFrom((PreparePayAppletRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(PreparePayAppletRequest preparePayAppletRequest) {
                if (preparePayAppletRequest == PreparePayAppletRequest.getDefaultInstance()) {
                    return this;
                }
                if (preparePayAppletRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = preparePayAppletRequest.sessionId_;
                    onChanged();
                }
                if (preparePayAppletRequest.hasCardIssuerInfo()) {
                    mergeCardIssuerInfo(preparePayAppletRequest.getCardIssuerInfo());
                }
                if (preparePayAppletRequest.hasCardType()) {
                    setCardType(preparePayAppletRequest.getCardType());
                }
                mergeUnknownFields(preparePayAppletRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasCardIssuerInfo() && hasCardType() && getCardIssuerInfo().isInitialized()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                PreparePayAppletRequest preparePayAppletRequest;
                PreparePayAppletRequest preparePayAppletRequest2 = null;
                try {
                    PreparePayAppletRequest parsePartialFrom = PreparePayAppletRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    preparePayAppletRequest = (PreparePayAppletRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    preparePayAppletRequest2 = preparePayAppletRequest;
                }
                if (preparePayAppletRequest2 != null) {
                    mergeFrom(preparePayAppletRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = PreparePayAppletRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardIssuerInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final CardIssuerInfo getCardIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.cardIssuerInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setCardIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(cardIssuerInfo);
                } else if (cardIssuerInfo != null) {
                    this.cardIssuerInfo_ = cardIssuerInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setCardIssuerInfo(CardIssuerInfo.Builder builder) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder mergeCardIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 2) != 2 || this.cardIssuerInfo_ == CardIssuerInfo.getDefaultInstance()) {
                        this.cardIssuerInfo_ = cardIssuerInfo;
                    } else {
                        this.cardIssuerInfo_ = CardIssuerInfo.newBuilder(this.cardIssuerInfo_).mergeFrom(cardIssuerInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(cardIssuerInfo);
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder clearCardIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                return this;
            }

            public final CardIssuerInfo.Builder getCardIssuerInfoBuilder() {
                this.bitField0_ |= 2;
                onChanged();
                return getCardIssuerInfoFieldBuilder().getBuilder();
            }

            public final CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.cardIssuerInfo_;
            }

            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> getCardIssuerInfoFieldBuilder() {
                if (this.cardIssuerInfoBuilder_ == null) {
                    this.cardIssuerInfoBuilder_ = new SingleFieldBuilder<>(this.cardIssuerInfo_, getParentForChildren(), isClean());
                    this.cardIssuerInfo_ = null;
                }
                return this.cardIssuerInfoBuilder_;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 4) == 4;
            }

            public final BankCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(BankCardType bankCardType) {
                if (bankCardType != null) {
                    this.bitField0_ |= 4;
                    this.cardType_ = bankCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -5;
                this.cardType_ = BankCardType.DEBIT;
                onChanged();
                return this;
            }
        }
    }

    public static final class EnrollUPCardRequest extends GeneratedMessage implements EnrollUPCardRequestOrBuilder {
        public static Parser<EnrollUPCardRequest> PARSER = new AbstractParser<EnrollUPCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.EnrollUPCardRequest.AnonymousClass1 */

            public final EnrollUPCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new EnrollUPCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final EnrollUPCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object applyChannel_;
        public BankCardType bankCardType_;
        public int bitField0_;
        public ByteString cardInfo_;
        public Object cardNumber_;
        public ByteString cvn2Info_;
        public Object issuerId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public ByteString pinInfo_;
        public int requestSource_;
        public RiskInfo riskInfo_;
        public Object sessionId_;
        public Object sourceChannel_;
        private final UnknownFieldSet unknownFields;
        public Object virtualCardRefId_;

        private EnrollUPCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnrollUPCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnrollUPCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final EnrollUPCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnrollUPCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case 10:
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.cardNumber_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.cardInfo_ = codedInputStream.readBytes();
                            continue;
                        case 34:
                            this.bitField0_ |= 8;
                            this.pinInfo_ = codedInputStream.readBytes();
                            continue;
                        case 42:
                            this.bitField0_ |= 16;
                            this.cvn2Info_ = codedInputStream.readBytes();
                            continue;
                        case 48:
                            int readEnum = codedInputStream.readEnum();
                            BankCardType valueOf = BankCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(6, readEnum);
                                continue;
                            } else {
                                this.bitField0_ |= 32;
                                this.bankCardType_ = valueOf;
                            }
                        case 58:
                            RiskInfo.Builder builder = (this.bitField0_ & 64) == 64 ? this.riskInfo_.toBuilder() : null;
                            this.riskInfo_ = (RiskInfo) codedInputStream.readMessage(RiskInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.riskInfo_);
                                this.riskInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 64;
                            continue;
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.sourceChannel_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.applyChannel_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.issuerId_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.virtualCardRefId_ = codedInputStream.readBytes();
                            continue;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.requestSource_ = codedInputStream.readInt32();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnrollUPCardRequest.class, Builder.class);
        }

        static {
            EnrollUPCardRequest enrollUPCardRequest = new EnrollUPCardRequest(true);
            defaultInstance = enrollUPCardRequest;
            enrollUPCardRequest.initFields();
        }

        public final Parser<EnrollUPCardRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardNumber() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getCardNumber() {
            Object obj = this.cardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardNumberBytes() {
            Object obj = this.cardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardInfo() {
            return (this.bitField0_ & 4) == 4;
        }

        public final ByteString getCardInfo() {
            return this.cardInfo_;
        }

        public final boolean hasPinInfo() {
            return (this.bitField0_ & 8) == 8;
        }

        public final ByteString getPinInfo() {
            return this.pinInfo_;
        }

        public final boolean hasCvn2Info() {
            return (this.bitField0_ & 16) == 16;
        }

        public final ByteString getCvn2Info() {
            return this.cvn2Info_;
        }

        public final boolean hasBankCardType() {
            return (this.bitField0_ & 32) == 32;
        }

        public final BankCardType getBankCardType() {
            return this.bankCardType_;
        }

        public final boolean hasRiskInfo() {
            return (this.bitField0_ & 64) == 64;
        }

        public final RiskInfo getRiskInfo() {
            return this.riskInfo_;
        }

        public final RiskInfoOrBuilder getRiskInfoOrBuilder() {
            return this.riskInfo_;
        }

        public final boolean hasSourceChannel() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getSourceChannel() {
            Object obj = this.sourceChannel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sourceChannel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSourceChannelBytes() {
            Object obj = this.sourceChannel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sourceChannel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasApplyChannel() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getApplyChannel() {
            Object obj = this.applyChannel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.applyChannel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getApplyChannelBytes() {
            Object obj = this.applyChannel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.applyChannel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasIssuerId() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getIssuerId() {
            Object obj = this.issuerId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.issuerId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIssuerIdBytes() {
            Object obj = this.issuerId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.issuerId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardRefId() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getVirtualCardRefId() {
            Object obj = this.virtualCardRefId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardRefId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardRefIdBytes() {
            Object obj = this.virtualCardRefId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardRefId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasRequestSource() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public final int getRequestSource() {
            return this.requestSource_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.cardNumber_ = "";
            this.cardInfo_ = ByteString.EMPTY;
            this.pinInfo_ = ByteString.EMPTY;
            this.cvn2Info_ = ByteString.EMPTY;
            this.bankCardType_ = BankCardType.DEBIT;
            this.riskInfo_ = RiskInfo.getDefaultInstance();
            this.sourceChannel_ = "";
            this.applyChannel_ = "";
            this.issuerId_ = "";
            this.virtualCardRefId_ = "";
            this.requestSource_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCardInfo()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasBankCardType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getCardNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, this.cardInfo_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, this.pinInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, this.cvn2Info_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeEnum(6, this.bankCardType_.getNumber());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeMessage(7, this.riskInfo_);
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getSourceChannelBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getApplyChannelBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getIssuerIdBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getVirtualCardRefIdBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeInt32(12, this.requestSource_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getCardNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, this.cardInfo_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, this.pinInfo_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, this.cvn2Info_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeEnumSize(6, this.bankCardType_.getNumber());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeMessageSize(7, this.riskInfo_);
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getSourceChannelBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getApplyChannelBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getIssuerIdBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(11, getVirtualCardRefIdBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                i2 += CodedOutputStream.computeInt32Size(12, this.requestSource_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnrollUPCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static EnrollUPCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static EnrollUPCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static EnrollUPCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static EnrollUPCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static EnrollUPCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static EnrollUPCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static EnrollUPCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static EnrollUPCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static EnrollUPCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnrollUPCardRequest enrollUPCardRequest) {
            return newBuilder().mergeFrom(enrollUPCardRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements EnrollUPCardRequestOrBuilder {
            private Object applyChannel_;
            private BankCardType bankCardType_;
            private int bitField0_;
            private ByteString cardInfo_;
            private Object cardNumber_;
            private ByteString cvn2Info_;
            private Object issuerId_;
            private ByteString pinInfo_;
            private int requestSource_;
            private SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> riskInfoBuilder_;
            private RiskInfo riskInfo_;
            private Object sessionId_;
            private Object sourceChannel_;
            private Object virtualCardRefId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnrollUPCardRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.cardNumber_ = "";
                this.cardInfo_ = ByteString.EMPTY;
                this.pinInfo_ = ByteString.EMPTY;
                this.cvn2Info_ = ByteString.EMPTY;
                this.bankCardType_ = BankCardType.DEBIT;
                this.riskInfo_ = RiskInfo.getDefaultInstance();
                this.sourceChannel_ = "";
                this.applyChannel_ = "";
                this.issuerId_ = "";
                this.virtualCardRefId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.cardNumber_ = "";
                this.cardInfo_ = ByteString.EMPTY;
                this.pinInfo_ = ByteString.EMPTY;
                this.cvn2Info_ = ByteString.EMPTY;
                this.bankCardType_ = BankCardType.DEBIT;
                this.riskInfo_ = RiskInfo.getDefaultInstance();
                this.sourceChannel_ = "";
                this.applyChannel_ = "";
                this.issuerId_ = "";
                this.virtualCardRefId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (EnrollUPCardRequest.alwaysUseFieldBuilders) {
                    getRiskInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.cardNumber_ = "";
                this.bitField0_ &= -3;
                this.cardInfo_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                this.pinInfo_ = ByteString.EMPTY;
                this.bitField0_ &= -9;
                this.cvn2Info_ = ByteString.EMPTY;
                this.bitField0_ &= -17;
                this.bankCardType_ = BankCardType.DEBIT;
                this.bitField0_ &= -33;
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = RiskInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -65;
                this.sourceChannel_ = "";
                this.bitField0_ &= -129;
                this.applyChannel_ = "";
                this.bitField0_ &= -257;
                this.issuerId_ = "";
                this.bitField0_ &= -513;
                this.virtualCardRefId_ = "";
                this.bitField0_ &= -1025;
                this.requestSource_ = 0;
                this.bitField0_ &= -2049;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollUPCardRequest_descriptor;
            }

            public final EnrollUPCardRequest getDefaultInstanceForType() {
                return EnrollUPCardRequest.getDefaultInstance();
            }

            public final EnrollUPCardRequest build() {
                EnrollUPCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final EnrollUPCardRequest buildPartial() {
                EnrollUPCardRequest enrollUPCardRequest = new EnrollUPCardRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                enrollUPCardRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                enrollUPCardRequest.cardNumber_ = this.cardNumber_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                enrollUPCardRequest.cardInfo_ = this.cardInfo_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                enrollUPCardRequest.pinInfo_ = this.pinInfo_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                enrollUPCardRequest.cvn2Info_ = this.cvn2Info_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                enrollUPCardRequest.bankCardType_ = this.bankCardType_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    enrollUPCardRequest.riskInfo_ = this.riskInfo_;
                } else {
                    enrollUPCardRequest.riskInfo_ = singleFieldBuilder.build();
                }
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                enrollUPCardRequest.sourceChannel_ = this.sourceChannel_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                enrollUPCardRequest.applyChannel_ = this.applyChannel_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                enrollUPCardRequest.issuerId_ = this.issuerId_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                enrollUPCardRequest.virtualCardRefId_ = this.virtualCardRefId_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                enrollUPCardRequest.requestSource_ = this.requestSource_;
                enrollUPCardRequest.bitField0_ = i2;
                onBuilt();
                return enrollUPCardRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof EnrollUPCardRequest) {
                    return mergeFrom((EnrollUPCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(EnrollUPCardRequest enrollUPCardRequest) {
                if (enrollUPCardRequest == EnrollUPCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (enrollUPCardRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = enrollUPCardRequest.sessionId_;
                    onChanged();
                }
                if (enrollUPCardRequest.hasCardNumber()) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = enrollUPCardRequest.cardNumber_;
                    onChanged();
                }
                if (enrollUPCardRequest.hasCardInfo()) {
                    setCardInfo(enrollUPCardRequest.getCardInfo());
                }
                if (enrollUPCardRequest.hasPinInfo()) {
                    setPinInfo(enrollUPCardRequest.getPinInfo());
                }
                if (enrollUPCardRequest.hasCvn2Info()) {
                    setCvn2Info(enrollUPCardRequest.getCvn2Info());
                }
                if (enrollUPCardRequest.hasBankCardType()) {
                    setBankCardType(enrollUPCardRequest.getBankCardType());
                }
                if (enrollUPCardRequest.hasRiskInfo()) {
                    mergeRiskInfo(enrollUPCardRequest.getRiskInfo());
                }
                if (enrollUPCardRequest.hasSourceChannel()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.sourceChannel_ = enrollUPCardRequest.sourceChannel_;
                    onChanged();
                }
                if (enrollUPCardRequest.hasApplyChannel()) {
                    this.bitField0_ |= 256;
                    this.applyChannel_ = enrollUPCardRequest.applyChannel_;
                    onChanged();
                }
                if (enrollUPCardRequest.hasIssuerId()) {
                    this.bitField0_ |= 512;
                    this.issuerId_ = enrollUPCardRequest.issuerId_;
                    onChanged();
                }
                if (enrollUPCardRequest.hasVirtualCardRefId()) {
                    this.bitField0_ |= 1024;
                    this.virtualCardRefId_ = enrollUPCardRequest.virtualCardRefId_;
                    onChanged();
                }
                if (enrollUPCardRequest.hasRequestSource()) {
                    setRequestSource(enrollUPCardRequest.getRequestSource());
                }
                mergeUnknownFields(enrollUPCardRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasCardInfo() && hasBankCardType()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                EnrollUPCardRequest enrollUPCardRequest;
                EnrollUPCardRequest enrollUPCardRequest2 = null;
                try {
                    EnrollUPCardRequest parsePartialFrom = EnrollUPCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    enrollUPCardRequest = (EnrollUPCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    enrollUPCardRequest2 = enrollUPCardRequest;
                }
                if (enrollUPCardRequest2 != null) {
                    mergeFrom(enrollUPCardRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = EnrollUPCardRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardNumber() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getCardNumber() {
                Object obj = this.cardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardNumberBytes() {
                Object obj = this.cardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardNumber() {
                this.bitField0_ &= -3;
                this.cardNumber_ = EnrollUPCardRequest.getDefaultInstance().getCardNumber();
                onChanged();
                return this;
            }

            public final Builder setCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardInfo() {
                return (this.bitField0_ & 4) == 4;
            }

            public final ByteString getCardInfo() {
                return this.cardInfo_;
            }

            public final Builder setCardInfo(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.cardInfo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardInfo() {
                this.bitField0_ &= -5;
                this.cardInfo_ = EnrollUPCardRequest.getDefaultInstance().getCardInfo();
                onChanged();
                return this;
            }

            public final boolean hasPinInfo() {
                return (this.bitField0_ & 8) == 8;
            }

            public final ByteString getPinInfo() {
                return this.pinInfo_;
            }

            public final Builder setPinInfo(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.pinInfo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPinInfo() {
                this.bitField0_ &= -9;
                this.pinInfo_ = EnrollUPCardRequest.getDefaultInstance().getPinInfo();
                onChanged();
                return this;
            }

            public final boolean hasCvn2Info() {
                return (this.bitField0_ & 16) == 16;
            }

            public final ByteString getCvn2Info() {
                return this.cvn2Info_;
            }

            public final Builder setCvn2Info(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.cvn2Info_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCvn2Info() {
                this.bitField0_ &= -17;
                this.cvn2Info_ = EnrollUPCardRequest.getDefaultInstance().getCvn2Info();
                onChanged();
                return this;
            }

            public final boolean hasBankCardType() {
                return (this.bitField0_ & 32) == 32;
            }

            public final BankCardType getBankCardType() {
                return this.bankCardType_;
            }

            public final Builder setBankCardType(BankCardType bankCardType) {
                if (bankCardType != null) {
                    this.bitField0_ |= 32;
                    this.bankCardType_ = bankCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBankCardType() {
                this.bitField0_ &= -33;
                this.bankCardType_ = BankCardType.DEBIT;
                onChanged();
                return this;
            }

            public final boolean hasRiskInfo() {
                return (this.bitField0_ & 64) == 64;
            }

            public final RiskInfo getRiskInfo() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.riskInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setRiskInfo(RiskInfo riskInfo) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(riskInfo);
                } else if (riskInfo != null) {
                    this.riskInfo_ = riskInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 64;
                return this;
            }

            public final Builder setRiskInfo(RiskInfo.Builder builder) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 64;
                return this;
            }

            public final Builder mergeRiskInfo(RiskInfo riskInfo) {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 64) != 64 || this.riskInfo_ == RiskInfo.getDefaultInstance()) {
                        this.riskInfo_ = riskInfo;
                    } else {
                        this.riskInfo_ = RiskInfo.newBuilder(this.riskInfo_).mergeFrom(riskInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(riskInfo);
                }
                this.bitField0_ |= 64;
                return this;
            }

            public final Builder clearRiskInfo() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = RiskInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -65;
                return this;
            }

            public final RiskInfo.Builder getRiskInfoBuilder() {
                this.bitField0_ |= 64;
                onChanged();
                return getRiskInfoFieldBuilder().getBuilder();
            }

            public final RiskInfoOrBuilder getRiskInfoOrBuilder() {
                SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.riskInfo_;
            }

            private SingleFieldBuilder<RiskInfo, RiskInfo.Builder, RiskInfoOrBuilder> getRiskInfoFieldBuilder() {
                if (this.riskInfoBuilder_ == null) {
                    this.riskInfoBuilder_ = new SingleFieldBuilder<>(this.riskInfo_, getParentForChildren(), isClean());
                    this.riskInfo_ = null;
                }
                return this.riskInfoBuilder_;
            }

            public final boolean hasSourceChannel() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getSourceChannel() {
                Object obj = this.sourceChannel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sourceChannel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSourceChannelBytes() {
                Object obj = this.sourceChannel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sourceChannel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSourceChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.sourceChannel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSourceChannel() {
                this.bitField0_ &= -129;
                this.sourceChannel_ = EnrollUPCardRequest.getDefaultInstance().getSourceChannel();
                onChanged();
                return this;
            }

            public final Builder setSourceChannelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.sourceChannel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasApplyChannel() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getApplyChannel() {
                Object obj = this.applyChannel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.applyChannel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getApplyChannelBytes() {
                Object obj = this.applyChannel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.applyChannel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setApplyChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.applyChannel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearApplyChannel() {
                this.bitField0_ &= -257;
                this.applyChannel_ = EnrollUPCardRequest.getDefaultInstance().getApplyChannel();
                onChanged();
                return this;
            }

            public final Builder setApplyChannelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.applyChannel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasIssuerId() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getIssuerId() {
                Object obj = this.issuerId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.issuerId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIssuerIdBytes() {
                Object obj = this.issuerId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.issuerId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setIssuerId(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.issuerId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearIssuerId() {
                this.bitField0_ &= -513;
                this.issuerId_ = EnrollUPCardRequest.getDefaultInstance().getIssuerId();
                onChanged();
                return this;
            }

            public final Builder setIssuerIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.issuerId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardRefId() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getVirtualCardRefId() {
                Object obj = this.virtualCardRefId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardRefId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardRefIdBytes() {
                Object obj = this.virtualCardRefId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardRefId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardRefId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.virtualCardRefId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardRefId() {
                this.bitField0_ &= -1025;
                this.virtualCardRefId_ = EnrollUPCardRequest.getDefaultInstance().getVirtualCardRefId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardRefIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.virtualCardRefId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasRequestSource() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public final int getRequestSource() {
                return this.requestSource_;
            }

            public final Builder setRequestSource(int i) {
                this.bitField0_ |= 2048;
                this.requestSource_ = i;
                onChanged();
                return this;
            }

            public final Builder clearRequestSource() {
                this.bitField0_ &= -2049;
                this.requestSource_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class VirtualCardInfoResponse extends GeneratedMessage implements VirtualCardInfoResponseOrBuilder {
        public static Parser<VirtualCardInfoResponse> PARSER = new AbstractParser<VirtualCardInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.VirtualCardInfoResponse.AnonymousClass1 */

            public final VirtualCardInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new VirtualCardInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final VirtualCardInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public Object cardArt_;
        public Object cardProductId_;
        public Object cardReferenceId_;
        public Object errorDesc_;
        public Object frontColor_;
        public Object lastDigits_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object phoneNumLastDigits_;
        public int result_;
        private final UnknownFieldSet unknownFields;
        public Object virtualCardNumber_;
        public Object virtualCardReferenceId_;

        private VirtualCardInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private VirtualCardInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static VirtualCardInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final VirtualCardInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private VirtualCardInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case C.MSG_SET_VIDEO_DECODER_OUTPUT_BUFFER_RENDERER:
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.aid_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                            continue;
                        case 34:
                            this.bitField0_ |= 8;
                            this.virtualCardNumber_ = codedInputStream.readBytes();
                            continue;
                        case 50:
                            this.bitField0_ |= 16;
                            this.lastDigits_ = codedInputStream.readBytes();
                            continue;
                        case 58:
                            this.bitField0_ |= 32;
                            this.cardProductId_ = codedInputStream.readBytes();
                            continue;
                        case 66:
                            this.bitField0_ |= 64;
                            this.cardReferenceId_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.phoneNumLastDigits_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 256;
                            this.frontColor_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 512;
                            this.cardArt_ = codedInputStream.readBytes();
                            continue;
                        case 98:
                            this.bitField0_ |= 1024;
                            this.errorDesc_ = codedInputStream.readBytes();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(VirtualCardInfoResponse.class, Builder.class);
        }

        static {
            VirtualCardInfoResponse virtualCardInfoResponse = new VirtualCardInfoResponse(true);
            defaultInstance = virtualCardInfoResponse;
            virtualCardInfoResponse.initFields();
        }

        public final Parser<VirtualCardInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardNumber() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getVirtualCardNumber() {
            Object obj = this.virtualCardNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardNumberBytes() {
            Object obj = this.virtualCardNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLastDigits() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getLastDigits() {
            Object obj = this.lastDigits_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.lastDigits_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLastDigitsBytes() {
            Object obj = this.lastDigits_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.lastDigits_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardProductId() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getCardProductId() {
            Object obj = this.cardProductId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardProductId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardProductIdBytes() {
            Object obj = this.cardProductId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardProductId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardReferenceId() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getCardReferenceId() {
            Object obj = this.cardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardReferenceIdBytes() {
            Object obj = this.cardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPhoneNumLastDigits() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getPhoneNumLastDigits() {
            Object obj = this.phoneNumLastDigits_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.phoneNumLastDigits_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPhoneNumLastDigitsBytes() {
            Object obj = this.phoneNumLastDigits_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.phoneNumLastDigits_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasFrontColor() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getFrontColor() {
            Object obj = this.frontColor_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.frontColor_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getFrontColorBytes() {
            Object obj = this.frontColor_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.frontColor_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardArt() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getCardArt() {
            Object obj = this.cardArt_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardArt_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardArtBytes() {
            Object obj = this.cardArt_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardArt_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.aid_ = "";
            this.virtualCardReferenceId_ = "";
            this.virtualCardNumber_ = "";
            this.lastDigits_ = "";
            this.cardProductId_ = "";
            this.cardReferenceId_ = "";
            this.phoneNumLastDigits_ = "";
            this.frontColor_ = "";
            this.cardArt_ = "";
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getVirtualCardNumberBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(6, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(7, getCardProductIdBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(8, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(9, getPhoneNumLastDigitsBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(10, getFrontColorBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(11, getCardArtBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(12, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getVirtualCardNumberBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(6, getLastDigitsBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(7, getCardProductIdBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(8, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(9, getPhoneNumLastDigitsBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(10, getFrontColorBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(11, getCardArtBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(12, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static VirtualCardInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static VirtualCardInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static VirtualCardInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static VirtualCardInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static VirtualCardInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static VirtualCardInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static VirtualCardInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static VirtualCardInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static VirtualCardInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static VirtualCardInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(VirtualCardInfoResponse virtualCardInfoResponse) {
            return newBuilder().mergeFrom(virtualCardInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements VirtualCardInfoResponseOrBuilder {
            private Object aid_;
            private int bitField0_;
            private Object cardArt_;
            private Object cardProductId_;
            private Object cardReferenceId_;
            private Object errorDesc_;
            private Object frontColor_;
            private Object lastDigits_;
            private Object phoneNumLastDigits_;
            private int result_;
            private Object virtualCardNumber_;
            private Object virtualCardReferenceId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(VirtualCardInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.aid_ = "";
                this.virtualCardReferenceId_ = "";
                this.virtualCardNumber_ = "";
                this.lastDigits_ = "";
                this.cardProductId_ = "";
                this.cardReferenceId_ = "";
                this.phoneNumLastDigits_ = "";
                this.frontColor_ = "";
                this.cardArt_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.aid_ = "";
                this.virtualCardReferenceId_ = "";
                this.virtualCardNumber_ = "";
                this.lastDigits_ = "";
                this.cardProductId_ = "";
                this.cardReferenceId_ = "";
                this.phoneNumLastDigits_ = "";
                this.frontColor_ = "";
                this.cardArt_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = VirtualCardInfoResponse.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.aid_ = "";
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -5;
                this.virtualCardNumber_ = "";
                this.bitField0_ &= -9;
                this.lastDigits_ = "";
                this.bitField0_ &= -17;
                this.cardProductId_ = "";
                this.bitField0_ &= -33;
                this.cardReferenceId_ = "";
                this.bitField0_ &= -65;
                this.phoneNumLastDigits_ = "";
                this.bitField0_ &= -129;
                this.frontColor_ = "";
                this.bitField0_ &= -257;
                this.cardArt_ = "";
                this.bitField0_ &= -513;
                this.errorDesc_ = "";
                this.bitField0_ &= -1025;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_VirtualCardInfoResponse_descriptor;
            }

            public final VirtualCardInfoResponse getDefaultInstanceForType() {
                return VirtualCardInfoResponse.getDefaultInstance();
            }

            public final VirtualCardInfoResponse build() {
                VirtualCardInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final VirtualCardInfoResponse buildPartial() {
                VirtualCardInfoResponse virtualCardInfoResponse = new VirtualCardInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                virtualCardInfoResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                virtualCardInfoResponse.aid_ = this.aid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                virtualCardInfoResponse.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                virtualCardInfoResponse.virtualCardNumber_ = this.virtualCardNumber_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                virtualCardInfoResponse.lastDigits_ = this.lastDigits_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                virtualCardInfoResponse.cardProductId_ = this.cardProductId_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                virtualCardInfoResponse.cardReferenceId_ = this.cardReferenceId_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                virtualCardInfoResponse.phoneNumLastDigits_ = this.phoneNumLastDigits_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                virtualCardInfoResponse.frontColor_ = this.frontColor_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                virtualCardInfoResponse.cardArt_ = this.cardArt_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                virtualCardInfoResponse.errorDesc_ = this.errorDesc_;
                virtualCardInfoResponse.bitField0_ = i2;
                onBuilt();
                return virtualCardInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof VirtualCardInfoResponse) {
                    return mergeFrom((VirtualCardInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(VirtualCardInfoResponse virtualCardInfoResponse) {
                if (virtualCardInfoResponse == VirtualCardInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (virtualCardInfoResponse.hasResult()) {
                    setResult(virtualCardInfoResponse.getResult());
                }
                if (virtualCardInfoResponse.hasAid()) {
                    this.bitField0_ |= 2;
                    this.aid_ = virtualCardInfoResponse.aid_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = virtualCardInfoResponse.virtualCardReferenceId_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasVirtualCardNumber()) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = virtualCardInfoResponse.virtualCardNumber_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasLastDigits()) {
                    this.bitField0_ |= 16;
                    this.lastDigits_ = virtualCardInfoResponse.lastDigits_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasCardProductId()) {
                    this.bitField0_ |= 32;
                    this.cardProductId_ = virtualCardInfoResponse.cardProductId_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasCardReferenceId()) {
                    this.bitField0_ |= 64;
                    this.cardReferenceId_ = virtualCardInfoResponse.cardReferenceId_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasPhoneNumLastDigits()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.phoneNumLastDigits_ = virtualCardInfoResponse.phoneNumLastDigits_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasFrontColor()) {
                    this.bitField0_ |= 256;
                    this.frontColor_ = virtualCardInfoResponse.frontColor_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasCardArt()) {
                    this.bitField0_ |= 512;
                    this.cardArt_ = virtualCardInfoResponse.cardArt_;
                    onChanged();
                }
                if (virtualCardInfoResponse.hasErrorDesc()) {
                    this.bitField0_ |= 1024;
                    this.errorDesc_ = virtualCardInfoResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(virtualCardInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                VirtualCardInfoResponse virtualCardInfoResponse;
                VirtualCardInfoResponse virtualCardInfoResponse2 = null;
                try {
                    VirtualCardInfoResponse parsePartialFrom = VirtualCardInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    virtualCardInfoResponse = (VirtualCardInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    virtualCardInfoResponse2 = virtualCardInfoResponse;
                }
                if (virtualCardInfoResponse2 != null) {
                    mergeFrom(virtualCardInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -3;
                this.aid_ = VirtualCardInfoResponse.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -5;
                this.virtualCardReferenceId_ = VirtualCardInfoResponse.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardNumber() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getVirtualCardNumber() {
                Object obj = this.virtualCardNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardNumberBytes() {
                Object obj = this.virtualCardNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardNumber() {
                this.bitField0_ &= -9;
                this.virtualCardNumber_ = VirtualCardInfoResponse.getDefaultInstance().getVirtualCardNumber();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.virtualCardNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLastDigits() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getLastDigits() {
                Object obj = this.lastDigits_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.lastDigits_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLastDigitsBytes() {
                Object obj = this.lastDigits_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.lastDigits_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLastDigits(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.lastDigits_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLastDigits() {
                this.bitField0_ &= -17;
                this.lastDigits_ = VirtualCardInfoResponse.getDefaultInstance().getLastDigits();
                onChanged();
                return this;
            }

            public final Builder setLastDigitsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.lastDigits_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardProductId() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getCardProductId() {
                Object obj = this.cardProductId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardProductId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardProductIdBytes() {
                Object obj = this.cardProductId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardProductId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardProductId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.cardProductId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardProductId() {
                this.bitField0_ &= -33;
                this.cardProductId_ = VirtualCardInfoResponse.getDefaultInstance().getCardProductId();
                onChanged();
                return this;
            }

            public final Builder setCardProductIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.cardProductId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardReferenceId() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getCardReferenceId() {
                Object obj = this.cardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardReferenceIdBytes() {
                Object obj = this.cardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.cardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardReferenceId() {
                this.bitField0_ &= -65;
                this.cardReferenceId_ = VirtualCardInfoResponse.getDefaultInstance().getCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.cardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPhoneNumLastDigits() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getPhoneNumLastDigits() {
                Object obj = this.phoneNumLastDigits_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.phoneNumLastDigits_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPhoneNumLastDigitsBytes() {
                Object obj = this.phoneNumLastDigits_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.phoneNumLastDigits_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPhoneNumLastDigits(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.phoneNumLastDigits_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPhoneNumLastDigits() {
                this.bitField0_ &= -129;
                this.phoneNumLastDigits_ = VirtualCardInfoResponse.getDefaultInstance().getPhoneNumLastDigits();
                onChanged();
                return this;
            }

            public final Builder setPhoneNumLastDigitsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.phoneNumLastDigits_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasFrontColor() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getFrontColor() {
                Object obj = this.frontColor_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.frontColor_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getFrontColorBytes() {
                Object obj = this.frontColor_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.frontColor_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setFrontColor(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.frontColor_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearFrontColor() {
                this.bitField0_ &= -257;
                this.frontColor_ = VirtualCardInfoResponse.getDefaultInstance().getFrontColor();
                onChanged();
                return this;
            }

            public final Builder setFrontColorBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.frontColor_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardArt() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getCardArt() {
                Object obj = this.cardArt_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardArt_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardArtBytes() {
                Object obj = this.cardArt_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardArt_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardArt(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.cardArt_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardArt() {
                this.bitField0_ &= -513;
                this.cardArt_ = VirtualCardInfoResponse.getDefaultInstance().getCardArt();
                onChanged();
                return this;
            }

            public final Builder setCardArtBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.cardArt_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -1025;
                this.errorDesc_ = VirtualCardInfoResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class PullPersoDataRequest extends GeneratedMessage implements PullPersoDataRequestOrBuilder {
        public static Parser<PullPersoDataRequest> PARSER = new AbstractParser<PullPersoDataRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.PullPersoDataRequest.AnonymousClass1 */

            public final PullPersoDataRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PullPersoDataRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final PullPersoDataRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private PullPersoDataRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PullPersoDataRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PullPersoDataRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final PullPersoDataRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PullPersoDataRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PullPersoDataRequest.class, Builder.class);
        }

        static {
            PullPersoDataRequest pullPersoDataRequest = new PullPersoDataRequest(true);
            defaultInstance = pullPersoDataRequest;
            pullPersoDataRequest.initFields();
        }

        public final Parser<PullPersoDataRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PullPersoDataRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PullPersoDataRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PullPersoDataRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PullPersoDataRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static PullPersoDataRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static PullPersoDataRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static PullPersoDataRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static PullPersoDataRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static PullPersoDataRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static PullPersoDataRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PullPersoDataRequest pullPersoDataRequest) {
            return newBuilder().mergeFrom(pullPersoDataRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements PullPersoDataRequestOrBuilder {
            private int bitField0_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PullPersoDataRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = PullPersoDataRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullPersoDataRequest_descriptor;
            }

            public final PullPersoDataRequest getDefaultInstanceForType() {
                return PullPersoDataRequest.getDefaultInstance();
            }

            public final PullPersoDataRequest build() {
                PullPersoDataRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final PullPersoDataRequest buildPartial() {
                PullPersoDataRequest pullPersoDataRequest = new PullPersoDataRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                pullPersoDataRequest.sessionId_ = this.sessionId_;
                pullPersoDataRequest.bitField0_ = i;
                onBuilt();
                return pullPersoDataRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof PullPersoDataRequest) {
                    return mergeFrom((PullPersoDataRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(PullPersoDataRequest pullPersoDataRequest) {
                if (pullPersoDataRequest == PullPersoDataRequest.getDefaultInstance()) {
                    return this;
                }
                if (pullPersoDataRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = pullPersoDataRequest.sessionId_;
                    onChanged();
                }
                mergeUnknownFields(pullPersoDataRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasSessionId();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                PullPersoDataRequest pullPersoDataRequest;
                PullPersoDataRequest pullPersoDataRequest2 = null;
                try {
                    PullPersoDataRequest parsePartialFrom = PullPersoDataRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    pullPersoDataRequest = (PullPersoDataRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    pullPersoDataRequest2 = pullPersoDataRequest;
                }
                if (pullPersoDataRequest2 != null) {
                    mergeFrom(pullPersoDataRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = PullPersoDataRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class PullBusCardDataRequest extends GeneratedMessage implements PullBusCardDataRequestOrBuilder {
        public static Parser<PullBusCardDataRequest> PARSER = new AbstractParser<PullBusCardDataRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.PullBusCardDataRequest.AnonymousClass1 */

            public final PullBusCardDataRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PullBusCardDataRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final PullBusCardDataRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private PullBusCardDataRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PullBusCardDataRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PullBusCardDataRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final PullBusCardDataRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PullBusCardDataRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PullBusCardDataRequest.class, Builder.class);
        }

        static {
            PullBusCardDataRequest pullBusCardDataRequest = new PullBusCardDataRequest(true);
            defaultInstance = pullBusCardDataRequest;
            pullBusCardDataRequest.initFields();
        }

        public final Parser<PullBusCardDataRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PullBusCardDataRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PullBusCardDataRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PullBusCardDataRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PullBusCardDataRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static PullBusCardDataRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static PullBusCardDataRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static PullBusCardDataRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static PullBusCardDataRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static PullBusCardDataRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static PullBusCardDataRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PullBusCardDataRequest pullBusCardDataRequest) {
            return newBuilder().mergeFrom(pullBusCardDataRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements PullBusCardDataRequestOrBuilder {
            private int bitField0_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PullBusCardDataRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = PullBusCardDataRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PullBusCardDataRequest_descriptor;
            }

            public final PullBusCardDataRequest getDefaultInstanceForType() {
                return PullBusCardDataRequest.getDefaultInstance();
            }

            public final PullBusCardDataRequest build() {
                PullBusCardDataRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final PullBusCardDataRequest buildPartial() {
                PullBusCardDataRequest pullBusCardDataRequest = new PullBusCardDataRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                pullBusCardDataRequest.sessionId_ = this.sessionId_;
                pullBusCardDataRequest.bitField0_ = i;
                onBuilt();
                return pullBusCardDataRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof PullBusCardDataRequest) {
                    return mergeFrom((PullBusCardDataRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(PullBusCardDataRequest pullBusCardDataRequest) {
                if (pullBusCardDataRequest == PullBusCardDataRequest.getDefaultInstance()) {
                    return this;
                }
                if (pullBusCardDataRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = pullBusCardDataRequest.sessionId_;
                    onChanged();
                }
                mergeUnknownFields(pullBusCardDataRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasSessionId();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                PullBusCardDataRequest pullBusCardDataRequest;
                PullBusCardDataRequest pullBusCardDataRequest2 = null;
                try {
                    PullBusCardDataRequest parsePartialFrom = PullBusCardDataRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    pullBusCardDataRequest = (PullBusCardDataRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    pullBusCardDataRequest2 = pullBusCardDataRequest;
                }
                if (pullBusCardDataRequest2 != null) {
                    mergeFrom(pullBusCardDataRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = PullBusCardDataRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class PersoFinishNotifyRequest extends GeneratedMessage implements PersoFinishNotifyRequestOrBuilder {
        public static Parser<PersoFinishNotifyRequest> PARSER = new AbstractParser<PersoFinishNotifyRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.PersoFinishNotifyRequest.AnonymousClass1 */

            public final PersoFinishNotifyRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new PersoFinishNotifyRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final PersoFinishNotifyRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public boolean operationResult_;
        public List<SeAPDUResponseItem> response_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;
        public Object virtualCardReferenceId_;

        private PersoFinishNotifyRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private PersoFinishNotifyRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static PersoFinishNotifyRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final PersoFinishNotifyRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private PersoFinishNotifyRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.virtualCardReferenceId_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.operationResult_ = codedInputStream.readBool();
                        } else if (readTag == 34) {
                            if (!(z2 & true)) {
                                this.response_ = new ArrayList();
                                z2 |= true;
                            }
                            this.response_.add(codedInputStream.readMessage(SeAPDUResponseItem.PARSER, extensionRegistryLite));
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.response_ = Collections.unmodifiableList(this.response_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.response_ = Collections.unmodifiableList(this.response_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PersoFinishNotifyRequest.class, Builder.class);
        }

        static {
            PersoFinishNotifyRequest persoFinishNotifyRequest = new PersoFinishNotifyRequest(true);
            defaultInstance = persoFinishNotifyRequest;
            persoFinishNotifyRequest.initFields();
        }

        public final Parser<PersoFinishNotifyRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVirtualCardReferenceId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getVirtualCardReferenceId() {
            Object obj = this.virtualCardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.virtualCardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVirtualCardReferenceIdBytes() {
            Object obj = this.virtualCardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.virtualCardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasOperationResult() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean getOperationResult() {
            return this.operationResult_;
        }

        public final List<SeAPDUResponseItem> getResponseList() {
            return this.response_;
        }

        public final List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList() {
            return this.response_;
        }

        public final int getResponseCount() {
            return this.response_.size();
        }

        public final SeAPDUResponseItem getResponse(int i) {
            return this.response_.get(i);
        }

        public final SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i) {
            return this.response_.get(i);
        }

        private void initFields() {
            this.sessionId_ = "";
            this.virtualCardReferenceId_ = "";
            this.operationResult_ = false;
            this.response_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasVirtualCardReferenceId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasOperationResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getResponseCount(); i++) {
                    if (!getResponse(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBool(3, this.operationResult_);
            }
            for (int i = 0; i < this.response_.size(); i++) {
                codedOutputStream.writeMessage(4, this.response_.get(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getSessionIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getVirtualCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeBoolSize(3, this.operationResult_);
            }
            for (int i2 = 0; i2 < this.response_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(4, this.response_.get(i2));
            }
            int serializedSize = computeBytesSize + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static PersoFinishNotifyRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static PersoFinishNotifyRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static PersoFinishNotifyRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static PersoFinishNotifyRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static PersoFinishNotifyRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static PersoFinishNotifyRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static PersoFinishNotifyRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static PersoFinishNotifyRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static PersoFinishNotifyRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static PersoFinishNotifyRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(PersoFinishNotifyRequest persoFinishNotifyRequest) {
            return newBuilder().mergeFrom(persoFinishNotifyRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements PersoFinishNotifyRequestOrBuilder {
            private int bitField0_;
            private boolean operationResult_;
            private RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> responseBuilder_;
            private List<SeAPDUResponseItem> response_;
            private Object sessionId_;
            private Object virtualCardReferenceId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(PersoFinishNotifyRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                this.response_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.virtualCardReferenceId_ = "";
                this.response_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (PersoFinishNotifyRequest.alwaysUseFieldBuilders) {
                    getResponseFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.virtualCardReferenceId_ = "";
                this.bitField0_ &= -3;
                this.operationResult_ = false;
                this.bitField0_ &= -5;
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.response_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_PersoFinishNotifyRequest_descriptor;
            }

            public final PersoFinishNotifyRequest getDefaultInstanceForType() {
                return PersoFinishNotifyRequest.getDefaultInstance();
            }

            public final PersoFinishNotifyRequest build() {
                PersoFinishNotifyRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final PersoFinishNotifyRequest buildPartial() {
                PersoFinishNotifyRequest persoFinishNotifyRequest = new PersoFinishNotifyRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                persoFinishNotifyRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                persoFinishNotifyRequest.virtualCardReferenceId_ = this.virtualCardReferenceId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                persoFinishNotifyRequest.operationResult_ = this.operationResult_;
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 8) == 8) {
                        this.response_ = Collections.unmodifiableList(this.response_);
                        this.bitField0_ &= -9;
                    }
                    persoFinishNotifyRequest.response_ = this.response_;
                } else {
                    persoFinishNotifyRequest.response_ = repeatedFieldBuilder.build();
                }
                persoFinishNotifyRequest.bitField0_ = i2;
                onBuilt();
                return persoFinishNotifyRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof PersoFinishNotifyRequest) {
                    return mergeFrom((PersoFinishNotifyRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(PersoFinishNotifyRequest persoFinishNotifyRequest) {
                if (persoFinishNotifyRequest == PersoFinishNotifyRequest.getDefaultInstance()) {
                    return this;
                }
                if (persoFinishNotifyRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = persoFinishNotifyRequest.sessionId_;
                    onChanged();
                }
                if (persoFinishNotifyRequest.hasVirtualCardReferenceId()) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = persoFinishNotifyRequest.virtualCardReferenceId_;
                    onChanged();
                }
                if (persoFinishNotifyRequest.hasOperationResult()) {
                    setOperationResult(persoFinishNotifyRequest.getOperationResult());
                }
                if (this.responseBuilder_ == null) {
                    if (!persoFinishNotifyRequest.response_.isEmpty()) {
                        if (this.response_.isEmpty()) {
                            this.response_ = persoFinishNotifyRequest.response_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureResponseIsMutable();
                            this.response_.addAll(persoFinishNotifyRequest.response_);
                        }
                        onChanged();
                    }
                } else if (!persoFinishNotifyRequest.response_.isEmpty()) {
                    if (this.responseBuilder_.isEmpty()) {
                        this.responseBuilder_.dispose();
                        RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = null;
                        this.responseBuilder_ = null;
                        this.response_ = persoFinishNotifyRequest.response_;
                        this.bitField0_ &= -9;
                        if (PersoFinishNotifyRequest.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getResponseFieldBuilder();
                        }
                        this.responseBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.responseBuilder_.addAllMessages(persoFinishNotifyRequest.response_);
                    }
                }
                mergeUnknownFields(persoFinishNotifyRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSessionId() || !hasVirtualCardReferenceId() || !hasOperationResult()) {
                    return false;
                }
                for (int i = 0; i < getResponseCount(); i++) {
                    if (!getResponse(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                PersoFinishNotifyRequest persoFinishNotifyRequest;
                PersoFinishNotifyRequest persoFinishNotifyRequest2 = null;
                try {
                    PersoFinishNotifyRequest parsePartialFrom = PersoFinishNotifyRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    persoFinishNotifyRequest = (PersoFinishNotifyRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    persoFinishNotifyRequest2 = persoFinishNotifyRequest;
                }
                if (persoFinishNotifyRequest2 != null) {
                    mergeFrom(persoFinishNotifyRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = PersoFinishNotifyRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVirtualCardReferenceId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getVirtualCardReferenceId() {
                Object obj = this.virtualCardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.virtualCardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVirtualCardReferenceIdBytes() {
                Object obj = this.virtualCardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.virtualCardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVirtualCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVirtualCardReferenceId() {
                this.bitField0_ &= -3;
                this.virtualCardReferenceId_ = PersoFinishNotifyRequest.getDefaultInstance().getVirtualCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setVirtualCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.virtualCardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasOperationResult() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean getOperationResult() {
                return this.operationResult_;
            }

            public final Builder setOperationResult(boolean z) {
                this.bitField0_ |= 4;
                this.operationResult_ = z;
                onChanged();
                return this;
            }

            public final Builder clearOperationResult() {
                this.bitField0_ &= -5;
                this.operationResult_ = false;
                onChanged();
                return this;
            }

            private void ensureResponseIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.response_ = new ArrayList(this.response_);
                    this.bitField0_ |= 8;
                }
            }

            public final List<SeAPDUResponseItem> getResponseList() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.response_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getResponseCount() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final SeAPDUResponseItem getResponse(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setResponse(int i, SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.set(i, seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setResponse(int i, SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addResponse(SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.add(seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addResponse(int i, SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.add(i, seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addResponse(SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addResponse(int i, SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$SeAPDUResponseItem>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$SeAPDUResponseItem>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllResponse(Iterable<? extends SeAPDUResponseItem> iterable) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.response_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearResponse() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.response_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeResponse(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final SeAPDUResponseItem.Builder getResponseBuilder(int i) {
                return getResponseFieldBuilder().getBuilder(i);
            }

            public final SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.response_);
            }

            public final SeAPDUResponseItem.Builder addResponseBuilder() {
                return getResponseFieldBuilder().addBuilder(SeAPDUResponseItem.getDefaultInstance());
            }

            public final SeAPDUResponseItem.Builder addResponseBuilder(int i) {
                return getResponseFieldBuilder().addBuilder(i, SeAPDUResponseItem.getDefaultInstance());
            }

            public final List<SeAPDUResponseItem.Builder> getResponseBuilderList() {
                return getResponseFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> getResponseFieldBuilder() {
                if (this.responseBuilder_ == null) {
                    this.responseBuilder_ = new RepeatedFieldBuilder<>(this.response_, (this.bitField0_ & 8) == 8, getParentForChildren(), isClean());
                    this.response_ = null;
                }
                return this.responseBuilder_;
            }
        }
    }

    public static final class ProcessFinishNotifyRequest extends GeneratedMessage implements ProcessFinishNotifyRequestOrBuilder {
        public static Parser<ProcessFinishNotifyRequest> PARSER = new AbstractParser<ProcessFinishNotifyRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.ProcessFinishNotifyRequest.AnonymousClass1 */

            public final ProcessFinishNotifyRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new ProcessFinishNotifyRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final ProcessFinishNotifyRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public boolean actionResult_;
        public SeOperationType actionType_;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public List<SeAPDUResponseItem> response_;
        public Object sessionId_;
        private final UnknownFieldSet unknownFields;

        private ProcessFinishNotifyRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private ProcessFinishNotifyRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static ProcessFinishNotifyRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final ProcessFinishNotifyRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private ProcessFinishNotifyRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 16) {
                            this.bitField0_ |= 2;
                            this.actionResult_ = codedInputStream.readBool();
                        } else if (readTag == 24) {
                            int readEnum = codedInputStream.readEnum();
                            SeOperationType valueOf = SeOperationType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(3, readEnum);
                            } else {
                                this.bitField0_ |= 4;
                                this.actionType_ = valueOf;
                            }
                        } else if (readTag == 34) {
                            if (!(z2 & true)) {
                                this.response_ = new ArrayList();
                                z2 |= true;
                            }
                            this.response_.add(codedInputStream.readMessage(SeAPDUResponseItem.PARSER, extensionRegistryLite));
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.response_ = Collections.unmodifiableList(this.response_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.response_ = Collections.unmodifiableList(this.response_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ProcessFinishNotifyRequest.class, Builder.class);
        }

        static {
            ProcessFinishNotifyRequest processFinishNotifyRequest = new ProcessFinishNotifyRequest(true);
            defaultInstance = processFinishNotifyRequest;
            processFinishNotifyRequest.initFields();
        }

        public final Parser<ProcessFinishNotifyRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasActionResult() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean getActionResult() {
            return this.actionResult_;
        }

        public final boolean hasActionType() {
            return (this.bitField0_ & 4) == 4;
        }

        public final SeOperationType getActionType() {
            return this.actionType_;
        }

        public final List<SeAPDUResponseItem> getResponseList() {
            return this.response_;
        }

        public final List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList() {
            return this.response_;
        }

        public final int getResponseCount() {
            return this.response_.size();
        }

        public final SeAPDUResponseItem getResponse(int i) {
            return this.response_.get(i);
        }

        public final SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i) {
            return this.response_.get(i);
        }

        private void initFields() {
            this.sessionId_ = "";
            this.actionResult_ = false;
            this.actionType_ = SeOperationType.LOCK;
            this.response_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasActionResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasActionType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                for (int i = 0; i < getResponseCount(); i++) {
                    if (!getResponse(i).isInitialized()) {
                        this.memoizedIsInitialized = 0;
                        return false;
                    }
                }
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBool(2, this.actionResult_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.actionType_.getNumber());
            }
            for (int i = 0; i < this.response_.size(); i++) {
                codedOutputStream.writeMessage(4, this.response_.get(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getSessionIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBoolSize(2, this.actionResult_);
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeEnumSize(3, this.actionType_.getNumber());
            }
            for (int i2 = 0; i2 < this.response_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(4, this.response_.get(i2));
            }
            int serializedSize = computeBytesSize + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static ProcessFinishNotifyRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static ProcessFinishNotifyRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static ProcessFinishNotifyRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static ProcessFinishNotifyRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static ProcessFinishNotifyRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static ProcessFinishNotifyRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static ProcessFinishNotifyRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static ProcessFinishNotifyRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static ProcessFinishNotifyRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static ProcessFinishNotifyRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(ProcessFinishNotifyRequest processFinishNotifyRequest) {
            return newBuilder().mergeFrom(processFinishNotifyRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements ProcessFinishNotifyRequestOrBuilder {
            private boolean actionResult_;
            private SeOperationType actionType_;
            private int bitField0_;
            private RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> responseBuilder_;
            private List<SeAPDUResponseItem> response_;
            private Object sessionId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(ProcessFinishNotifyRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.actionType_ = SeOperationType.LOCK;
                this.response_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.actionType_ = SeOperationType.LOCK;
                this.response_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (ProcessFinishNotifyRequest.alwaysUseFieldBuilders) {
                    getResponseFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.actionResult_ = false;
                this.bitField0_ &= -3;
                this.actionType_ = SeOperationType.LOCK;
                this.bitField0_ &= -5;
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.response_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_ProcessFinishNotifyRequest_descriptor;
            }

            public final ProcessFinishNotifyRequest getDefaultInstanceForType() {
                return ProcessFinishNotifyRequest.getDefaultInstance();
            }

            public final ProcessFinishNotifyRequest build() {
                ProcessFinishNotifyRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final ProcessFinishNotifyRequest buildPartial() {
                ProcessFinishNotifyRequest processFinishNotifyRequest = new ProcessFinishNotifyRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                processFinishNotifyRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                processFinishNotifyRequest.actionResult_ = this.actionResult_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                processFinishNotifyRequest.actionType_ = this.actionType_;
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 8) == 8) {
                        this.response_ = Collections.unmodifiableList(this.response_);
                        this.bitField0_ &= -9;
                    }
                    processFinishNotifyRequest.response_ = this.response_;
                } else {
                    processFinishNotifyRequest.response_ = repeatedFieldBuilder.build();
                }
                processFinishNotifyRequest.bitField0_ = i2;
                onBuilt();
                return processFinishNotifyRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof ProcessFinishNotifyRequest) {
                    return mergeFrom((ProcessFinishNotifyRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(ProcessFinishNotifyRequest processFinishNotifyRequest) {
                if (processFinishNotifyRequest == ProcessFinishNotifyRequest.getDefaultInstance()) {
                    return this;
                }
                if (processFinishNotifyRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = processFinishNotifyRequest.sessionId_;
                    onChanged();
                }
                if (processFinishNotifyRequest.hasActionResult()) {
                    setActionResult(processFinishNotifyRequest.getActionResult());
                }
                if (processFinishNotifyRequest.hasActionType()) {
                    setActionType(processFinishNotifyRequest.getActionType());
                }
                if (this.responseBuilder_ == null) {
                    if (!processFinishNotifyRequest.response_.isEmpty()) {
                        if (this.response_.isEmpty()) {
                            this.response_ = processFinishNotifyRequest.response_;
                            this.bitField0_ &= -9;
                        } else {
                            ensureResponseIsMutable();
                            this.response_.addAll(processFinishNotifyRequest.response_);
                        }
                        onChanged();
                    }
                } else if (!processFinishNotifyRequest.response_.isEmpty()) {
                    if (this.responseBuilder_.isEmpty()) {
                        this.responseBuilder_.dispose();
                        RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = null;
                        this.responseBuilder_ = null;
                        this.response_ = processFinishNotifyRequest.response_;
                        this.bitField0_ &= -9;
                        if (ProcessFinishNotifyRequest.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getResponseFieldBuilder();
                        }
                        this.responseBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.responseBuilder_.addAllMessages(processFinishNotifyRequest.response_);
                    }
                }
                mergeUnknownFields(processFinishNotifyRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasSessionId() || !hasActionResult() || !hasActionType()) {
                    return false;
                }
                for (int i = 0; i < getResponseCount(); i++) {
                    if (!getResponse(i).isInitialized()) {
                        return false;
                    }
                }
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                ProcessFinishNotifyRequest processFinishNotifyRequest;
                ProcessFinishNotifyRequest processFinishNotifyRequest2 = null;
                try {
                    ProcessFinishNotifyRequest parsePartialFrom = ProcessFinishNotifyRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    processFinishNotifyRequest = (ProcessFinishNotifyRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    processFinishNotifyRequest2 = processFinishNotifyRequest;
                }
                if (processFinishNotifyRequest2 != null) {
                    mergeFrom(processFinishNotifyRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = ProcessFinishNotifyRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasActionResult() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean getActionResult() {
                return this.actionResult_;
            }

            public final Builder setActionResult(boolean z) {
                this.bitField0_ |= 2;
                this.actionResult_ = z;
                onChanged();
                return this;
            }

            public final Builder clearActionResult() {
                this.bitField0_ &= -3;
                this.actionResult_ = false;
                onChanged();
                return this;
            }

            public final boolean hasActionType() {
                return (this.bitField0_ & 4) == 4;
            }

            public final SeOperationType getActionType() {
                return this.actionType_;
            }

            public final Builder setActionType(SeOperationType seOperationType) {
                if (seOperationType != null) {
                    this.bitField0_ |= 4;
                    this.actionType_ = seOperationType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearActionType() {
                this.bitField0_ &= -5;
                this.actionType_ = SeOperationType.LOCK;
                onChanged();
                return this;
            }

            private void ensureResponseIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.response_ = new ArrayList(this.response_);
                    this.bitField0_ |= 8;
                }
            }

            public final List<SeAPDUResponseItem> getResponseList() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.response_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getResponseCount() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final SeAPDUResponseItem getResponse(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setResponse(int i, SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.set(i, seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setResponse(int i, SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addResponse(SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.add(seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addResponse(int i, SeAPDUResponseItem seAPDUResponseItem) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, seAPDUResponseItem);
                } else if (seAPDUResponseItem != null) {
                    ensureResponseIsMutable();
                    this.response_.add(i, seAPDUResponseItem);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addResponse(SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addResponse(int i, SeAPDUResponseItem.Builder builder) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$SeAPDUResponseItem>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$SeAPDUResponseItem>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllResponse(Iterable<? extends SeAPDUResponseItem> iterable) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.response_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearResponse() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.response_ = Collections.emptyList();
                    this.bitField0_ &= -9;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeResponse(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureResponseIsMutable();
                    this.response_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final SeAPDUResponseItem.Builder getResponseBuilder(int i) {
                return getResponseFieldBuilder().getBuilder(i);
            }

            public final SeAPDUResponseItemOrBuilder getResponseOrBuilder(int i) {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.response_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends SeAPDUResponseItemOrBuilder> getResponseOrBuilderList() {
                RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> repeatedFieldBuilder = this.responseBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.response_);
            }

            public final SeAPDUResponseItem.Builder addResponseBuilder() {
                return getResponseFieldBuilder().addBuilder(SeAPDUResponseItem.getDefaultInstance());
            }

            public final SeAPDUResponseItem.Builder addResponseBuilder(int i) {
                return getResponseFieldBuilder().addBuilder(i, SeAPDUResponseItem.getDefaultInstance());
            }

            public final List<SeAPDUResponseItem.Builder> getResponseBuilderList() {
                return getResponseFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<SeAPDUResponseItem, SeAPDUResponseItem.Builder, SeAPDUResponseItemOrBuilder> getResponseFieldBuilder() {
                if (this.responseBuilder_ == null) {
                    this.responseBuilder_ = new RepeatedFieldBuilder<>(this.response_, (this.bitField0_ & 8) == 8, getParentForChildren(), isClean());
                    this.response_ = null;
                }
                return this.responseBuilder_;
            }
        }
    }

    public static final class DeviceInfo extends GeneratedMessage implements DeviceInfoOrBuilder {
        public static Parser<DeviceInfo> PARSER = new AbstractParser<DeviceInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.DeviceInfo.AnonymousClass1 */

            public final DeviceInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DeviceInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final DeviceInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object deviceModel_;
        public Object lang_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object miuiRomType_;
        public Object miuiSystemVersion_;
        public Object seId_;
        public int tsmclientVersionCode_;
        private final UnknownFieldSet unknownFields;

        private DeviceInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DeviceInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DeviceInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final DeviceInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DeviceInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.deviceModel_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.lang_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.miuiRomType_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.miuiSystemVersion_ = codedInputStream.readBytes();
                        } else if (readTag == 40) {
                            this.bitField0_ |= 16;
                            this.tsmclientVersionCode_ = codedInputStream.readInt32();
                        } else if (readTag == 50) {
                            this.bitField0_ |= 32;
                            this.seId_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DeviceInfo.class, Builder.class);
        }

        static {
            DeviceInfo deviceInfo = new DeviceInfo(true);
            defaultInstance = deviceInfo;
            deviceInfo.initFields();
        }

        public final Parser<DeviceInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasDeviceModel() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getDeviceModel() {
            Object obj = this.deviceModel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceModel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceModelBytes() {
            Object obj = this.deviceModel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceModel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLang() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getLang() {
            Object obj = this.lang_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.lang_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLangBytes() {
            Object obj = this.lang_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.lang_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMiuiRomType() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getMiuiRomType() {
            Object obj = this.miuiRomType_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.miuiRomType_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMiuiRomTypeBytes() {
            Object obj = this.miuiRomType_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.miuiRomType_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMiuiSystemVersion() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getMiuiSystemVersion() {
            Object obj = this.miuiSystemVersion_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.miuiSystemVersion_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMiuiSystemVersionBytes() {
            Object obj = this.miuiSystemVersion_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.miuiSystemVersion_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasTsmclientVersionCode() {
            return (this.bitField0_ & 16) == 16;
        }

        public final int getTsmclientVersionCode() {
            return this.tsmclientVersionCode_;
        }

        public final boolean hasSeId() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getSeId() {
            Object obj = this.seId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.seId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSeIdBytes() {
            Object obj = this.seId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.seId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.deviceModel_ = "";
            this.lang_ = "";
            this.miuiRomType_ = "";
            this.miuiSystemVersion_ = "";
            this.tsmclientVersionCode_ = 0;
            this.seId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasDeviceModel()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasLang()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMiuiRomType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMiuiSystemVersion()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDeviceModelBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getLangBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getMiuiRomTypeBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getMiuiSystemVersionBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.tsmclientVersionCode_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getSeIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getDeviceModelBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getLangBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getMiuiRomTypeBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getMiuiSystemVersionBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.tsmclientVersionCode_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(6, getSeIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DeviceInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DeviceInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DeviceInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DeviceInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static DeviceInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static DeviceInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static DeviceInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static DeviceInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static DeviceInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static DeviceInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DeviceInfo deviceInfo) {
            return newBuilder().mergeFrom(deviceInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements DeviceInfoOrBuilder {
            private int bitField0_;
            private Object deviceModel_;
            private Object lang_;
            private Object miuiRomType_;
            private Object miuiSystemVersion_;
            private Object seId_;
            private int tsmclientVersionCode_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DeviceInfo.class, Builder.class);
            }

            private Builder() {
                this.deviceModel_ = "";
                this.lang_ = "";
                this.miuiRomType_ = "";
                this.miuiSystemVersion_ = "";
                this.seId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceModel_ = "";
                this.lang_ = "";
                this.miuiRomType_ = "";
                this.miuiSystemVersion_ = "";
                this.seId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = DeviceInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.deviceModel_ = "";
                this.bitField0_ &= -2;
                this.lang_ = "";
                this.bitField0_ &= -3;
                this.miuiRomType_ = "";
                this.bitField0_ &= -5;
                this.miuiSystemVersion_ = "";
                this.bitField0_ &= -9;
                this.tsmclientVersionCode_ = 0;
                this.bitField0_ &= -17;
                this.seId_ = "";
                this.bitField0_ &= -33;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DeviceInfo_descriptor;
            }

            public final DeviceInfo getDefaultInstanceForType() {
                return DeviceInfo.getDefaultInstance();
            }

            public final DeviceInfo build() {
                DeviceInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final DeviceInfo buildPartial() {
                DeviceInfo deviceInfo = new DeviceInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                deviceInfo.deviceModel_ = this.deviceModel_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                deviceInfo.lang_ = this.lang_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                deviceInfo.miuiRomType_ = this.miuiRomType_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                deviceInfo.miuiSystemVersion_ = this.miuiSystemVersion_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                deviceInfo.tsmclientVersionCode_ = this.tsmclientVersionCode_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                deviceInfo.seId_ = this.seId_;
                deviceInfo.bitField0_ = i2;
                onBuilt();
                return deviceInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof DeviceInfo) {
                    return mergeFrom((DeviceInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(DeviceInfo deviceInfo) {
                if (deviceInfo == DeviceInfo.getDefaultInstance()) {
                    return this;
                }
                if (deviceInfo.hasDeviceModel()) {
                    this.bitField0_ |= 1;
                    this.deviceModel_ = deviceInfo.deviceModel_;
                    onChanged();
                }
                if (deviceInfo.hasLang()) {
                    this.bitField0_ |= 2;
                    this.lang_ = deviceInfo.lang_;
                    onChanged();
                }
                if (deviceInfo.hasMiuiRomType()) {
                    this.bitField0_ |= 4;
                    this.miuiRomType_ = deviceInfo.miuiRomType_;
                    onChanged();
                }
                if (deviceInfo.hasMiuiSystemVersion()) {
                    this.bitField0_ |= 8;
                    this.miuiSystemVersion_ = deviceInfo.miuiSystemVersion_;
                    onChanged();
                }
                if (deviceInfo.hasTsmclientVersionCode()) {
                    setTsmclientVersionCode(deviceInfo.getTsmclientVersionCode());
                }
                if (deviceInfo.hasSeId()) {
                    this.bitField0_ |= 32;
                    this.seId_ = deviceInfo.seId_;
                    onChanged();
                }
                mergeUnknownFields(deviceInfo.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasDeviceModel() && hasLang() && hasMiuiRomType() && hasMiuiSystemVersion()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                DeviceInfo deviceInfo;
                DeviceInfo deviceInfo2 = null;
                try {
                    DeviceInfo parsePartialFrom = DeviceInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    deviceInfo = (DeviceInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    deviceInfo2 = deviceInfo;
                }
                if (deviceInfo2 != null) {
                    mergeFrom(deviceInfo2);
                }
                throw th;
            }

            public final boolean hasDeviceModel() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getDeviceModel() {
                Object obj = this.deviceModel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceModel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceModelBytes() {
                Object obj = this.deviceModel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceModel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceModel(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.deviceModel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceModel() {
                this.bitField0_ &= -2;
                this.deviceModel_ = DeviceInfo.getDefaultInstance().getDeviceModel();
                onChanged();
                return this;
            }

            public final Builder setDeviceModelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.deviceModel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLang() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getLang() {
                Object obj = this.lang_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.lang_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLangBytes() {
                Object obj = this.lang_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.lang_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLang(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.lang_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLang() {
                this.bitField0_ &= -3;
                this.lang_ = DeviceInfo.getDefaultInstance().getLang();
                onChanged();
                return this;
            }

            public final Builder setLangBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.lang_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMiuiRomType() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getMiuiRomType() {
                Object obj = this.miuiRomType_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.miuiRomType_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMiuiRomTypeBytes() {
                Object obj = this.miuiRomType_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.miuiRomType_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMiuiRomType(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.miuiRomType_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMiuiRomType() {
                this.bitField0_ &= -5;
                this.miuiRomType_ = DeviceInfo.getDefaultInstance().getMiuiRomType();
                onChanged();
                return this;
            }

            public final Builder setMiuiRomTypeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.miuiRomType_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMiuiSystemVersion() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getMiuiSystemVersion() {
                Object obj = this.miuiSystemVersion_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.miuiSystemVersion_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMiuiSystemVersionBytes() {
                Object obj = this.miuiSystemVersion_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.miuiSystemVersion_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMiuiSystemVersion(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.miuiSystemVersion_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMiuiSystemVersion() {
                this.bitField0_ &= -9;
                this.miuiSystemVersion_ = DeviceInfo.getDefaultInstance().getMiuiSystemVersion();
                onChanged();
                return this;
            }

            public final Builder setMiuiSystemVersionBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.miuiSystemVersion_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasTsmclientVersionCode() {
                return (this.bitField0_ & 16) == 16;
            }

            public final int getTsmclientVersionCode() {
                return this.tsmclientVersionCode_;
            }

            public final Builder setTsmclientVersionCode(int i) {
                this.bitField0_ |= 16;
                this.tsmclientVersionCode_ = i;
                onChanged();
                return this;
            }

            public final Builder clearTsmclientVersionCode() {
                this.bitField0_ &= -17;
                this.tsmclientVersionCode_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasSeId() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getSeId() {
                Object obj = this.seId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.seId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSeIdBytes() {
                Object obj = this.seId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.seId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSeId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.seId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSeId() {
                this.bitField0_ &= -33;
                this.seId_ = DeviceInfo.getDefaultInstance().getSeId();
                onChanged();
                return this;
            }

            public final Builder setSeIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.seId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class RiskInfo extends GeneratedMessage implements RiskInfoOrBuilder {
        public static Parser<RiskInfo> PARSER = new AbstractParser<RiskInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.RiskInfo.AnonymousClass1 */

            public final RiskInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new RiskInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final RiskInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object accountEmailLife_;
        public Object accountIDHash_;
        public int accountScore_;
        public ApplyChannel applyChannel_;
        public Object billingAddress_;
        public Object billingZip_;
        public int bitField0_;
        public CaptureMethod captureMethod_;
        public Object cardHolderName_;
        public Object deviceLanguage_;
        public Object deviceLocation_;
        public Object deviceName_;
        public Object deviceNumber_;
        public int deviceSIMNumber_;
        public int deviceScore_;
        public DeviceType deviceType_;
        public Object extensiveDeviceLocation_;
        public LazyStringList fullDeviceNumber_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int phoneNumberScore_;
        public LazyStringList riskReasonCode_;
        public int riskScore_;
        public Object riskStandardVersion_;
        public Object sourceIP_;
        private final UnknownFieldSet unknownFields;

        private RiskInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RiskInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RiskInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final RiskInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RiskInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case C.MSG_SET_VIDEO_DECODER_OUTPUT_BUFFER_RENDERER:
                            int readEnum = codedInputStream.readEnum();
                            DeviceType valueOf = DeviceType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(1, readEnum);
                                continue;
                            } else {
                                this.bitField0_ |= 1;
                                this.deviceType_ = valueOf;
                            }
                        case 18:
                            this.bitField0_ |= 2;
                            this.deviceLanguage_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.deviceName_ = codedInputStream.readBytes();
                            continue;
                        case 32:
                            int readEnum2 = codedInputStream.readEnum();
                            ApplyChannel valueOf2 = ApplyChannel.valueOf(readEnum2);
                            if (valueOf2 == null) {
                                newBuilder.mergeVarintField(4, readEnum2);
                                continue;
                            } else {
                                this.bitField0_ |= 8;
                                this.applyChannel_ = valueOf2;
                            }
                        case 42:
                            this.bitField0_ |= 16;
                            this.deviceLocation_ = codedInputStream.readBytes();
                            continue;
                        case 50:
                            this.bitField0_ |= 32;
                            this.extensiveDeviceLocation_ = codedInputStream.readBytes();
                            continue;
                        case 56:
                            int readEnum3 = codedInputStream.readEnum();
                            CaptureMethod valueOf3 = CaptureMethod.valueOf(readEnum3);
                            if (valueOf3 == null) {
                                newBuilder.mergeVarintField(7, readEnum3);
                                continue;
                            } else {
                                this.bitField0_ |= 64;
                                this.captureMethod_ = valueOf3;
                            }
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.accountEmailLife_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.cardHolderName_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.billingAddress_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.billingZip_ = codedInputStream.readBytes();
                            continue;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.riskScore_ = codedInputStream.readInt32();
                            continue;
                        case 106:
                            this.bitField0_ |= 4096;
                            this.riskStandardVersion_ = codedInputStream.readBytes();
                            continue;
                        case 112:
                            this.bitField0_ |= 8192;
                            this.deviceScore_ = codedInputStream.readInt32();
                            continue;
                        case 120:
                            this.bitField0_ |= 16384;
                            this.accountScore_ = codedInputStream.readInt32();
                            continue;
                        case NotificationCompat.FLAG_HIGH_PRIORITY:
                            this.bitField0_ |= 32768;
                            this.phoneNumberScore_ = codedInputStream.readInt32();
                            continue;
                        case 138:
                            if (!(z2 & true)) {
                                this.riskReasonCode_ = new LazyStringArrayList();
                                z2 |= true;
                            }
                            this.riskReasonCode_.add(codedInputStream.readBytes());
                            continue;
                        case 146:
                            this.bitField0_ |= 65536;
                            this.deviceNumber_ = codedInputStream.readBytes();
                            continue;
                        case 154:
                            if (!(z2 & true)) {
                                this.fullDeviceNumber_ = new LazyStringArrayList();
                                z2 |= true;
                            }
                            this.fullDeviceNumber_.add(codedInputStream.readBytes());
                            continue;
                        case 162:
                            this.bitField0_ |= 131072;
                            this.sourceIP_ = codedInputStream.readBytes();
                            continue;
                        case 168:
                            this.bitField0_ |= 262144;
                            this.deviceSIMNumber_ = codedInputStream.readInt32();
                            continue;
                        case 178:
                            this.bitField0_ |= 524288;
                            this.accountIDHash_ = codedInputStream.readBytes();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.riskReasonCode_ = new UnmodifiableLazyStringList(this.riskReasonCode_);
                    }
                    if (z2 & true) {
                        this.fullDeviceNumber_ = new UnmodifiableLazyStringList(this.fullDeviceNumber_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.riskReasonCode_ = new UnmodifiableLazyStringList(this.riskReasonCode_);
            }
            if (z2 & true) {
                this.fullDeviceNumber_ = new UnmodifiableLazyStringList(this.fullDeviceNumber_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RiskInfo.class, Builder.class);
        }

        static {
            RiskInfo riskInfo = new RiskInfo(true);
            defaultInstance = riskInfo;
            riskInfo.initFields();
        }

        public final Parser<RiskInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasDeviceType() {
            return (this.bitField0_ & 1) == 1;
        }

        public final DeviceType getDeviceType() {
            return this.deviceType_;
        }

        public final boolean hasDeviceLanguage() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getDeviceLanguage() {
            Object obj = this.deviceLanguage_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceLanguage_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceLanguageBytes() {
            Object obj = this.deviceLanguage_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceLanguage_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceName() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getDeviceName() {
            Object obj = this.deviceName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceNameBytes() {
            Object obj = this.deviceName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasApplyChannel() {
            return (this.bitField0_ & 8) == 8;
        }

        public final ApplyChannel getApplyChannel() {
            return this.applyChannel_;
        }

        public final boolean hasDeviceLocation() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getDeviceLocation() {
            Object obj = this.deviceLocation_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceLocation_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceLocationBytes() {
            Object obj = this.deviceLocation_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceLocation_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasExtensiveDeviceLocation() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getExtensiveDeviceLocation() {
            Object obj = this.extensiveDeviceLocation_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.extensiveDeviceLocation_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getExtensiveDeviceLocationBytes() {
            Object obj = this.extensiveDeviceLocation_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.extensiveDeviceLocation_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCaptureMethod() {
            return (this.bitField0_ & 64) == 64;
        }

        public final CaptureMethod getCaptureMethod() {
            return this.captureMethod_;
        }

        public final boolean hasAccountEmailLife() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getAccountEmailLife() {
            Object obj = this.accountEmailLife_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.accountEmailLife_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAccountEmailLifeBytes() {
            Object obj = this.accountEmailLife_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.accountEmailLife_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardHolderName() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getCardHolderName() {
            Object obj = this.cardHolderName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardHolderName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardHolderNameBytes() {
            Object obj = this.cardHolderName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardHolderName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBillingAddress() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getBillingAddress() {
            Object obj = this.billingAddress_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.billingAddress_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBillingAddressBytes() {
            Object obj = this.billingAddress_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.billingAddress_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBillingZip() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getBillingZip() {
            Object obj = this.billingZip_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.billingZip_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBillingZipBytes() {
            Object obj = this.billingZip_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.billingZip_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasRiskScore() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public final int getRiskScore() {
            return this.riskScore_;
        }

        public final boolean hasRiskStandardVersion() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public final String getRiskStandardVersion() {
            Object obj = this.riskStandardVersion_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.riskStandardVersion_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getRiskStandardVersionBytes() {
            Object obj = this.riskStandardVersion_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.riskStandardVersion_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceScore() {
            return (this.bitField0_ & 8192) == 8192;
        }

        public final int getDeviceScore() {
            return this.deviceScore_;
        }

        public final boolean hasAccountScore() {
            return (this.bitField0_ & 16384) == 16384;
        }

        public final int getAccountScore() {
            return this.accountScore_;
        }

        public final boolean hasPhoneNumberScore() {
            return (this.bitField0_ & 32768) == 32768;
        }

        public final int getPhoneNumberScore() {
            return this.phoneNumberScore_;
        }

        public final List<String> getRiskReasonCodeList() {
            return this.riskReasonCode_;
        }

        public final int getRiskReasonCodeCount() {
            return this.riskReasonCode_.size();
        }

        public final String getRiskReasonCode(int i) {
            return (String) this.riskReasonCode_.get(i);
        }

        public final ByteString getRiskReasonCodeBytes(int i) {
            return this.riskReasonCode_.getByteString(i);
        }

        public final boolean hasDeviceNumber() {
            return (this.bitField0_ & 65536) == 65536;
        }

        public final String getDeviceNumber() {
            Object obj = this.deviceNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceNumberBytes() {
            Object obj = this.deviceNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final List<String> getFullDeviceNumberList() {
            return this.fullDeviceNumber_;
        }

        public final int getFullDeviceNumberCount() {
            return this.fullDeviceNumber_.size();
        }

        public final String getFullDeviceNumber(int i) {
            return (String) this.fullDeviceNumber_.get(i);
        }

        public final ByteString getFullDeviceNumberBytes(int i) {
            return this.fullDeviceNumber_.getByteString(i);
        }

        public final boolean hasSourceIP() {
            return (this.bitField0_ & 131072) == 131072;
        }

        public final String getSourceIP() {
            Object obj = this.sourceIP_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sourceIP_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSourceIPBytes() {
            Object obj = this.sourceIP_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sourceIP_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceSIMNumber() {
            return (this.bitField0_ & 262144) == 262144;
        }

        public final int getDeviceSIMNumber() {
            return this.deviceSIMNumber_;
        }

        public final boolean hasAccountIDHash() {
            return (this.bitField0_ & 524288) == 524288;
        }

        public final String getAccountIDHash() {
            Object obj = this.accountIDHash_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.accountIDHash_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAccountIDHashBytes() {
            Object obj = this.accountIDHash_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.accountIDHash_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.deviceType_ = DeviceType.PHONE;
            this.deviceLanguage_ = "";
            this.deviceName_ = "";
            this.applyChannel_ = ApplyChannel.XIAOMI;
            this.deviceLocation_ = "";
            this.extensiveDeviceLocation_ = "";
            this.captureMethod_ = CaptureMethod.MANUAL;
            this.accountEmailLife_ = "";
            this.cardHolderName_ = "";
            this.billingAddress_ = "";
            this.billingZip_ = "";
            this.riskScore_ = 0;
            this.riskStandardVersion_ = "";
            this.deviceScore_ = 0;
            this.accountScore_ = 0;
            this.phoneNumberScore_ = 0;
            this.riskReasonCode_ = LazyStringArrayList.EMPTY;
            this.deviceNumber_ = "";
            this.fullDeviceNumber_ = LazyStringArrayList.EMPTY;
            this.sourceIP_ = "";
            this.deviceSIMNumber_ = 0;
            this.accountIDHash_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeEnum(1, this.deviceType_.getNumber());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getDeviceLanguageBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getDeviceNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeEnum(4, this.applyChannel_.getNumber());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getDeviceLocationBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(6, getExtensiveDeviceLocationBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeEnum(7, this.captureMethod_.getNumber());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getAccountEmailLifeBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getCardHolderNameBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getBillingAddressBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getBillingZipBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeInt32(12, this.riskScore_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeBytes(13, getRiskStandardVersionBytes());
            }
            if ((this.bitField0_ & 8192) == 8192) {
                codedOutputStream.writeInt32(14, this.deviceScore_);
            }
            if ((this.bitField0_ & 16384) == 16384) {
                codedOutputStream.writeInt32(15, this.accountScore_);
            }
            if ((this.bitField0_ & 32768) == 32768) {
                codedOutputStream.writeInt32(16, this.phoneNumberScore_);
            }
            for (int i = 0; i < this.riskReasonCode_.size(); i++) {
                codedOutputStream.writeBytes(17, this.riskReasonCode_.getByteString(i));
            }
            if ((this.bitField0_ & 65536) == 65536) {
                codedOutputStream.writeBytes(18, getDeviceNumberBytes());
            }
            for (int i2 = 0; i2 < this.fullDeviceNumber_.size(); i2++) {
                codedOutputStream.writeBytes(19, this.fullDeviceNumber_.getByteString(i2));
            }
            if ((this.bitField0_ & 131072) == 131072) {
                codedOutputStream.writeBytes(20, getSourceIPBytes());
            }
            if ((this.bitField0_ & 262144) == 262144) {
                codedOutputStream.writeInt32(21, this.deviceSIMNumber_);
            }
            if ((this.bitField0_ & 524288) == 524288) {
                codedOutputStream.writeBytes(22, getAccountIDHashBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeEnumSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeEnumSize(1, this.deviceType_.getNumber()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeEnumSize += CodedOutputStream.computeBytesSize(2, getDeviceLanguageBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeEnumSize += CodedOutputStream.computeBytesSize(3, getDeviceNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                computeEnumSize += CodedOutputStream.computeEnumSize(4, this.applyChannel_.getNumber());
            }
            if ((this.bitField0_ & 16) == 16) {
                computeEnumSize += CodedOutputStream.computeBytesSize(5, getDeviceLocationBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                computeEnumSize += CodedOutputStream.computeBytesSize(6, getExtensiveDeviceLocationBytes());
            }
            if ((this.bitField0_ & 64) == 64) {
                computeEnumSize += CodedOutputStream.computeEnumSize(7, this.captureMethod_.getNumber());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                computeEnumSize += CodedOutputStream.computeBytesSize(8, getAccountEmailLifeBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                computeEnumSize += CodedOutputStream.computeBytesSize(9, getCardHolderNameBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                computeEnumSize += CodedOutputStream.computeBytesSize(10, getBillingAddressBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                computeEnumSize += CodedOutputStream.computeBytesSize(11, getBillingZipBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                computeEnumSize += CodedOutputStream.computeInt32Size(12, this.riskScore_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                computeEnumSize += CodedOutputStream.computeBytesSize(13, getRiskStandardVersionBytes());
            }
            if ((this.bitField0_ & 8192) == 8192) {
                computeEnumSize += CodedOutputStream.computeInt32Size(14, this.deviceScore_);
            }
            if ((this.bitField0_ & 16384) == 16384) {
                computeEnumSize += CodedOutputStream.computeInt32Size(15, this.accountScore_);
            }
            if ((this.bitField0_ & 32768) == 32768) {
                computeEnumSize += CodedOutputStream.computeInt32Size(16, this.phoneNumberScore_);
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.riskReasonCode_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.riskReasonCode_.getByteString(i3));
            }
            int size = computeEnumSize + i2 + (getRiskReasonCodeList().size() * 2);
            if ((this.bitField0_ & 65536) == 65536) {
                size += CodedOutputStream.computeBytesSize(18, getDeviceNumberBytes());
            }
            int i4 = 0;
            for (int i5 = 0; i5 < this.fullDeviceNumber_.size(); i5++) {
                i4 += CodedOutputStream.computeBytesSizeNoTag(this.fullDeviceNumber_.getByteString(i5));
            }
            int size2 = size + i4 + (getFullDeviceNumberList().size() * 2);
            if ((this.bitField0_ & 131072) == 131072) {
                size2 += CodedOutputStream.computeBytesSize(20, getSourceIPBytes());
            }
            if ((this.bitField0_ & 262144) == 262144) {
                size2 += CodedOutputStream.computeInt32Size(21, this.deviceSIMNumber_);
            }
            if ((this.bitField0_ & 524288) == 524288) {
                size2 += CodedOutputStream.computeBytesSize(22, getAccountIDHashBytes());
            }
            int serializedSize = size2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static RiskInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static RiskInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static RiskInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static RiskInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static RiskInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static RiskInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static RiskInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static RiskInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static RiskInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static RiskInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(RiskInfo riskInfo) {
            return newBuilder().mergeFrom(riskInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements RiskInfoOrBuilder {
            private Object accountEmailLife_;
            private Object accountIDHash_;
            private int accountScore_;
            private ApplyChannel applyChannel_;
            private Object billingAddress_;
            private Object billingZip_;
            private int bitField0_;
            private CaptureMethod captureMethod_;
            private Object cardHolderName_;
            private Object deviceLanguage_;
            private Object deviceLocation_;
            private Object deviceName_;
            private Object deviceNumber_;
            private int deviceSIMNumber_;
            private int deviceScore_;
            private DeviceType deviceType_;
            private Object extensiveDeviceLocation_;
            private LazyStringList fullDeviceNumber_;
            private int phoneNumberScore_;
            private LazyStringList riskReasonCode_;
            private int riskScore_;
            private Object riskStandardVersion_;
            private Object sourceIP_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(RiskInfo.class, Builder.class);
            }

            private Builder() {
                this.deviceType_ = DeviceType.PHONE;
                this.deviceLanguage_ = "";
                this.deviceName_ = "";
                this.applyChannel_ = ApplyChannel.XIAOMI;
                this.deviceLocation_ = "";
                this.extensiveDeviceLocation_ = "";
                this.captureMethod_ = CaptureMethod.MANUAL;
                this.accountEmailLife_ = "";
                this.cardHolderName_ = "";
                this.billingAddress_ = "";
                this.billingZip_ = "";
                this.riskStandardVersion_ = "";
                this.riskReasonCode_ = LazyStringArrayList.EMPTY;
                this.deviceNumber_ = "";
                this.fullDeviceNumber_ = LazyStringArrayList.EMPTY;
                this.sourceIP_ = "";
                this.accountIDHash_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceType_ = DeviceType.PHONE;
                this.deviceLanguage_ = "";
                this.deviceName_ = "";
                this.applyChannel_ = ApplyChannel.XIAOMI;
                this.deviceLocation_ = "";
                this.extensiveDeviceLocation_ = "";
                this.captureMethod_ = CaptureMethod.MANUAL;
                this.accountEmailLife_ = "";
                this.cardHolderName_ = "";
                this.billingAddress_ = "";
                this.billingZip_ = "";
                this.riskStandardVersion_ = "";
                this.riskReasonCode_ = LazyStringArrayList.EMPTY;
                this.deviceNumber_ = "";
                this.fullDeviceNumber_ = LazyStringArrayList.EMPTY;
                this.sourceIP_ = "";
                this.accountIDHash_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = RiskInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.deviceType_ = DeviceType.PHONE;
                this.bitField0_ &= -2;
                this.deviceLanguage_ = "";
                this.bitField0_ &= -3;
                this.deviceName_ = "";
                this.bitField0_ &= -5;
                this.applyChannel_ = ApplyChannel.XIAOMI;
                this.bitField0_ &= -9;
                this.deviceLocation_ = "";
                this.bitField0_ &= -17;
                this.extensiveDeviceLocation_ = "";
                this.bitField0_ &= -33;
                this.captureMethod_ = CaptureMethod.MANUAL;
                this.bitField0_ &= -65;
                this.accountEmailLife_ = "";
                this.bitField0_ &= -129;
                this.cardHolderName_ = "";
                this.bitField0_ &= -257;
                this.billingAddress_ = "";
                this.bitField0_ &= -513;
                this.billingZip_ = "";
                this.bitField0_ &= -1025;
                this.riskScore_ = 0;
                this.bitField0_ &= -2049;
                this.riskStandardVersion_ = "";
                this.bitField0_ &= -4097;
                this.deviceScore_ = 0;
                this.bitField0_ &= -8193;
                this.accountScore_ = 0;
                this.bitField0_ &= -16385;
                this.phoneNumberScore_ = 0;
                this.bitField0_ &= -32769;
                this.riskReasonCode_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -65537;
                this.deviceNumber_ = "";
                this.bitField0_ &= -131073;
                this.fullDeviceNumber_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -262145;
                this.sourceIP_ = "";
                this.bitField0_ &= -524289;
                this.deviceSIMNumber_ = 0;
                this.bitField0_ &= -1048577;
                this.accountIDHash_ = "";
                this.bitField0_ &= -2097153;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RiskInfo_descriptor;
            }

            public final RiskInfo getDefaultInstanceForType() {
                return RiskInfo.getDefaultInstance();
            }

            public final RiskInfo build() {
                RiskInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final RiskInfo buildPartial() {
                RiskInfo riskInfo = new RiskInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                riskInfo.deviceType_ = this.deviceType_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                riskInfo.deviceLanguage_ = this.deviceLanguage_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                riskInfo.deviceName_ = this.deviceName_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                riskInfo.applyChannel_ = this.applyChannel_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                riskInfo.deviceLocation_ = this.deviceLocation_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                riskInfo.extensiveDeviceLocation_ = this.extensiveDeviceLocation_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                riskInfo.captureMethod_ = this.captureMethod_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                riskInfo.accountEmailLife_ = this.accountEmailLife_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                riskInfo.cardHolderName_ = this.cardHolderName_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                riskInfo.billingAddress_ = this.billingAddress_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                riskInfo.billingZip_ = this.billingZip_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                riskInfo.riskScore_ = this.riskScore_;
                if ((i & 4096) == 4096) {
                    i2 |= 4096;
                }
                riskInfo.riskStandardVersion_ = this.riskStandardVersion_;
                if ((i & 8192) == 8192) {
                    i2 |= 8192;
                }
                riskInfo.deviceScore_ = this.deviceScore_;
                if ((i & 16384) == 16384) {
                    i2 |= 16384;
                }
                riskInfo.accountScore_ = this.accountScore_;
                if ((32768 & i) == 32768) {
                    i2 |= 32768;
                }
                riskInfo.phoneNumberScore_ = this.phoneNumberScore_;
                if ((this.bitField0_ & 65536) == 65536) {
                    this.riskReasonCode_ = new UnmodifiableLazyStringList(this.riskReasonCode_);
                    this.bitField0_ &= -65537;
                }
                riskInfo.riskReasonCode_ = this.riskReasonCode_;
                if ((131072 & i) == 131072) {
                    i2 |= 65536;
                }
                riskInfo.deviceNumber_ = this.deviceNumber_;
                if ((this.bitField0_ & 262144) == 262144) {
                    this.fullDeviceNumber_ = new UnmodifiableLazyStringList(this.fullDeviceNumber_);
                    this.bitField0_ &= -262145;
                }
                riskInfo.fullDeviceNumber_ = this.fullDeviceNumber_;
                if ((524288 & i) == 524288) {
                    i2 |= 131072;
                }
                riskInfo.sourceIP_ = this.sourceIP_;
                if ((1048576 & i) == 1048576) {
                    i2 |= 262144;
                }
                riskInfo.deviceSIMNumber_ = this.deviceSIMNumber_;
                if ((i & 2097152) == 2097152) {
                    i2 |= 524288;
                }
                riskInfo.accountIDHash_ = this.accountIDHash_;
                riskInfo.bitField0_ = i2;
                onBuilt();
                return riskInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof RiskInfo) {
                    return mergeFrom((RiskInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(RiskInfo riskInfo) {
                if (riskInfo == RiskInfo.getDefaultInstance()) {
                    return this;
                }
                if (riskInfo.hasDeviceType()) {
                    setDeviceType(riskInfo.getDeviceType());
                }
                if (riskInfo.hasDeviceLanguage()) {
                    this.bitField0_ |= 2;
                    this.deviceLanguage_ = riskInfo.deviceLanguage_;
                    onChanged();
                }
                if (riskInfo.hasDeviceName()) {
                    this.bitField0_ |= 4;
                    this.deviceName_ = riskInfo.deviceName_;
                    onChanged();
                }
                if (riskInfo.hasApplyChannel()) {
                    setApplyChannel(riskInfo.getApplyChannel());
                }
                if (riskInfo.hasDeviceLocation()) {
                    this.bitField0_ |= 16;
                    this.deviceLocation_ = riskInfo.deviceLocation_;
                    onChanged();
                }
                if (riskInfo.hasExtensiveDeviceLocation()) {
                    this.bitField0_ |= 32;
                    this.extensiveDeviceLocation_ = riskInfo.extensiveDeviceLocation_;
                    onChanged();
                }
                if (riskInfo.hasCaptureMethod()) {
                    setCaptureMethod(riskInfo.getCaptureMethod());
                }
                if (riskInfo.hasAccountEmailLife()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.accountEmailLife_ = riskInfo.accountEmailLife_;
                    onChanged();
                }
                if (riskInfo.hasCardHolderName()) {
                    this.bitField0_ |= 256;
                    this.cardHolderName_ = riskInfo.cardHolderName_;
                    onChanged();
                }
                if (riskInfo.hasBillingAddress()) {
                    this.bitField0_ |= 512;
                    this.billingAddress_ = riskInfo.billingAddress_;
                    onChanged();
                }
                if (riskInfo.hasBillingZip()) {
                    this.bitField0_ |= 1024;
                    this.billingZip_ = riskInfo.billingZip_;
                    onChanged();
                }
                if (riskInfo.hasRiskScore()) {
                    setRiskScore(riskInfo.getRiskScore());
                }
                if (riskInfo.hasRiskStandardVersion()) {
                    this.bitField0_ |= 4096;
                    this.riskStandardVersion_ = riskInfo.riskStandardVersion_;
                    onChanged();
                }
                if (riskInfo.hasDeviceScore()) {
                    setDeviceScore(riskInfo.getDeviceScore());
                }
                if (riskInfo.hasAccountScore()) {
                    setAccountScore(riskInfo.getAccountScore());
                }
                if (riskInfo.hasPhoneNumberScore()) {
                    setPhoneNumberScore(riskInfo.getPhoneNumberScore());
                }
                if (!riskInfo.riskReasonCode_.isEmpty()) {
                    if (this.riskReasonCode_.isEmpty()) {
                        this.riskReasonCode_ = riskInfo.riskReasonCode_;
                        this.bitField0_ &= -65537;
                    } else {
                        ensureRiskReasonCodeIsMutable();
                        this.riskReasonCode_.addAll(riskInfo.riskReasonCode_);
                    }
                    onChanged();
                }
                if (riskInfo.hasDeviceNumber()) {
                    this.bitField0_ |= 131072;
                    this.deviceNumber_ = riskInfo.deviceNumber_;
                    onChanged();
                }
                if (!riskInfo.fullDeviceNumber_.isEmpty()) {
                    if (this.fullDeviceNumber_.isEmpty()) {
                        this.fullDeviceNumber_ = riskInfo.fullDeviceNumber_;
                        this.bitField0_ &= -262145;
                    } else {
                        ensureFullDeviceNumberIsMutable();
                        this.fullDeviceNumber_.addAll(riskInfo.fullDeviceNumber_);
                    }
                    onChanged();
                }
                if (riskInfo.hasSourceIP()) {
                    this.bitField0_ |= 524288;
                    this.sourceIP_ = riskInfo.sourceIP_;
                    onChanged();
                }
                if (riskInfo.hasDeviceSIMNumber()) {
                    setDeviceSIMNumber(riskInfo.getDeviceSIMNumber());
                }
                if (riskInfo.hasAccountIDHash()) {
                    this.bitField0_ |= 2097152;
                    this.accountIDHash_ = riskInfo.accountIDHash_;
                    onChanged();
                }
                mergeUnknownFields(riskInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                RiskInfo riskInfo;
                RiskInfo riskInfo2 = null;
                try {
                    RiskInfo parsePartialFrom = RiskInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    riskInfo = (RiskInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    riskInfo2 = riskInfo;
                }
                if (riskInfo2 != null) {
                    mergeFrom(riskInfo2);
                }
                throw th;
            }

            public final boolean hasDeviceType() {
                return (this.bitField0_ & 1) == 1;
            }

            public final DeviceType getDeviceType() {
                return this.deviceType_;
            }

            public final Builder setDeviceType(DeviceType deviceType) {
                if (deviceType != null) {
                    this.bitField0_ |= 1;
                    this.deviceType_ = deviceType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceType() {
                this.bitField0_ &= -2;
                this.deviceType_ = DeviceType.PHONE;
                onChanged();
                return this;
            }

            public final boolean hasDeviceLanguage() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getDeviceLanguage() {
                Object obj = this.deviceLanguage_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceLanguage_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceLanguageBytes() {
                Object obj = this.deviceLanguage_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceLanguage_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceLanguage(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.deviceLanguage_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceLanguage() {
                this.bitField0_ &= -3;
                this.deviceLanguage_ = RiskInfo.getDefaultInstance().getDeviceLanguage();
                onChanged();
                return this;
            }

            public final Builder setDeviceLanguageBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.deviceLanguage_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceName() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getDeviceName() {
                Object obj = this.deviceName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceNameBytes() {
                Object obj = this.deviceName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceName(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.deviceName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceName() {
                this.bitField0_ &= -5;
                this.deviceName_ = RiskInfo.getDefaultInstance().getDeviceName();
                onChanged();
                return this;
            }

            public final Builder setDeviceNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.deviceName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasApplyChannel() {
                return (this.bitField0_ & 8) == 8;
            }

            public final ApplyChannel getApplyChannel() {
                return this.applyChannel_;
            }

            public final Builder setApplyChannel(ApplyChannel applyChannel) {
                if (applyChannel != null) {
                    this.bitField0_ |= 8;
                    this.applyChannel_ = applyChannel;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearApplyChannel() {
                this.bitField0_ &= -9;
                this.applyChannel_ = ApplyChannel.XIAOMI;
                onChanged();
                return this;
            }

            public final boolean hasDeviceLocation() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getDeviceLocation() {
                Object obj = this.deviceLocation_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceLocation_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceLocationBytes() {
                Object obj = this.deviceLocation_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceLocation_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceLocation(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.deviceLocation_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceLocation() {
                this.bitField0_ &= -17;
                this.deviceLocation_ = RiskInfo.getDefaultInstance().getDeviceLocation();
                onChanged();
                return this;
            }

            public final Builder setDeviceLocationBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.deviceLocation_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasExtensiveDeviceLocation() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getExtensiveDeviceLocation() {
                Object obj = this.extensiveDeviceLocation_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.extensiveDeviceLocation_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getExtensiveDeviceLocationBytes() {
                Object obj = this.extensiveDeviceLocation_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.extensiveDeviceLocation_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setExtensiveDeviceLocation(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.extensiveDeviceLocation_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearExtensiveDeviceLocation() {
                this.bitField0_ &= -33;
                this.extensiveDeviceLocation_ = RiskInfo.getDefaultInstance().getExtensiveDeviceLocation();
                onChanged();
                return this;
            }

            public final Builder setExtensiveDeviceLocationBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.extensiveDeviceLocation_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCaptureMethod() {
                return (this.bitField0_ & 64) == 64;
            }

            public final CaptureMethod getCaptureMethod() {
                return this.captureMethod_;
            }

            public final Builder setCaptureMethod(CaptureMethod captureMethod) {
                if (captureMethod != null) {
                    this.bitField0_ |= 64;
                    this.captureMethod_ = captureMethod;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCaptureMethod() {
                this.bitField0_ &= -65;
                this.captureMethod_ = CaptureMethod.MANUAL;
                onChanged();
                return this;
            }

            public final boolean hasAccountEmailLife() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getAccountEmailLife() {
                Object obj = this.accountEmailLife_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.accountEmailLife_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAccountEmailLifeBytes() {
                Object obj = this.accountEmailLife_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.accountEmailLife_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAccountEmailLife(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.accountEmailLife_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAccountEmailLife() {
                this.bitField0_ &= -129;
                this.accountEmailLife_ = RiskInfo.getDefaultInstance().getAccountEmailLife();
                onChanged();
                return this;
            }

            public final Builder setAccountEmailLifeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.accountEmailLife_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardHolderName() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getCardHolderName() {
                Object obj = this.cardHolderName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardHolderName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardHolderNameBytes() {
                Object obj = this.cardHolderName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardHolderName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardHolderName(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.cardHolderName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardHolderName() {
                this.bitField0_ &= -257;
                this.cardHolderName_ = RiskInfo.getDefaultInstance().getCardHolderName();
                onChanged();
                return this;
            }

            public final Builder setCardHolderNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.cardHolderName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBillingAddress() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getBillingAddress() {
                Object obj = this.billingAddress_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.billingAddress_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBillingAddressBytes() {
                Object obj = this.billingAddress_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.billingAddress_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBillingAddress(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.billingAddress_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBillingAddress() {
                this.bitField0_ &= -513;
                this.billingAddress_ = RiskInfo.getDefaultInstance().getBillingAddress();
                onChanged();
                return this;
            }

            public final Builder setBillingAddressBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.billingAddress_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBillingZip() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getBillingZip() {
                Object obj = this.billingZip_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.billingZip_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBillingZipBytes() {
                Object obj = this.billingZip_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.billingZip_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBillingZip(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.billingZip_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBillingZip() {
                this.bitField0_ &= -1025;
                this.billingZip_ = RiskInfo.getDefaultInstance().getBillingZip();
                onChanged();
                return this;
            }

            public final Builder setBillingZipBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.billingZip_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasRiskScore() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public final int getRiskScore() {
                return this.riskScore_;
            }

            public final Builder setRiskScore(int i) {
                this.bitField0_ |= 2048;
                this.riskScore_ = i;
                onChanged();
                return this;
            }

            public final Builder clearRiskScore() {
                this.bitField0_ &= -2049;
                this.riskScore_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasRiskStandardVersion() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public final String getRiskStandardVersion() {
                Object obj = this.riskStandardVersion_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.riskStandardVersion_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getRiskStandardVersionBytes() {
                Object obj = this.riskStandardVersion_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.riskStandardVersion_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setRiskStandardVersion(String str) {
                if (str != null) {
                    this.bitField0_ |= 4096;
                    this.riskStandardVersion_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearRiskStandardVersion() {
                this.bitField0_ &= -4097;
                this.riskStandardVersion_ = RiskInfo.getDefaultInstance().getRiskStandardVersion();
                onChanged();
                return this;
            }

            public final Builder setRiskStandardVersionBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4096;
                    this.riskStandardVersion_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceScore() {
                return (this.bitField0_ & 8192) == 8192;
            }

            public final int getDeviceScore() {
                return this.deviceScore_;
            }

            public final Builder setDeviceScore(int i) {
                this.bitField0_ |= 8192;
                this.deviceScore_ = i;
                onChanged();
                return this;
            }

            public final Builder clearDeviceScore() {
                this.bitField0_ &= -8193;
                this.deviceScore_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasAccountScore() {
                return (this.bitField0_ & 16384) == 16384;
            }

            public final int getAccountScore() {
                return this.accountScore_;
            }

            public final Builder setAccountScore(int i) {
                this.bitField0_ |= 16384;
                this.accountScore_ = i;
                onChanged();
                return this;
            }

            public final Builder clearAccountScore() {
                this.bitField0_ &= -16385;
                this.accountScore_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasPhoneNumberScore() {
                return (this.bitField0_ & 32768) == 32768;
            }

            public final int getPhoneNumberScore() {
                return this.phoneNumberScore_;
            }

            public final Builder setPhoneNumberScore(int i) {
                this.bitField0_ |= 32768;
                this.phoneNumberScore_ = i;
                onChanged();
                return this;
            }

            public final Builder clearPhoneNumberScore() {
                this.bitField0_ &= -32769;
                this.phoneNumberScore_ = 0;
                onChanged();
                return this;
            }

            private void ensureRiskReasonCodeIsMutable() {
                if ((this.bitField0_ & 65536) != 65536) {
                    this.riskReasonCode_ = new LazyStringArrayList(this.riskReasonCode_);
                    this.bitField0_ |= 65536;
                }
            }

            public final List<String> getRiskReasonCodeList() {
                return Collections.unmodifiableList(this.riskReasonCode_);
            }

            public final int getRiskReasonCodeCount() {
                return this.riskReasonCode_.size();
            }

            public final String getRiskReasonCode(int i) {
                return (String) this.riskReasonCode_.get(i);
            }

            public final ByteString getRiskReasonCodeBytes(int i) {
                return this.riskReasonCode_.getByteString(i);
            }

            public final Builder setRiskReasonCode(int i, String str) {
                if (str != null) {
                    ensureRiskReasonCodeIsMutable();
                    this.riskReasonCode_.set(i, str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder addRiskReasonCode(String str) {
                if (str != null) {
                    ensureRiskReasonCodeIsMutable();
                    this.riskReasonCode_.add(str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<java.lang.String>, com.google.protobuf.LazyStringList]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllRiskReasonCode(Iterable<String> iterable) {
                ensureRiskReasonCodeIsMutable();
                GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.riskReasonCode_);
                onChanged();
                return this;
            }

            public final Builder clearRiskReasonCode() {
                this.riskReasonCode_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -65537;
                onChanged();
                return this;
            }

            public final Builder addRiskReasonCodeBytes(ByteString byteString) {
                if (byteString != null) {
                    ensureRiskReasonCodeIsMutable();
                    this.riskReasonCode_.add(byteString);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceNumber() {
                return (this.bitField0_ & 131072) == 131072;
            }

            public final String getDeviceNumber() {
                Object obj = this.deviceNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceNumberBytes() {
                Object obj = this.deviceNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 131072;
                    this.deviceNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceNumber() {
                this.bitField0_ &= -131073;
                this.deviceNumber_ = RiskInfo.getDefaultInstance().getDeviceNumber();
                onChanged();
                return this;
            }

            public final Builder setDeviceNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 131072;
                    this.deviceNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            private void ensureFullDeviceNumberIsMutable() {
                if ((this.bitField0_ & 262144) != 262144) {
                    this.fullDeviceNumber_ = new LazyStringArrayList(this.fullDeviceNumber_);
                    this.bitField0_ |= 262144;
                }
            }

            public final List<String> getFullDeviceNumberList() {
                return Collections.unmodifiableList(this.fullDeviceNumber_);
            }

            public final int getFullDeviceNumberCount() {
                return this.fullDeviceNumber_.size();
            }

            public final String getFullDeviceNumber(int i) {
                return (String) this.fullDeviceNumber_.get(i);
            }

            public final ByteString getFullDeviceNumberBytes(int i) {
                return this.fullDeviceNumber_.getByteString(i);
            }

            public final Builder setFullDeviceNumber(int i, String str) {
                if (str != null) {
                    ensureFullDeviceNumberIsMutable();
                    this.fullDeviceNumber_.set(i, str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder addFullDeviceNumber(String str) {
                if (str != null) {
                    ensureFullDeviceNumberIsMutable();
                    this.fullDeviceNumber_.add(str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<java.lang.String>, com.google.protobuf.LazyStringList]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllFullDeviceNumber(Iterable<String> iterable) {
                ensureFullDeviceNumberIsMutable();
                GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.fullDeviceNumber_);
                onChanged();
                return this;
            }

            public final Builder clearFullDeviceNumber() {
                this.fullDeviceNumber_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -262145;
                onChanged();
                return this;
            }

            public final Builder addFullDeviceNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    ensureFullDeviceNumberIsMutable();
                    this.fullDeviceNumber_.add(byteString);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSourceIP() {
                return (this.bitField0_ & 524288) == 524288;
            }

            public final String getSourceIP() {
                Object obj = this.sourceIP_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sourceIP_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSourceIPBytes() {
                Object obj = this.sourceIP_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sourceIP_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSourceIP(String str) {
                if (str != null) {
                    this.bitField0_ |= 524288;
                    this.sourceIP_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSourceIP() {
                this.bitField0_ &= -524289;
                this.sourceIP_ = RiskInfo.getDefaultInstance().getSourceIP();
                onChanged();
                return this;
            }

            public final Builder setSourceIPBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 524288;
                    this.sourceIP_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceSIMNumber() {
                return (this.bitField0_ & ExtractorMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES) == 1048576;
            }

            public final int getDeviceSIMNumber() {
                return this.deviceSIMNumber_;
            }

            public final Builder setDeviceSIMNumber(int i) {
                this.bitField0_ |= ExtractorMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES;
                this.deviceSIMNumber_ = i;
                onChanged();
                return this;
            }

            public final Builder clearDeviceSIMNumber() {
                this.bitField0_ &= -1048577;
                this.deviceSIMNumber_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasAccountIDHash() {
                return (this.bitField0_ & 2097152) == 2097152;
            }

            public final String getAccountIDHash() {
                Object obj = this.accountIDHash_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.accountIDHash_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAccountIDHashBytes() {
                Object obj = this.accountIDHash_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.accountIDHash_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAccountIDHash(String str) {
                if (str != null) {
                    this.bitField0_ |= 2097152;
                    this.accountIDHash_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAccountIDHash() {
                this.bitField0_ &= -2097153;
                this.accountIDHash_ = RiskInfo.getDefaultInstance().getAccountIDHash();
                onChanged();
                return this;
            }

            public final Builder setAccountIDHashBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2097152;
                    this.accountIDHash_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class CheckServiceRequest extends GeneratedMessage implements CheckServiceRequestOrBuilder {
        public static Parser<CheckServiceRequest> PARSER = new AbstractParser<CheckServiceRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CheckServiceRequest.AnonymousClass1 */

            public final CheckServiceRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new CheckServiceRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final CheckServiceRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cplc_;
        public DeviceInfo deviceInfo_;
        public Object extra_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public CommonRiskInfo riskInfo_;
        public ServiceType seviceType_;
        private final UnknownFieldSet unknownFields;

        private CheckServiceRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CheckServiceRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CheckServiceRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final CheckServiceRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        /* JADX INFO: additional move instructions added (1) to help type inference */
        /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v1, resolved type: com.miui.tsmclient.seitsm.TsmRpcModels$DeviceInfo$Builder} */
        /* JADX DEBUG: Multi-variable search result rejected for TypeSearchVarInfo{r5v4, resolved type: com.miui.tsmclient.seitsm.TsmRpcModels$CommonRiskInfo$Builder} */
        /* JADX WARN: Type inference failed for: r5v0 */
        /* JADX WARN: Type inference failed for: r5v6 */
        /* JADX WARN: Type inference failed for: r5v7 */
        /* JADX WARNING: Multi-variable type inference failed */
        private CheckServiceRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        ? r5 = 0;
                        if (readTag == 10) {
                            r5 = (this.bitField0_ & 1) == 1 ? this.deviceInfo_.toBuilder() : r5;
                            this.deviceInfo_ = (DeviceInfo) codedInputStream.readMessage(DeviceInfo.PARSER, extensionRegistryLite);
                            if (r5 != 0) {
                                r5.mergeFrom(this.deviceInfo_);
                                this.deviceInfo_ = r5.buildPartial();
                            }
                            this.bitField0_ |= 1;
                        } else if (readTag == 16) {
                            int readEnum = codedInputStream.readEnum();
                            ServiceType valueOf = ServiceType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(2, readEnum);
                            } else {
                                this.bitField0_ |= 2;
                                this.seviceType_ = valueOf;
                            }
                        } else if (readTag == 26) {
                            r5 = (this.bitField0_ & 4) == 4 ? this.riskInfo_.toBuilder() : r5;
                            this.riskInfo_ = (CommonRiskInfo) codedInputStream.readMessage(CommonRiskInfo.PARSER, extensionRegistryLite);
                            if (r5 != 0) {
                                r5.mergeFrom(this.riskInfo_);
                                this.riskInfo_ = r5.buildPartial();
                            }
                            this.bitField0_ |= 4;
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.extra_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CheckServiceRequest.class, Builder.class);
        }

        static {
            CheckServiceRequest checkServiceRequest = new CheckServiceRequest(true);
            defaultInstance = checkServiceRequest;
            checkServiceRequest.initFields();
        }

        public final Parser<CheckServiceRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasDeviceInfo() {
            return (this.bitField0_ & 1) == 1;
        }

        public final DeviceInfo getDeviceInfo() {
            return this.deviceInfo_;
        }

        public final DeviceInfoOrBuilder getDeviceInfoOrBuilder() {
            return this.deviceInfo_;
        }

        public final boolean hasSeviceType() {
            return (this.bitField0_ & 2) == 2;
        }

        public final ServiceType getSeviceType() {
            return this.seviceType_;
        }

        public final boolean hasRiskInfo() {
            return (this.bitField0_ & 4) == 4;
        }

        public final CommonRiskInfo getRiskInfo() {
            return this.riskInfo_;
        }

        public final CommonRiskInfoOrBuilder getRiskInfoOrBuilder() {
            return this.riskInfo_;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasExtra() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getExtra() {
            Object obj = this.extra_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.extra_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getExtraBytes() {
            Object obj = this.extra_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.extra_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.deviceInfo_ = DeviceInfo.getDefaultInstance();
            this.seviceType_ = ServiceType.BANK_CARD;
            this.riskInfo_ = CommonRiskInfo.getDefaultInstance();
            this.cplc_ = "";
            this.extra_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasDeviceInfo()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasSeviceType()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!getDeviceInfo().isInitialized()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeMessage(1, this.deviceInfo_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeEnum(2, this.seviceType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeMessage(3, this.riskInfo_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getCplcBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getExtraBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeMessageSize(1, this.deviceInfo_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeEnumSize(2, this.seviceType_.getNumber());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeMessageSize(3, this.riskInfo_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getCplcBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getExtraBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CheckServiceRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static CheckServiceRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static CheckServiceRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static CheckServiceRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static CheckServiceRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static CheckServiceRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static CheckServiceRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static CheckServiceRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static CheckServiceRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static CheckServiceRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CheckServiceRequest checkServiceRequest) {
            return newBuilder().mergeFrom(checkServiceRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements CheckServiceRequestOrBuilder {
            private int bitField0_;
            private Object cplc_;
            private SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> deviceInfoBuilder_;
            private DeviceInfo deviceInfo_;
            private Object extra_;
            private SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> riskInfoBuilder_;
            private CommonRiskInfo riskInfo_;
            private ServiceType seviceType_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CheckServiceRequest.class, Builder.class);
            }

            private Builder() {
                this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                this.seviceType_ = ServiceType.BANK_CARD;
                this.riskInfo_ = CommonRiskInfo.getDefaultInstance();
                this.cplc_ = "";
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                this.seviceType_ = ServiceType.BANK_CARD;
                this.riskInfo_ = CommonRiskInfo.getDefaultInstance();
                this.cplc_ = "";
                this.extra_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (CheckServiceRequest.alwaysUseFieldBuilders) {
                    getDeviceInfoFieldBuilder();
                    getRiskInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -2;
                this.seviceType_ = ServiceType.BANK_CARD;
                this.bitField0_ &= -3;
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder2 = this.riskInfoBuilder_;
                if (singleFieldBuilder2 == null) {
                    this.riskInfo_ = CommonRiskInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder2.clear();
                }
                this.bitField0_ &= -5;
                this.cplc_ = "";
                this.bitField0_ &= -9;
                this.extra_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckServiceRequest_descriptor;
            }

            public final CheckServiceRequest getDefaultInstanceForType() {
                return CheckServiceRequest.getDefaultInstance();
            }

            public final CheckServiceRequest build() {
                CheckServiceRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final CheckServiceRequest buildPartial() {
                CheckServiceRequest checkServiceRequest = new CheckServiceRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    checkServiceRequest.deviceInfo_ = this.deviceInfo_;
                } else {
                    checkServiceRequest.deviceInfo_ = singleFieldBuilder.build();
                }
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                checkServiceRequest.seviceType_ = this.seviceType_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder2 = this.riskInfoBuilder_;
                if (singleFieldBuilder2 == null) {
                    checkServiceRequest.riskInfo_ = this.riskInfo_;
                } else {
                    checkServiceRequest.riskInfo_ = singleFieldBuilder2.build();
                }
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                checkServiceRequest.cplc_ = this.cplc_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                checkServiceRequest.extra_ = this.extra_;
                checkServiceRequest.bitField0_ = i2;
                onBuilt();
                return checkServiceRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof CheckServiceRequest) {
                    return mergeFrom((CheckServiceRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(CheckServiceRequest checkServiceRequest) {
                if (checkServiceRequest == CheckServiceRequest.getDefaultInstance()) {
                    return this;
                }
                if (checkServiceRequest.hasDeviceInfo()) {
                    mergeDeviceInfo(checkServiceRequest.getDeviceInfo());
                }
                if (checkServiceRequest.hasSeviceType()) {
                    setSeviceType(checkServiceRequest.getSeviceType());
                }
                if (checkServiceRequest.hasRiskInfo()) {
                    mergeRiskInfo(checkServiceRequest.getRiskInfo());
                }
                if (checkServiceRequest.hasCplc()) {
                    this.bitField0_ |= 8;
                    this.cplc_ = checkServiceRequest.cplc_;
                    onChanged();
                }
                if (checkServiceRequest.hasExtra()) {
                    this.bitField0_ |= 16;
                    this.extra_ = checkServiceRequest.extra_;
                    onChanged();
                }
                mergeUnknownFields(checkServiceRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasDeviceInfo() && hasSeviceType() && getDeviceInfo().isInitialized()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                CheckServiceRequest checkServiceRequest;
                CheckServiceRequest checkServiceRequest2 = null;
                try {
                    CheckServiceRequest parsePartialFrom = CheckServiceRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    checkServiceRequest = (CheckServiceRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    checkServiceRequest2 = checkServiceRequest;
                }
                if (checkServiceRequest2 != null) {
                    mergeFrom(checkServiceRequest2);
                }
                throw th;
            }

            public final boolean hasDeviceInfo() {
                return (this.bitField0_ & 1) == 1;
            }

            public final DeviceInfo getDeviceInfo() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.deviceInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setDeviceInfo(DeviceInfo deviceInfo) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(deviceInfo);
                } else if (deviceInfo != null) {
                    this.deviceInfo_ = deviceInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 1;
                return this;
            }

            public final Builder setDeviceInfo(DeviceInfo.Builder builder) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 1;
                return this;
            }

            public final Builder mergeDeviceInfo(DeviceInfo deviceInfo) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 1) != 1 || this.deviceInfo_ == DeviceInfo.getDefaultInstance()) {
                        this.deviceInfo_ = deviceInfo;
                    } else {
                        this.deviceInfo_ = DeviceInfo.newBuilder(this.deviceInfo_).mergeFrom(deviceInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(deviceInfo);
                }
                this.bitField0_ |= 1;
                return this;
            }

            public final Builder clearDeviceInfo() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -2;
                return this;
            }

            public final DeviceInfo.Builder getDeviceInfoBuilder() {
                this.bitField0_ |= 1;
                onChanged();
                return getDeviceInfoFieldBuilder().getBuilder();
            }

            public final DeviceInfoOrBuilder getDeviceInfoOrBuilder() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.deviceInfo_;
            }

            private SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> getDeviceInfoFieldBuilder() {
                if (this.deviceInfoBuilder_ == null) {
                    this.deviceInfoBuilder_ = new SingleFieldBuilder<>(this.deviceInfo_, getParentForChildren(), isClean());
                    this.deviceInfo_ = null;
                }
                return this.deviceInfoBuilder_;
            }

            public final boolean hasSeviceType() {
                return (this.bitField0_ & 2) == 2;
            }

            public final ServiceType getSeviceType() {
                return this.seviceType_;
            }

            public final Builder setSeviceType(ServiceType serviceType) {
                if (serviceType != null) {
                    this.bitField0_ |= 2;
                    this.seviceType_ = serviceType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSeviceType() {
                this.bitField0_ &= -3;
                this.seviceType_ = ServiceType.BANK_CARD;
                onChanged();
                return this;
            }

            public final boolean hasRiskInfo() {
                return (this.bitField0_ & 4) == 4;
            }

            public final CommonRiskInfo getRiskInfo() {
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.riskInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setRiskInfo(CommonRiskInfo commonRiskInfo) {
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(commonRiskInfo);
                } else if (commonRiskInfo != null) {
                    this.riskInfo_ = commonRiskInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 4;
                return this;
            }

            public final Builder setRiskInfo(CommonRiskInfo.Builder builder) {
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 4;
                return this;
            }

            public final Builder mergeRiskInfo(CommonRiskInfo commonRiskInfo) {
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 4) != 4 || this.riskInfo_ == CommonRiskInfo.getDefaultInstance()) {
                        this.riskInfo_ = commonRiskInfo;
                    } else {
                        this.riskInfo_ = CommonRiskInfo.newBuilder(this.riskInfo_).mergeFrom(commonRiskInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(commonRiskInfo);
                }
                this.bitField0_ |= 4;
                return this;
            }

            public final Builder clearRiskInfo() {
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.riskInfo_ = CommonRiskInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -5;
                return this;
            }

            public final CommonRiskInfo.Builder getRiskInfoBuilder() {
                this.bitField0_ |= 4;
                onChanged();
                return getRiskInfoFieldBuilder().getBuilder();
            }

            public final CommonRiskInfoOrBuilder getRiskInfoOrBuilder() {
                SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> singleFieldBuilder = this.riskInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.riskInfo_;
            }

            private SingleFieldBuilder<CommonRiskInfo, CommonRiskInfo.Builder, CommonRiskInfoOrBuilder> getRiskInfoFieldBuilder() {
                if (this.riskInfoBuilder_ == null) {
                    this.riskInfoBuilder_ = new SingleFieldBuilder<>(this.riskInfo_, getParentForChildren(), isClean());
                    this.riskInfo_ = null;
                }
                return this.riskInfoBuilder_;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -9;
                this.cplc_ = CheckServiceRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasExtra() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getExtra() {
                Object obj = this.extra_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.extra_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getExtraBytes() {
                Object obj = this.extra_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.extra_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setExtra(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.extra_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearExtra() {
                this.bitField0_ &= -17;
                this.extra_ = CheckServiceRequest.getDefaultInstance().getExtra();
                onChanged();
                return this;
            }

            public final Builder setExtraBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.extra_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class CommonRiskInfo extends GeneratedMessage implements CommonRiskInfoOrBuilder {
        public static Parser<CommonRiskInfo> PARSER = new AbstractParser<CommonRiskInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CommonRiskInfo.AnonymousClass1 */

            public final CommonRiskInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new CommonRiskInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final CommonRiskInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object accountId_;
        public int bitField0_;
        public Object location_;
        public Object md5Imei_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public LazyStringList simNumber_;
        private final UnknownFieldSet unknownFields;

        private CommonRiskInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CommonRiskInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CommonRiskInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final CommonRiskInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CommonRiskInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.accountId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.md5Imei_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.location_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            if (!(z2 & true)) {
                                this.simNumber_ = new LazyStringArrayList();
                                z2 |= true;
                            }
                            this.simNumber_.add(codedInputStream.readBytes());
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.simNumber_ = new UnmodifiableLazyStringList(this.simNumber_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.simNumber_ = new UnmodifiableLazyStringList(this.simNumber_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(CommonRiskInfo.class, Builder.class);
        }

        static {
            CommonRiskInfo commonRiskInfo = new CommonRiskInfo(true);
            defaultInstance = commonRiskInfo;
            commonRiskInfo.initFields();
        }

        public final Parser<CommonRiskInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasAccountId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getAccountId() {
            Object obj = this.accountId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.accountId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAccountIdBytes() {
            Object obj = this.accountId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.accountId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMd5Imei() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getMd5Imei() {
            Object obj = this.md5Imei_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.md5Imei_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMd5ImeiBytes() {
            Object obj = this.md5Imei_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.md5Imei_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasLocation() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getLocation() {
            Object obj = this.location_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.location_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getLocationBytes() {
            Object obj = this.location_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.location_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final List<String> getSimNumberList() {
            return this.simNumber_;
        }

        public final int getSimNumberCount() {
            return this.simNumber_.size();
        }

        public final String getSimNumber(int i) {
            return (String) this.simNumber_.get(i);
        }

        public final ByteString getSimNumberBytes(int i) {
            return this.simNumber_.getByteString(i);
        }

        private void initFields() {
            this.accountId_ = "";
            this.md5Imei_ = "";
            this.location_ = "";
            this.simNumber_ = LazyStringArrayList.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getAccountIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getMd5ImeiBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getLocationBytes());
            }
            for (int i = 0; i < this.simNumber_.size(); i++) {
                codedOutputStream.writeBytes(4, this.simNumber_.getByteString(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getAccountIdBytes()) + 0 : 0;
            if ((this.bitField0_ & 2) == 2) {
                computeBytesSize += CodedOutputStream.computeBytesSize(2, getMd5ImeiBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                computeBytesSize += CodedOutputStream.computeBytesSize(3, getLocationBytes());
            }
            int i2 = 0;
            for (int i3 = 0; i3 < this.simNumber_.size(); i3++) {
                i2 += CodedOutputStream.computeBytesSizeNoTag(this.simNumber_.getByteString(i3));
            }
            int size = computeBytesSize + i2 + (getSimNumberList().size() * 1) + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = size;
            return size;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CommonRiskInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static CommonRiskInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static CommonRiskInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static CommonRiskInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static CommonRiskInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static CommonRiskInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static CommonRiskInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static CommonRiskInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static CommonRiskInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static CommonRiskInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CommonRiskInfo commonRiskInfo) {
            return newBuilder().mergeFrom(commonRiskInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements CommonRiskInfoOrBuilder {
            private Object accountId_;
            private int bitField0_;
            private Object location_;
            private Object md5Imei_;
            private LazyStringList simNumber_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(CommonRiskInfo.class, Builder.class);
            }

            private Builder() {
                this.accountId_ = "";
                this.md5Imei_ = "";
                this.location_ = "";
                this.simNumber_ = LazyStringArrayList.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.accountId_ = "";
                this.md5Imei_ = "";
                this.location_ = "";
                this.simNumber_ = LazyStringArrayList.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = CommonRiskInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.accountId_ = "";
                this.bitField0_ &= -2;
                this.md5Imei_ = "";
                this.bitField0_ &= -3;
                this.location_ = "";
                this.bitField0_ &= -5;
                this.simNumber_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CommonRiskInfo_descriptor;
            }

            public final CommonRiskInfo getDefaultInstanceForType() {
                return CommonRiskInfo.getDefaultInstance();
            }

            public final CommonRiskInfo build() {
                CommonRiskInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final CommonRiskInfo buildPartial() {
                CommonRiskInfo commonRiskInfo = new CommonRiskInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                commonRiskInfo.accountId_ = this.accountId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                commonRiskInfo.md5Imei_ = this.md5Imei_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                commonRiskInfo.location_ = this.location_;
                if ((this.bitField0_ & 8) == 8) {
                    this.simNumber_ = new UnmodifiableLazyStringList(this.simNumber_);
                    this.bitField0_ &= -9;
                }
                commonRiskInfo.simNumber_ = this.simNumber_;
                commonRiskInfo.bitField0_ = i2;
                onBuilt();
                return commonRiskInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof CommonRiskInfo) {
                    return mergeFrom((CommonRiskInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(CommonRiskInfo commonRiskInfo) {
                if (commonRiskInfo == CommonRiskInfo.getDefaultInstance()) {
                    return this;
                }
                if (commonRiskInfo.hasAccountId()) {
                    this.bitField0_ |= 1;
                    this.accountId_ = commonRiskInfo.accountId_;
                    onChanged();
                }
                if (commonRiskInfo.hasMd5Imei()) {
                    this.bitField0_ |= 2;
                    this.md5Imei_ = commonRiskInfo.md5Imei_;
                    onChanged();
                }
                if (commonRiskInfo.hasLocation()) {
                    this.bitField0_ |= 4;
                    this.location_ = commonRiskInfo.location_;
                    onChanged();
                }
                if (!commonRiskInfo.simNumber_.isEmpty()) {
                    if (this.simNumber_.isEmpty()) {
                        this.simNumber_ = commonRiskInfo.simNumber_;
                        this.bitField0_ &= -9;
                    } else {
                        ensureSimNumberIsMutable();
                        this.simNumber_.addAll(commonRiskInfo.simNumber_);
                    }
                    onChanged();
                }
                mergeUnknownFields(commonRiskInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                CommonRiskInfo commonRiskInfo;
                CommonRiskInfo commonRiskInfo2 = null;
                try {
                    CommonRiskInfo parsePartialFrom = CommonRiskInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    commonRiskInfo = (CommonRiskInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    commonRiskInfo2 = commonRiskInfo;
                }
                if (commonRiskInfo2 != null) {
                    mergeFrom(commonRiskInfo2);
                }
                throw th;
            }

            public final boolean hasAccountId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getAccountId() {
                Object obj = this.accountId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.accountId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAccountIdBytes() {
                Object obj = this.accountId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.accountId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAccountId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.accountId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAccountId() {
                this.bitField0_ &= -2;
                this.accountId_ = CommonRiskInfo.getDefaultInstance().getAccountId();
                onChanged();
                return this;
            }

            public final Builder setAccountIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.accountId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMd5Imei() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getMd5Imei() {
                Object obj = this.md5Imei_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.md5Imei_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMd5ImeiBytes() {
                Object obj = this.md5Imei_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.md5Imei_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMd5Imei(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.md5Imei_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMd5Imei() {
                this.bitField0_ &= -3;
                this.md5Imei_ = CommonRiskInfo.getDefaultInstance().getMd5Imei();
                onChanged();
                return this;
            }

            public final Builder setMd5ImeiBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.md5Imei_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasLocation() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getLocation() {
                Object obj = this.location_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.location_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getLocationBytes() {
                Object obj = this.location_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.location_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setLocation(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.location_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearLocation() {
                this.bitField0_ &= -5;
                this.location_ = CommonRiskInfo.getDefaultInstance().getLocation();
                onChanged();
                return this;
            }

            public final Builder setLocationBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.location_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            private void ensureSimNumberIsMutable() {
                if ((this.bitField0_ & 8) != 8) {
                    this.simNumber_ = new LazyStringArrayList(this.simNumber_);
                    this.bitField0_ |= 8;
                }
            }

            public final List<String> getSimNumberList() {
                return Collections.unmodifiableList(this.simNumber_);
            }

            public final int getSimNumberCount() {
                return this.simNumber_.size();
            }

            public final String getSimNumber(int i) {
                return (String) this.simNumber_.get(i);
            }

            public final ByteString getSimNumberBytes(int i) {
                return this.simNumber_.getByteString(i);
            }

            public final Builder setSimNumber(int i, String str) {
                if (str != null) {
                    ensureSimNumberIsMutable();
                    this.simNumber_.set(i, str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder addSimNumber(String str) {
                if (str != null) {
                    ensureSimNumberIsMutable();
                    this.simNumber_.add(str);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<java.lang.String>, com.google.protobuf.LazyStringList]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllSimNumber(Iterable<String> iterable) {
                ensureSimNumberIsMutable();
                GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.simNumber_);
                onChanged();
                return this;
            }

            public final Builder clearSimNumber() {
                this.simNumber_ = LazyStringArrayList.EMPTY;
                this.bitField0_ &= -9;
                onChanged();
                return this;
            }

            public final Builder addSimNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    ensureSimNumberIsMutable();
                    this.simNumber_.add(byteString);
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class CopyMifareCardRequest extends GeneratedMessage implements CopyMifareCardRequestOrBuilder {
        public static Parser<CopyMifareCardRequest> PARSER = new AbstractParser<CopyMifareCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CopyMifareCardRequest.AnonymousClass1 */

            public final CopyMifareCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new CopyMifareCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final CopyMifareCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object atqa_;
        public int bitField0_;
        public MifareCardType cardType_;
        public Object content_;
        public Object md5Imei_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sak_;
        public Object sessionId_;
        public int size_;
        public Object uid_;
        private final UnknownFieldSet unknownFields;

        private CopyMifareCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CopyMifareCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CopyMifareCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final CopyMifareCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CopyMifareCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.uid_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.atqa_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.sak_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.content_ = codedInputStream.readBytes();
                        } else if (readTag == 48) {
                            this.bitField0_ |= 32;
                            this.size_ = codedInputStream.readInt32();
                        } else if (readTag == 58) {
                            this.bitField0_ |= 64;
                            this.md5Imei_ = codedInputStream.readBytes();
                        } else if (readTag == 64) {
                            int readEnum = codedInputStream.readEnum();
                            MifareCardType valueOf = MifareCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(8, readEnum);
                            } else {
                                this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                                this.cardType_ = valueOf;
                            }
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CopyMifareCardRequest.class, Builder.class);
        }

        static {
            CopyMifareCardRequest copyMifareCardRequest = new CopyMifareCardRequest(true);
            defaultInstance = copyMifareCardRequest;
            copyMifareCardRequest.initFields();
        }

        public final Parser<CopyMifareCardRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasUid() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getUid() {
            Object obj = this.uid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.uid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUidBytes() {
            Object obj = this.uid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.uid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAtqa() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getAtqa() {
            Object obj = this.atqa_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.atqa_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAtqaBytes() {
            Object obj = this.atqa_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.atqa_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSak() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getSak() {
            Object obj = this.sak_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sak_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSakBytes() {
            Object obj = this.sak_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sak_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasContent() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getContent() {
            Object obj = this.content_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.content_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getContentBytes() {
            Object obj = this.content_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.content_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSize() {
            return (this.bitField0_ & 32) == 32;
        }

        public final int getSize() {
            return this.size_;
        }

        public final boolean hasMd5Imei() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getMd5Imei() {
            Object obj = this.md5Imei_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.md5Imei_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMd5ImeiBytes() {
            Object obj = this.md5Imei_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.md5Imei_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final MifareCardType getCardType() {
            return this.cardType_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.uid_ = "";
            this.atqa_ = "";
            this.sak_ = "";
            this.content_ = "";
            this.size_ = 0;
            this.md5Imei_ = "";
            this.cardType_ = MifareCardType.NORMAL;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasSessionId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasUid()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getUidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getAtqaBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getSakBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getContentBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(6, this.size_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getMd5ImeiBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeEnum(8, this.cardType_.getNumber());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getUidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getAtqaBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getSakBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getContentBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt32Size(6, this.size_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getMd5ImeiBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeEnumSize(8, this.cardType_.getNumber());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CopyMifareCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static CopyMifareCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static CopyMifareCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static CopyMifareCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static CopyMifareCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static CopyMifareCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static CopyMifareCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static CopyMifareCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static CopyMifareCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static CopyMifareCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CopyMifareCardRequest copyMifareCardRequest) {
            return newBuilder().mergeFrom(copyMifareCardRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements CopyMifareCardRequestOrBuilder {
            private Object atqa_;
            private int bitField0_;
            private MifareCardType cardType_;
            private Object content_;
            private Object md5Imei_;
            private Object sak_;
            private Object sessionId_;
            private int size_;
            private Object uid_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(CopyMifareCardRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.uid_ = "";
                this.atqa_ = "";
                this.sak_ = "";
                this.content_ = "";
                this.md5Imei_ = "";
                this.cardType_ = MifareCardType.NORMAL;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.uid_ = "";
                this.atqa_ = "";
                this.sak_ = "";
                this.content_ = "";
                this.md5Imei_ = "";
                this.cardType_ = MifareCardType.NORMAL;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = CopyMifareCardRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.uid_ = "";
                this.bitField0_ &= -3;
                this.atqa_ = "";
                this.bitField0_ &= -5;
                this.sak_ = "";
                this.bitField0_ &= -9;
                this.content_ = "";
                this.bitField0_ &= -17;
                this.size_ = 0;
                this.bitField0_ &= -33;
                this.md5Imei_ = "";
                this.bitField0_ &= -65;
                this.cardType_ = MifareCardType.NORMAL;
                this.bitField0_ &= -129;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CopyMifareCardRequest_descriptor;
            }

            public final CopyMifareCardRequest getDefaultInstanceForType() {
                return CopyMifareCardRequest.getDefaultInstance();
            }

            public final CopyMifareCardRequest build() {
                CopyMifareCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final CopyMifareCardRequest buildPartial() {
                CopyMifareCardRequest copyMifareCardRequest = new CopyMifareCardRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                copyMifareCardRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                copyMifareCardRequest.uid_ = this.uid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                copyMifareCardRequest.atqa_ = this.atqa_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                copyMifareCardRequest.sak_ = this.sak_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                copyMifareCardRequest.content_ = this.content_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                copyMifareCardRequest.size_ = this.size_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                copyMifareCardRequest.md5Imei_ = this.md5Imei_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                copyMifareCardRequest.cardType_ = this.cardType_;
                copyMifareCardRequest.bitField0_ = i2;
                onBuilt();
                return copyMifareCardRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof CopyMifareCardRequest) {
                    return mergeFrom((CopyMifareCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(CopyMifareCardRequest copyMifareCardRequest) {
                if (copyMifareCardRequest == CopyMifareCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (copyMifareCardRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = copyMifareCardRequest.sessionId_;
                    onChanged();
                }
                if (copyMifareCardRequest.hasUid()) {
                    this.bitField0_ |= 2;
                    this.uid_ = copyMifareCardRequest.uid_;
                    onChanged();
                }
                if (copyMifareCardRequest.hasAtqa()) {
                    this.bitField0_ |= 4;
                    this.atqa_ = copyMifareCardRequest.atqa_;
                    onChanged();
                }
                if (copyMifareCardRequest.hasSak()) {
                    this.bitField0_ |= 8;
                    this.sak_ = copyMifareCardRequest.sak_;
                    onChanged();
                }
                if (copyMifareCardRequest.hasContent()) {
                    this.bitField0_ |= 16;
                    this.content_ = copyMifareCardRequest.content_;
                    onChanged();
                }
                if (copyMifareCardRequest.hasSize()) {
                    setSize(copyMifareCardRequest.getSize());
                }
                if (copyMifareCardRequest.hasMd5Imei()) {
                    this.bitField0_ |= 64;
                    this.md5Imei_ = copyMifareCardRequest.md5Imei_;
                    onChanged();
                }
                if (copyMifareCardRequest.hasCardType()) {
                    setCardType(copyMifareCardRequest.getCardType());
                }
                mergeUnknownFields(copyMifareCardRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasSessionId() && hasUid()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                CopyMifareCardRequest copyMifareCardRequest;
                CopyMifareCardRequest copyMifareCardRequest2 = null;
                try {
                    CopyMifareCardRequest parsePartialFrom = CopyMifareCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    copyMifareCardRequest = (CopyMifareCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    copyMifareCardRequest2 = copyMifareCardRequest;
                }
                if (copyMifareCardRequest2 != null) {
                    mergeFrom(copyMifareCardRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = CopyMifareCardRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasUid() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getUid() {
                Object obj = this.uid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.uid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUidBytes() {
                Object obj = this.uid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.uid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.uid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUid() {
                this.bitField0_ &= -3;
                this.uid_ = CopyMifareCardRequest.getDefaultInstance().getUid();
                onChanged();
                return this;
            }

            public final Builder setUidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.uid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAtqa() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getAtqa() {
                Object obj = this.atqa_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.atqa_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAtqaBytes() {
                Object obj = this.atqa_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.atqa_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAtqa(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.atqa_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAtqa() {
                this.bitField0_ &= -5;
                this.atqa_ = CopyMifareCardRequest.getDefaultInstance().getAtqa();
                onChanged();
                return this;
            }

            public final Builder setAtqaBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.atqa_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSak() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getSak() {
                Object obj = this.sak_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sak_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSakBytes() {
                Object obj = this.sak_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sak_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSak(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.sak_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSak() {
                this.bitField0_ &= -9;
                this.sak_ = CopyMifareCardRequest.getDefaultInstance().getSak();
                onChanged();
                return this;
            }

            public final Builder setSakBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.sak_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasContent() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getContent() {
                Object obj = this.content_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.content_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getContentBytes() {
                Object obj = this.content_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.content_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setContent(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.content_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearContent() {
                this.bitField0_ &= -17;
                this.content_ = CopyMifareCardRequest.getDefaultInstance().getContent();
                onChanged();
                return this;
            }

            public final Builder setContentBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.content_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSize() {
                return (this.bitField0_ & 32) == 32;
            }

            public final int getSize() {
                return this.size_;
            }

            public final Builder setSize(int i) {
                this.bitField0_ |= 32;
                this.size_ = i;
                onChanged();
                return this;
            }

            public final Builder clearSize() {
                this.bitField0_ &= -33;
                this.size_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasMd5Imei() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getMd5Imei() {
                Object obj = this.md5Imei_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.md5Imei_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMd5ImeiBytes() {
                Object obj = this.md5Imei_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.md5Imei_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMd5Imei(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.md5Imei_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMd5Imei() {
                this.bitField0_ &= -65;
                this.md5Imei_ = CopyMifareCardRequest.getDefaultInstance().getMd5Imei();
                onChanged();
                return this;
            }

            public final Builder setMd5ImeiBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.md5Imei_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final MifareCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(MifareCardType mifareCardType) {
                if (mifareCardType != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cardType_ = mifareCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -129;
                this.cardType_ = MifareCardType.NORMAL;
                onChanged();
                return this;
            }
        }
    }

    public static final class QueryMifareCardInfoRequest extends GeneratedMessage implements QueryMifareCardInfoRequestOrBuilder {
        public static Parser<QueryMifareCardInfoRequest> PARSER = new AbstractParser<QueryMifareCardInfoRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryMifareCardInfoRequest.AnonymousClass1 */

            public final QueryMifareCardInfoRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryMifareCardInfoRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryMifareCardInfoRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object cplc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private QueryMifareCardInfoRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryMifareCardInfoRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryMifareCardInfoRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryMifareCardInfoRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryMifareCardInfoRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryMifareCardInfoRequest.class, Builder.class);
        }

        static {
            QueryMifareCardInfoRequest queryMifareCardInfoRequest = new QueryMifareCardInfoRequest(true);
            defaultInstance = queryMifareCardInfoRequest;
            queryMifareCardInfoRequest.initFields();
        }

        public final Parser<QueryMifareCardInfoRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.cplc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasCplc()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCplcBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCplcBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryMifareCardInfoRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryMifareCardInfoRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryMifareCardInfoRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryMifareCardInfoRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryMifareCardInfoRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryMifareCardInfoRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryMifareCardInfoRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryMifareCardInfoRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryMifareCardInfoRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryMifareCardInfoRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryMifareCardInfoRequest queryMifareCardInfoRequest) {
            return newBuilder().mergeFrom(queryMifareCardInfoRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryMifareCardInfoRequestOrBuilder {
            private int bitField0_;
            private Object cplc_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryMifareCardInfoRequest.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = QueryMifareCardInfoRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = "";
                this.bitField0_ &= -2;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoRequest_descriptor;
            }

            public final QueryMifareCardInfoRequest getDefaultInstanceForType() {
                return QueryMifareCardInfoRequest.getDefaultInstance();
            }

            public final QueryMifareCardInfoRequest build() {
                QueryMifareCardInfoRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryMifareCardInfoRequest buildPartial() {
                QueryMifareCardInfoRequest queryMifareCardInfoRequest = new QueryMifareCardInfoRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                queryMifareCardInfoRequest.cplc_ = this.cplc_;
                queryMifareCardInfoRequest.bitField0_ = i;
                onBuilt();
                return queryMifareCardInfoRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryMifareCardInfoRequest) {
                    return mergeFrom((QueryMifareCardInfoRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryMifareCardInfoRequest queryMifareCardInfoRequest) {
                if (queryMifareCardInfoRequest == QueryMifareCardInfoRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryMifareCardInfoRequest.hasCplc()) {
                    this.bitField0_ |= 1;
                    this.cplc_ = queryMifareCardInfoRequest.cplc_;
                    onChanged();
                }
                mergeUnknownFields(queryMifareCardInfoRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasCplc();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryMifareCardInfoRequest queryMifareCardInfoRequest;
                QueryMifareCardInfoRequest queryMifareCardInfoRequest2 = null;
                try {
                    QueryMifareCardInfoRequest parsePartialFrom = QueryMifareCardInfoRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryMifareCardInfoRequest = (QueryMifareCardInfoRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryMifareCardInfoRequest2 = queryMifareCardInfoRequest;
                }
                if (queryMifareCardInfoRequest2 != null) {
                    mergeFrom(queryMifareCardInfoRequest2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = QueryMifareCardInfoRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class QueryMifareCardInfoResponse extends GeneratedMessage implements QueryMifareCardInfoResponseOrBuilder {
        public static Parser<QueryMifareCardInfoResponse> PARSER = new AbstractParser<QueryMifareCardInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryMifareCardInfoResponse.AnonymousClass1 */

            public final QueryMifareCardInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryMifareCardInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryMifareCardInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public List<MifareCardInfo> cardInfoList_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private QueryMifareCardInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryMifareCardInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryMifareCardInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryMifareCardInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryMifareCardInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.cardInfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.cardInfoList_.add(codedInputStream.readMessage(MifareCardInfo.PARSER, extensionRegistryLite));
                        } else if (readTag == 26) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryMifareCardInfoResponse.class, Builder.class);
        }

        static {
            QueryMifareCardInfoResponse queryMifareCardInfoResponse = new QueryMifareCardInfoResponse(true);
            defaultInstance = queryMifareCardInfoResponse;
            queryMifareCardInfoResponse.initFields();
        }

        public final Parser<QueryMifareCardInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final List<MifareCardInfo> getCardInfoListList() {
            return this.cardInfoList_;
        }

        public final List<? extends MifareCardInfoOrBuilder> getCardInfoListOrBuilderList() {
            return this.cardInfoList_;
        }

        public final int getCardInfoListCount() {
            return this.cardInfoList_.size();
        }

        public final MifareCardInfo getCardInfoList(int i) {
            return this.cardInfoList_.get(i);
        }

        public final MifareCardInfoOrBuilder getCardInfoListOrBuilder(int i) {
            return this.cardInfoList_.get(i);
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.cardInfoList_ = Collections.emptyList();
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            for (int i = 0; i < this.cardInfoList_.size(); i++) {
                codedOutputStream.writeMessage(2, this.cardInfoList_.get(i));
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            for (int i2 = 0; i2 < this.cardInfoList_.size(); i2++) {
                computeInt32Size += CodedOutputStream.computeMessageSize(2, this.cardInfoList_.get(i2));
            }
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = computeInt32Size + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryMifareCardInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryMifareCardInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryMifareCardInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryMifareCardInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryMifareCardInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryMifareCardInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryMifareCardInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryMifareCardInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryMifareCardInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryMifareCardInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryMifareCardInfoResponse queryMifareCardInfoResponse) {
            return newBuilder().mergeFrom(queryMifareCardInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryMifareCardInfoResponseOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> cardInfoListBuilder_;
            private List<MifareCardInfo> cardInfoList_;
            private Object errorDesc_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryMifareCardInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.cardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (QueryMifareCardInfoResponse.alwaysUseFieldBuilders) {
                    getCardInfoListFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryMifareCardInfoResponse_descriptor;
            }

            public final QueryMifareCardInfoResponse getDefaultInstanceForType() {
                return QueryMifareCardInfoResponse.getDefaultInstance();
            }

            public final QueryMifareCardInfoResponse build() {
                QueryMifareCardInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryMifareCardInfoResponse buildPartial() {
                QueryMifareCardInfoResponse queryMifareCardInfoResponse = new QueryMifareCardInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryMifareCardInfoResponse.result_ = this.result_;
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
                        this.bitField0_ &= -3;
                    }
                    queryMifareCardInfoResponse.cardInfoList_ = this.cardInfoList_;
                } else {
                    queryMifareCardInfoResponse.cardInfoList_ = repeatedFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 2;
                }
                queryMifareCardInfoResponse.errorDesc_ = this.errorDesc_;
                queryMifareCardInfoResponse.bitField0_ = i2;
                onBuilt();
                return queryMifareCardInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryMifareCardInfoResponse) {
                    return mergeFrom((QueryMifareCardInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryMifareCardInfoResponse queryMifareCardInfoResponse) {
                if (queryMifareCardInfoResponse == QueryMifareCardInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (queryMifareCardInfoResponse.hasResult()) {
                    setResult(queryMifareCardInfoResponse.getResult());
                }
                if (this.cardInfoListBuilder_ == null) {
                    if (!queryMifareCardInfoResponse.cardInfoList_.isEmpty()) {
                        if (this.cardInfoList_.isEmpty()) {
                            this.cardInfoList_ = queryMifareCardInfoResponse.cardInfoList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureCardInfoListIsMutable();
                            this.cardInfoList_.addAll(queryMifareCardInfoResponse.cardInfoList_);
                        }
                        onChanged();
                    }
                } else if (!queryMifareCardInfoResponse.cardInfoList_.isEmpty()) {
                    if (this.cardInfoListBuilder_.isEmpty()) {
                        this.cardInfoListBuilder_.dispose();
                        RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = null;
                        this.cardInfoListBuilder_ = null;
                        this.cardInfoList_ = queryMifareCardInfoResponse.cardInfoList_;
                        this.bitField0_ &= -3;
                        if (QueryMifareCardInfoResponse.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getCardInfoListFieldBuilder();
                        }
                        this.cardInfoListBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.cardInfoListBuilder_.addAllMessages(queryMifareCardInfoResponse.cardInfoList_);
                    }
                }
                if (queryMifareCardInfoResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = queryMifareCardInfoResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(queryMifareCardInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryMifareCardInfoResponse queryMifareCardInfoResponse;
                QueryMifareCardInfoResponse queryMifareCardInfoResponse2 = null;
                try {
                    QueryMifareCardInfoResponse parsePartialFrom = QueryMifareCardInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryMifareCardInfoResponse = (QueryMifareCardInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryMifareCardInfoResponse2 = queryMifareCardInfoResponse;
                }
                if (queryMifareCardInfoResponse2 != null) {
                    mergeFrom(queryMifareCardInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            private void ensureCardInfoListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.cardInfoList_ = new ArrayList(this.cardInfoList_);
                    this.bitField0_ |= 2;
                }
            }

            public final List<MifareCardInfo> getCardInfoListList() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.cardInfoList_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getCardInfoListCount() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfoList_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final MifareCardInfo getCardInfoList(int i) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfoList_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setCardInfoList(int i, MifareCardInfo mifareCardInfo) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, mifareCardInfo);
                } else if (mifareCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.set(i, mifareCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setCardInfoList(int i, MifareCardInfo.Builder builder) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addCardInfoList(MifareCardInfo mifareCardInfo) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(mifareCardInfo);
                } else if (mifareCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(mifareCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfoList(int i, MifareCardInfo mifareCardInfo) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, mifareCardInfo);
                } else if (mifareCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(i, mifareCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfoList(MifareCardInfo.Builder builder) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addCardInfoList(int i, MifareCardInfo.Builder builder) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$MifareCardInfo>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$MifareCardInfo>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllCardInfoList(Iterable<? extends MifareCardInfo> iterable) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.cardInfoList_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearCardInfoList() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeCardInfoList(int i) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final MifareCardInfo.Builder getCardInfoListBuilder(int i) {
                return getCardInfoListFieldBuilder().getBuilder(i);
            }

            public final MifareCardInfoOrBuilder getCardInfoListOrBuilder(int i) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfoList_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends MifareCardInfoOrBuilder> getCardInfoListOrBuilderList() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.cardInfoList_);
            }

            public final MifareCardInfo.Builder addCardInfoListBuilder() {
                return getCardInfoListFieldBuilder().addBuilder(MifareCardInfo.getDefaultInstance());
            }

            public final MifareCardInfo.Builder addCardInfoListBuilder(int i) {
                return getCardInfoListFieldBuilder().addBuilder(i, MifareCardInfo.getDefaultInstance());
            }

            public final List<MifareCardInfo.Builder> getCardInfoListBuilderList() {
                return getCardInfoListFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> getCardInfoListFieldBuilder() {
                if (this.cardInfoListBuilder_ == null) {
                    this.cardInfoListBuilder_ = new RepeatedFieldBuilder<>(this.cardInfoList_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.cardInfoList_ = null;
                }
                return this.cardInfoListBuilder_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = QueryMifareCardInfoResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class MifareCardInfo extends GeneratedMessage implements MifareCardInfoOrBuilder {
        public static Parser<MifareCardInfo> PARSER = new AbstractParser<MifareCardInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.MifareCardInfo.AnonymousClass1 */

            public final MifareCardInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MifareCardInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final MifareCardInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public Object cardArt_;
        public MifareCardType cardType_;
        public int fingerFlag_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object name_;
        private final UnknownFieldSet unknownFields;
        public Object userTerms_;
        public int vcStatus_;

        private MifareCardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MifareCardInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MifareCardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final MifareCardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MifareCardInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.name_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.vcStatus_ = codedInputStream.readInt32();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.userTerms_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.cardArt_ = codedInputStream.readBytes();
                        } else if (readTag == 48) {
                            this.bitField0_ |= 32;
                            this.fingerFlag_ = codedInputStream.readInt32();
                        } else if (readTag == 56) {
                            int readEnum = codedInputStream.readEnum();
                            MifareCardType valueOf = MifareCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(7, readEnum);
                            } else {
                                this.bitField0_ |= 64;
                                this.cardType_ = valueOf;
                            }
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MifareCardInfo.class, Builder.class);
        }

        static {
            MifareCardInfo mifareCardInfo = new MifareCardInfo(true);
            defaultInstance = mifareCardInfo;
            mifareCardInfo.initFields();
        }

        public final Parser<MifareCardInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasName() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVcStatus() {
            return (this.bitField0_ & 4) == 4;
        }

        public final int getVcStatus() {
            return this.vcStatus_;
        }

        public final boolean hasUserTerms() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getUserTerms() {
            Object obj = this.userTerms_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userTerms_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserTermsBytes() {
            Object obj = this.userTerms_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userTerms_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardArt() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getCardArt() {
            Object obj = this.cardArt_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardArt_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardArtBytes() {
            Object obj = this.cardArt_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardArt_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasFingerFlag() {
            return (this.bitField0_ & 32) == 32;
        }

        public final int getFingerFlag() {
            return this.fingerFlag_;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 64) == 64;
        }

        public final MifareCardType getCardType() {
            return this.cardType_;
        }

        private void initFields() {
            this.aid_ = "";
            this.name_ = "";
            this.vcStatus_ = 0;
            this.userTerms_ = "";
            this.cardArt_ = "";
            this.fingerFlag_ = 0;
            this.cardType_ = MifareCardType.NORMAL;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getAidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.vcStatus_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getUserTermsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getCardArtBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(6, this.fingerFlag_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeEnum(7, this.cardType_.getNumber());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getAidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.vcStatus_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getUserTermsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getCardArtBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt32Size(6, this.fingerFlag_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeEnumSize(7, this.cardType_.getNumber());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MifareCardInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MifareCardInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MifareCardInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MifareCardInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MifareCardInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static MifareCardInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static MifareCardInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static MifareCardInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static MifareCardInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static MifareCardInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MifareCardInfo mifareCardInfo) {
            return newBuilder().mergeFrom(mifareCardInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements MifareCardInfoOrBuilder {
            private Object aid_;
            private int bitField0_;
            private Object cardArt_;
            private MifareCardType cardType_;
            private int fingerFlag_;
            private Object name_;
            private Object userTerms_;
            private int vcStatus_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(MifareCardInfo.class, Builder.class);
            }

            private Builder() {
                this.aid_ = "";
                this.name_ = "";
                this.userTerms_ = "";
                this.cardArt_ = "";
                this.cardType_ = MifareCardType.NORMAL;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.aid_ = "";
                this.name_ = "";
                this.userTerms_ = "";
                this.cardArt_ = "";
                this.cardType_ = MifareCardType.NORMAL;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = MifareCardInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.aid_ = "";
                this.bitField0_ &= -2;
                this.name_ = "";
                this.bitField0_ &= -3;
                this.vcStatus_ = 0;
                this.bitField0_ &= -5;
                this.userTerms_ = "";
                this.bitField0_ &= -9;
                this.cardArt_ = "";
                this.bitField0_ &= -17;
                this.fingerFlag_ = 0;
                this.bitField0_ &= -33;
                this.cardType_ = MifareCardType.NORMAL;
                this.bitField0_ &= -65;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardInfo_descriptor;
            }

            public final MifareCardInfo getDefaultInstanceForType() {
                return MifareCardInfo.getDefaultInstance();
            }

            public final MifareCardInfo build() {
                MifareCardInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final MifareCardInfo buildPartial() {
                MifareCardInfo mifareCardInfo = new MifareCardInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                mifareCardInfo.aid_ = this.aid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                mifareCardInfo.name_ = this.name_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                mifareCardInfo.vcStatus_ = this.vcStatus_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                mifareCardInfo.userTerms_ = this.userTerms_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                mifareCardInfo.cardArt_ = this.cardArt_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                mifareCardInfo.fingerFlag_ = this.fingerFlag_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                mifareCardInfo.cardType_ = this.cardType_;
                mifareCardInfo.bitField0_ = i2;
                onBuilt();
                return mifareCardInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof MifareCardInfo) {
                    return mergeFrom((MifareCardInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(MifareCardInfo mifareCardInfo) {
                if (mifareCardInfo == MifareCardInfo.getDefaultInstance()) {
                    return this;
                }
                if (mifareCardInfo.hasAid()) {
                    this.bitField0_ |= 1;
                    this.aid_ = mifareCardInfo.aid_;
                    onChanged();
                }
                if (mifareCardInfo.hasName()) {
                    this.bitField0_ |= 2;
                    this.name_ = mifareCardInfo.name_;
                    onChanged();
                }
                if (mifareCardInfo.hasVcStatus()) {
                    setVcStatus(mifareCardInfo.getVcStatus());
                }
                if (mifareCardInfo.hasUserTerms()) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = mifareCardInfo.userTerms_;
                    onChanged();
                }
                if (mifareCardInfo.hasCardArt()) {
                    this.bitField0_ |= 16;
                    this.cardArt_ = mifareCardInfo.cardArt_;
                    onChanged();
                }
                if (mifareCardInfo.hasFingerFlag()) {
                    setFingerFlag(mifareCardInfo.getFingerFlag());
                }
                if (mifareCardInfo.hasCardType()) {
                    setCardType(mifareCardInfo.getCardType());
                }
                mergeUnknownFields(mifareCardInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                MifareCardInfo mifareCardInfo;
                MifareCardInfo mifareCardInfo2 = null;
                try {
                    MifareCardInfo parsePartialFrom = MifareCardInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    mifareCardInfo = (MifareCardInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    mifareCardInfo2 = mifareCardInfo;
                }
                if (mifareCardInfo2 != null) {
                    mergeFrom(mifareCardInfo2);
                }
                throw th;
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -2;
                this.aid_ = MifareCardInfo.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasName() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getNameBytes() {
                Object obj = this.name_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.name_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.name_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearName() {
                this.bitField0_ &= -3;
                this.name_ = MifareCardInfo.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public final Builder setNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.name_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVcStatus() {
                return (this.bitField0_ & 4) == 4;
            }

            public final int getVcStatus() {
                return this.vcStatus_;
            }

            public final Builder setVcStatus(int i) {
                this.bitField0_ |= 4;
                this.vcStatus_ = i;
                onChanged();
                return this;
            }

            public final Builder clearVcStatus() {
                this.bitField0_ &= -5;
                this.vcStatus_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasUserTerms() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getUserTerms() {
                Object obj = this.userTerms_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userTerms_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserTermsBytes() {
                Object obj = this.userTerms_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userTerms_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUserTerms(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUserTerms() {
                this.bitField0_ &= -9;
                this.userTerms_ = MifareCardInfo.getDefaultInstance().getUserTerms();
                onChanged();
                return this;
            }

            public final Builder setUserTermsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardArt() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getCardArt() {
                Object obj = this.cardArt_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardArt_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardArtBytes() {
                Object obj = this.cardArt_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardArt_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardArt(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.cardArt_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardArt() {
                this.bitField0_ &= -17;
                this.cardArt_ = MifareCardInfo.getDefaultInstance().getCardArt();
                onChanged();
                return this;
            }

            public final Builder setCardArtBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.cardArt_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasFingerFlag() {
                return (this.bitField0_ & 32) == 32;
            }

            public final int getFingerFlag() {
                return this.fingerFlag_;
            }

            public final Builder setFingerFlag(int i) {
                this.bitField0_ |= 32;
                this.fingerFlag_ = i;
                onChanged();
                return this;
            }

            public final Builder clearFingerFlag() {
                this.bitField0_ &= -33;
                this.fingerFlag_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 64) == 64;
            }

            public final MifareCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(MifareCardType mifareCardType) {
                if (mifareCardType != null) {
                    this.bitField0_ |= 64;
                    this.cardType_ = mifareCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -65;
                this.cardType_ = MifareCardType.NORMAL;
                onChanged();
                return this;
            }
        }
    }

    public static final class UpdateMifareCardRequest extends GeneratedMessage implements UpdateMifareCardRequestOrBuilder {
        public static Parser<UpdateMifareCardRequest> PARSER = new AbstractParser<UpdateMifareCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpdateMifareCardRequest.AnonymousClass1 */

            public final UpdateMifareCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpdateMifareCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpdateMifareCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public List<MifareCardInfo> cardInfo_;
        public Object cplc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private UpdateMifareCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpdateMifareCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpdateMifareCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final UpdateMifareCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private UpdateMifareCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.cardInfo_ = new ArrayList();
                                z2 |= true;
                            }
                            this.cardInfo_.add(codedInputStream.readMessage(MifareCardInfo.PARSER, extensionRegistryLite));
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.cardInfo_ = Collections.unmodifiableList(this.cardInfo_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.cardInfo_ = Collections.unmodifiableList(this.cardInfo_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpdateMifareCardRequest.class, Builder.class);
        }

        static {
            UpdateMifareCardRequest updateMifareCardRequest = new UpdateMifareCardRequest(true);
            defaultInstance = updateMifareCardRequest;
            updateMifareCardRequest.initFields();
        }

        public final Parser<UpdateMifareCardRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final List<MifareCardInfo> getCardInfoList() {
            return this.cardInfo_;
        }

        public final List<? extends MifareCardInfoOrBuilder> getCardInfoOrBuilderList() {
            return this.cardInfo_;
        }

        public final int getCardInfoCount() {
            return this.cardInfo_.size();
        }

        public final MifareCardInfo getCardInfo(int i) {
            return this.cardInfo_.get(i);
        }

        public final MifareCardInfoOrBuilder getCardInfoOrBuilder(int i) {
            return this.cardInfo_.get(i);
        }

        private void initFields() {
            this.cplc_ = "";
            this.cardInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasCplc()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCplcBytes());
            }
            for (int i = 0; i < this.cardInfo_.size(); i++) {
                codedOutputStream.writeMessage(2, this.cardInfo_.get(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getCplcBytes()) + 0 : 0;
            for (int i2 = 0; i2 < this.cardInfo_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(2, this.cardInfo_.get(i2));
            }
            int serializedSize = computeBytesSize + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static UpdateMifareCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpdateMifareCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpdateMifareCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpdateMifareCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static UpdateMifareCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpdateMifareCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpdateMifareCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpdateMifareCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpdateMifareCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpdateMifareCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(UpdateMifareCardRequest updateMifareCardRequest) {
            return newBuilder().mergeFrom(updateMifareCardRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpdateMifareCardRequestOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> cardInfoBuilder_;
            private List<MifareCardInfo> cardInfo_;
            private Object cplc_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpdateMifareCardRequest.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = "";
                this.cardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = "";
                this.cardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (UpdateMifareCardRequest.alwaysUseFieldBuilders) {
                    getCardInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = "";
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfo_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateMifareCardRequest_descriptor;
            }

            public final UpdateMifareCardRequest getDefaultInstanceForType() {
                return UpdateMifareCardRequest.getDefaultInstance();
            }

            public final UpdateMifareCardRequest build() {
                UpdateMifareCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpdateMifareCardRequest buildPartial() {
                UpdateMifareCardRequest updateMifareCardRequest = new UpdateMifareCardRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                updateMifareCardRequest.cplc_ = this.cplc_;
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.cardInfo_ = Collections.unmodifiableList(this.cardInfo_);
                        this.bitField0_ &= -3;
                    }
                    updateMifareCardRequest.cardInfo_ = this.cardInfo_;
                } else {
                    updateMifareCardRequest.cardInfo_ = repeatedFieldBuilder.build();
                }
                updateMifareCardRequest.bitField0_ = i;
                onBuilt();
                return updateMifareCardRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpdateMifareCardRequest) {
                    return mergeFrom((UpdateMifareCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpdateMifareCardRequest updateMifareCardRequest) {
                if (updateMifareCardRequest == UpdateMifareCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (updateMifareCardRequest.hasCplc()) {
                    this.bitField0_ |= 1;
                    this.cplc_ = updateMifareCardRequest.cplc_;
                    onChanged();
                }
                if (this.cardInfoBuilder_ == null) {
                    if (!updateMifareCardRequest.cardInfo_.isEmpty()) {
                        if (this.cardInfo_.isEmpty()) {
                            this.cardInfo_ = updateMifareCardRequest.cardInfo_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureCardInfoIsMutable();
                            this.cardInfo_.addAll(updateMifareCardRequest.cardInfo_);
                        }
                        onChanged();
                    }
                } else if (!updateMifareCardRequest.cardInfo_.isEmpty()) {
                    if (this.cardInfoBuilder_.isEmpty()) {
                        this.cardInfoBuilder_.dispose();
                        RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = null;
                        this.cardInfoBuilder_ = null;
                        this.cardInfo_ = updateMifareCardRequest.cardInfo_;
                        this.bitField0_ &= -3;
                        if (UpdateMifareCardRequest.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getCardInfoFieldBuilder();
                        }
                        this.cardInfoBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.cardInfoBuilder_.addAllMessages(updateMifareCardRequest.cardInfo_);
                    }
                }
                mergeUnknownFields(updateMifareCardRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasCplc();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpdateMifareCardRequest updateMifareCardRequest;
                UpdateMifareCardRequest updateMifareCardRequest2 = null;
                try {
                    UpdateMifareCardRequest parsePartialFrom = UpdateMifareCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    updateMifareCardRequest = (UpdateMifareCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    updateMifareCardRequest2 = updateMifareCardRequest;
                }
                if (updateMifareCardRequest2 != null) {
                    mergeFrom(updateMifareCardRequest2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = UpdateMifareCardRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            private void ensureCardInfoIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.cardInfo_ = new ArrayList(this.cardInfo_);
                    this.bitField0_ |= 2;
                }
            }

            public final List<MifareCardInfo> getCardInfoList() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.cardInfo_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getCardInfoCount() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfo_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final MifareCardInfo getCardInfo(int i) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfo_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setCardInfo(int i, MifareCardInfo mifareCardInfo) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, mifareCardInfo);
                } else if (mifareCardInfo != null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.set(i, mifareCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setCardInfo(int i, MifareCardInfo.Builder builder) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addCardInfo(MifareCardInfo mifareCardInfo) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(mifareCardInfo);
                } else if (mifareCardInfo != null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(mifareCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfo(int i, MifareCardInfo mifareCardInfo) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, mifareCardInfo);
                } else if (mifareCardInfo != null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(i, mifareCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfo(MifareCardInfo.Builder builder) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addCardInfo(int i, MifareCardInfo.Builder builder) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$MifareCardInfo>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$MifareCardInfo>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllCardInfo(Iterable<? extends MifareCardInfo> iterable) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.cardInfo_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearCardInfo() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfo_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeCardInfo(int i) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final MifareCardInfo.Builder getCardInfoBuilder(int i) {
                return getCardInfoFieldBuilder().getBuilder(i);
            }

            public final MifareCardInfoOrBuilder getCardInfoOrBuilder(int i) {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfo_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends MifareCardInfoOrBuilder> getCardInfoOrBuilderList() {
                RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.cardInfo_);
            }

            public final MifareCardInfo.Builder addCardInfoBuilder() {
                return getCardInfoFieldBuilder().addBuilder(MifareCardInfo.getDefaultInstance());
            }

            public final MifareCardInfo.Builder addCardInfoBuilder(int i) {
                return getCardInfoFieldBuilder().addBuilder(i, MifareCardInfo.getDefaultInstance());
            }

            public final List<MifareCardInfo.Builder> getCardInfoBuilderList() {
                return getCardInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<MifareCardInfo, MifareCardInfo.Builder, MifareCardInfoOrBuilder> getCardInfoFieldBuilder() {
                if (this.cardInfoBuilder_ == null) {
                    this.cardInfoBuilder_ = new RepeatedFieldBuilder<>(this.cardInfo_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.cardInfo_ = null;
                }
                return this.cardInfoBuilder_;
            }
        }
    }

    public static final class InAppTransData extends GeneratedMessage implements InAppTransDataOrBuilder {
        public static Parser<InAppTransData> PARSER = new AbstractParser<InAppTransData>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.InAppTransData.AnonymousClass1 */

            public final InAppTransData parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new InAppTransData(codedInputStream, extensionRegistryLite);
            }
        };
        private static final InAppTransData defaultInstance;
        private static final long serialVersionUID = 0;
        public int acquirer_;
        public int bitField0_;
        public Object cardReferenceId_;
        public Object currencyCode_;
        public Object deviceId_;
        public long discountAmount_;
        public Object encryptPayAmount_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object merchantId_;
        public Object merchantName_;
        public Object orderNumber_;
        public Object pan_;
        public long payAmount_;
        public Object pbocAid_;
        public int signKeyIndex_;
        public Object sign_;
        public long totalAmount_;
        private final UnknownFieldSet unknownFields;
        public int verifyMethod_;

        private InAppTransData(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private InAppTransData(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static InAppTransData getDefaultInstance() {
            return defaultInstance;
        }

        public final InAppTransData getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private InAppTransData(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case C.MSG_SET_VIDEO_DECODER_OUTPUT_BUFFER_RENDERER:
                            this.bitField0_ |= 1;
                            this.acquirer_ = codedInputStream.readInt32();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.orderNumber_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.merchantName_ = codedInputStream.readBytes();
                            continue;
                        case 34:
                            this.bitField0_ |= 8;
                            this.merchantId_ = codedInputStream.readBytes();
                            continue;
                        case 40:
                            this.bitField0_ |= 16;
                            this.totalAmount_ = codedInputStream.readInt64();
                            continue;
                        case 48:
                            this.bitField0_ |= 32;
                            this.discountAmount_ = codedInputStream.readInt64();
                            continue;
                        case 56:
                            this.bitField0_ |= 64;
                            this.payAmount_ = codedInputStream.readInt64();
                            continue;
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.encryptPayAmount_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.pan_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.currencyCode_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.sign_ = codedInputStream.readBytes();
                            continue;
                        case 96:
                            this.bitField0_ |= 2048;
                            this.signKeyIndex_ = codedInputStream.readInt32();
                            continue;
                        case 104:
                            this.bitField0_ |= 4096;
                            this.verifyMethod_ = codedInputStream.readInt32();
                            continue;
                        case 114:
                            this.bitField0_ |= 8192;
                            this.pbocAid_ = codedInputStream.readBytes();
                            continue;
                        case 122:
                            this.bitField0_ |= 16384;
                            this.cardReferenceId_ = codedInputStream.readBytes();
                            continue;
                        case 130:
                            this.bitField0_ |= 32768;
                            this.deviceId_ = codedInputStream.readBytes();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_fieldAccessorTable.ensureFieldAccessorsInitialized(InAppTransData.class, Builder.class);
        }

        static {
            InAppTransData inAppTransData = new InAppTransData(true);
            defaultInstance = inAppTransData;
            inAppTransData.initFields();
        }

        public final Parser<InAppTransData> getParserForType() {
            return PARSER;
        }

        public final boolean hasAcquirer() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getAcquirer() {
            return this.acquirer_;
        }

        public final boolean hasOrderNumber() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getOrderNumber() {
            Object obj = this.orderNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.orderNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getOrderNumberBytes() {
            Object obj = this.orderNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.orderNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMerchantName() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getMerchantName() {
            Object obj = this.merchantName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.merchantName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMerchantNameBytes() {
            Object obj = this.merchantName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.merchantName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMerchantId() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getMerchantId() {
            Object obj = this.merchantId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.merchantId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMerchantIdBytes() {
            Object obj = this.merchantId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.merchantId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasTotalAmount() {
            return (this.bitField0_ & 16) == 16;
        }

        public final long getTotalAmount() {
            return this.totalAmount_;
        }

        public final boolean hasDiscountAmount() {
            return (this.bitField0_ & 32) == 32;
        }

        public final long getDiscountAmount() {
            return this.discountAmount_;
        }

        public final boolean hasPayAmount() {
            return (this.bitField0_ & 64) == 64;
        }

        public final long getPayAmount() {
            return this.payAmount_;
        }

        public final boolean hasEncryptPayAmount() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getEncryptPayAmount() {
            Object obj = this.encryptPayAmount_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.encryptPayAmount_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getEncryptPayAmountBytes() {
            Object obj = this.encryptPayAmount_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.encryptPayAmount_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPan() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getPan() {
            Object obj = this.pan_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.pan_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPanBytes() {
            Object obj = this.pan_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pan_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCurrencyCode() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getCurrencyCode() {
            Object obj = this.currencyCode_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.currencyCode_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCurrencyCodeBytes() {
            Object obj = this.currencyCode_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.currencyCode_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSign() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getSign() {
            Object obj = this.sign_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sign_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSignBytes() {
            Object obj = this.sign_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sign_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSignKeyIndex() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public final int getSignKeyIndex() {
            return this.signKeyIndex_;
        }

        public final boolean hasVerifyMethod() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public final int getVerifyMethod() {
            return this.verifyMethod_;
        }

        public final boolean hasPbocAid() {
            return (this.bitField0_ & 8192) == 8192;
        }

        public final String getPbocAid() {
            Object obj = this.pbocAid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.pbocAid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPbocAidBytes() {
            Object obj = this.pbocAid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pbocAid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardReferenceId() {
            return (this.bitField0_ & 16384) == 16384;
        }

        public final String getCardReferenceId() {
            Object obj = this.cardReferenceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardReferenceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardReferenceIdBytes() {
            Object obj = this.cardReferenceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardReferenceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 32768) == 32768;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.acquirer_ = 0;
            this.orderNumber_ = "";
            this.merchantName_ = "";
            this.merchantId_ = "";
            this.totalAmount_ = 0;
            this.discountAmount_ = 0;
            this.payAmount_ = 0;
            this.encryptPayAmount_ = "";
            this.pan_ = "";
            this.currencyCode_ = "";
            this.sign_ = "";
            this.signKeyIndex_ = 0;
            this.verifyMethod_ = 0;
            this.pbocAid_ = "";
            this.cardReferenceId_ = "";
            this.deviceId_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.acquirer_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getOrderNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getMerchantNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getMerchantIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt64(5, this.totalAmount_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt64(6, this.discountAmount_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeInt64(7, this.payAmount_);
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getEncryptPayAmountBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getPanBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getCurrencyCodeBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getSignBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeInt32(12, this.signKeyIndex_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeInt32(13, this.verifyMethod_);
            }
            if ((this.bitField0_ & 8192) == 8192) {
                codedOutputStream.writeBytes(14, getPbocAidBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                codedOutputStream.writeBytes(15, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 32768) == 32768) {
                codedOutputStream.writeBytes(16, getDeviceIdBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.acquirer_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getOrderNumberBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getMerchantNameBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getMerchantIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt64Size(5, this.totalAmount_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt64Size(6, this.discountAmount_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeInt64Size(7, this.payAmount_);
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getEncryptPayAmountBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getPanBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getCurrencyCodeBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(11, getSignBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                i2 += CodedOutputStream.computeInt32Size(12, this.signKeyIndex_);
            }
            if ((this.bitField0_ & 4096) == 4096) {
                i2 += CodedOutputStream.computeInt32Size(13, this.verifyMethod_);
            }
            if ((this.bitField0_ & 8192) == 8192) {
                i2 += CodedOutputStream.computeBytesSize(14, getPbocAidBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                i2 += CodedOutputStream.computeBytesSize(15, getCardReferenceIdBytes());
            }
            if ((this.bitField0_ & 32768) == 32768) {
                i2 += CodedOutputStream.computeBytesSize(16, getDeviceIdBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static InAppTransData parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static InAppTransData parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static InAppTransData parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static InAppTransData parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static InAppTransData parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static InAppTransData parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static InAppTransData parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static InAppTransData parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static InAppTransData parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static InAppTransData parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(InAppTransData inAppTransData) {
            return newBuilder().mergeFrom(inAppTransData);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements InAppTransDataOrBuilder {
            private int acquirer_;
            private int bitField0_;
            private Object cardReferenceId_;
            private Object currencyCode_;
            private Object deviceId_;
            private long discountAmount_;
            private Object encryptPayAmount_;
            private Object merchantId_;
            private Object merchantName_;
            private Object orderNumber_;
            private Object pan_;
            private long payAmount_;
            private Object pbocAid_;
            private int signKeyIndex_;
            private Object sign_;
            private long totalAmount_;
            private int verifyMethod_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_fieldAccessorTable.ensureFieldAccessorsInitialized(InAppTransData.class, Builder.class);
            }

            private Builder() {
                this.orderNumber_ = "";
                this.merchantName_ = "";
                this.merchantId_ = "";
                this.encryptPayAmount_ = "";
                this.pan_ = "";
                this.currencyCode_ = "";
                this.sign_ = "";
                this.pbocAid_ = "";
                this.cardReferenceId_ = "";
                this.deviceId_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.orderNumber_ = "";
                this.merchantName_ = "";
                this.merchantId_ = "";
                this.encryptPayAmount_ = "";
                this.pan_ = "";
                this.currencyCode_ = "";
                this.sign_ = "";
                this.pbocAid_ = "";
                this.cardReferenceId_ = "";
                this.deviceId_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = InAppTransData.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.acquirer_ = 0;
                this.bitField0_ &= -2;
                this.orderNumber_ = "";
                this.bitField0_ &= -3;
                this.merchantName_ = "";
                this.bitField0_ &= -5;
                this.merchantId_ = "";
                this.bitField0_ &= -9;
                this.totalAmount_ = 0;
                this.bitField0_ &= -17;
                this.discountAmount_ = 0;
                this.bitField0_ &= -33;
                this.payAmount_ = 0;
                this.bitField0_ &= -65;
                this.encryptPayAmount_ = "";
                this.bitField0_ &= -129;
                this.pan_ = "";
                this.bitField0_ &= -257;
                this.currencyCode_ = "";
                this.bitField0_ &= -513;
                this.sign_ = "";
                this.bitField0_ &= -1025;
                this.signKeyIndex_ = 0;
                this.bitField0_ &= -2049;
                this.verifyMethod_ = 0;
                this.bitField0_ &= -4097;
                this.pbocAid_ = "";
                this.bitField0_ &= -8193;
                this.cardReferenceId_ = "";
                this.bitField0_ &= -16385;
                this.deviceId_ = "";
                this.bitField0_ &= -32769;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransData_descriptor;
            }

            public final InAppTransData getDefaultInstanceForType() {
                return InAppTransData.getDefaultInstance();
            }

            public final InAppTransData build() {
                InAppTransData buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final InAppTransData buildPartial() {
                InAppTransData inAppTransData = new InAppTransData(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                inAppTransData.acquirer_ = this.acquirer_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                inAppTransData.orderNumber_ = this.orderNumber_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                inAppTransData.merchantName_ = this.merchantName_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                inAppTransData.merchantId_ = this.merchantId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                inAppTransData.totalAmount_ = this.totalAmount_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                inAppTransData.discountAmount_ = this.discountAmount_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                inAppTransData.payAmount_ = this.payAmount_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                inAppTransData.encryptPayAmount_ = this.encryptPayAmount_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                inAppTransData.pan_ = this.pan_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                inAppTransData.currencyCode_ = this.currencyCode_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                inAppTransData.sign_ = this.sign_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                inAppTransData.signKeyIndex_ = this.signKeyIndex_;
                if ((i & 4096) == 4096) {
                    i2 |= 4096;
                }
                inAppTransData.verifyMethod_ = this.verifyMethod_;
                if ((i & 8192) == 8192) {
                    i2 |= 8192;
                }
                inAppTransData.pbocAid_ = this.pbocAid_;
                if ((i & 16384) == 16384) {
                    i2 |= 16384;
                }
                inAppTransData.cardReferenceId_ = this.cardReferenceId_;
                if ((i & 32768) == 32768) {
                    i2 |= 32768;
                }
                inAppTransData.deviceId_ = this.deviceId_;
                inAppTransData.bitField0_ = i2;
                onBuilt();
                return inAppTransData;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof InAppTransData) {
                    return mergeFrom((InAppTransData) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(InAppTransData inAppTransData) {
                if (inAppTransData == InAppTransData.getDefaultInstance()) {
                    return this;
                }
                if (inAppTransData.hasAcquirer()) {
                    setAcquirer(inAppTransData.getAcquirer());
                }
                if (inAppTransData.hasOrderNumber()) {
                    this.bitField0_ |= 2;
                    this.orderNumber_ = inAppTransData.orderNumber_;
                    onChanged();
                }
                if (inAppTransData.hasMerchantName()) {
                    this.bitField0_ |= 4;
                    this.merchantName_ = inAppTransData.merchantName_;
                    onChanged();
                }
                if (inAppTransData.hasMerchantId()) {
                    this.bitField0_ |= 8;
                    this.merchantId_ = inAppTransData.merchantId_;
                    onChanged();
                }
                if (inAppTransData.hasTotalAmount()) {
                    setTotalAmount(inAppTransData.getTotalAmount());
                }
                if (inAppTransData.hasDiscountAmount()) {
                    setDiscountAmount(inAppTransData.getDiscountAmount());
                }
                if (inAppTransData.hasPayAmount()) {
                    setPayAmount(inAppTransData.getPayAmount());
                }
                if (inAppTransData.hasEncryptPayAmount()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.encryptPayAmount_ = inAppTransData.encryptPayAmount_;
                    onChanged();
                }
                if (inAppTransData.hasPan()) {
                    this.bitField0_ |= 256;
                    this.pan_ = inAppTransData.pan_;
                    onChanged();
                }
                if (inAppTransData.hasCurrencyCode()) {
                    this.bitField0_ |= 512;
                    this.currencyCode_ = inAppTransData.currencyCode_;
                    onChanged();
                }
                if (inAppTransData.hasSign()) {
                    this.bitField0_ |= 1024;
                    this.sign_ = inAppTransData.sign_;
                    onChanged();
                }
                if (inAppTransData.hasSignKeyIndex()) {
                    setSignKeyIndex(inAppTransData.getSignKeyIndex());
                }
                if (inAppTransData.hasVerifyMethod()) {
                    setVerifyMethod(inAppTransData.getVerifyMethod());
                }
                if (inAppTransData.hasPbocAid()) {
                    this.bitField0_ |= 8192;
                    this.pbocAid_ = inAppTransData.pbocAid_;
                    onChanged();
                }
                if (inAppTransData.hasCardReferenceId()) {
                    this.bitField0_ |= 16384;
                    this.cardReferenceId_ = inAppTransData.cardReferenceId_;
                    onChanged();
                }
                if (inAppTransData.hasDeviceId()) {
                    this.bitField0_ |= 32768;
                    this.deviceId_ = inAppTransData.deviceId_;
                    onChanged();
                }
                mergeUnknownFields(inAppTransData.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                InAppTransData inAppTransData;
                InAppTransData inAppTransData2 = null;
                try {
                    InAppTransData parsePartialFrom = InAppTransData.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    inAppTransData = (InAppTransData) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    inAppTransData2 = inAppTransData;
                }
                if (inAppTransData2 != null) {
                    mergeFrom(inAppTransData2);
                }
                throw th;
            }

            public final boolean hasAcquirer() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getAcquirer() {
                return this.acquirer_;
            }

            public final Builder setAcquirer(int i) {
                this.bitField0_ |= 1;
                this.acquirer_ = i;
                onChanged();
                return this;
            }

            public final Builder clearAcquirer() {
                this.bitField0_ &= -2;
                this.acquirer_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasOrderNumber() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getOrderNumber() {
                Object obj = this.orderNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.orderNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getOrderNumberBytes() {
                Object obj = this.orderNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.orderNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setOrderNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.orderNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearOrderNumber() {
                this.bitField0_ &= -3;
                this.orderNumber_ = InAppTransData.getDefaultInstance().getOrderNumber();
                onChanged();
                return this;
            }

            public final Builder setOrderNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.orderNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMerchantName() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getMerchantName() {
                Object obj = this.merchantName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.merchantName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMerchantNameBytes() {
                Object obj = this.merchantName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.merchantName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMerchantName(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.merchantName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMerchantName() {
                this.bitField0_ &= -5;
                this.merchantName_ = InAppTransData.getDefaultInstance().getMerchantName();
                onChanged();
                return this;
            }

            public final Builder setMerchantNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.merchantName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMerchantId() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getMerchantId() {
                Object obj = this.merchantId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.merchantId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMerchantIdBytes() {
                Object obj = this.merchantId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.merchantId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMerchantId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.merchantId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMerchantId() {
                this.bitField0_ &= -9;
                this.merchantId_ = InAppTransData.getDefaultInstance().getMerchantId();
                onChanged();
                return this;
            }

            public final Builder setMerchantIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.merchantId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasTotalAmount() {
                return (this.bitField0_ & 16) == 16;
            }

            public final long getTotalAmount() {
                return this.totalAmount_;
            }

            public final Builder setTotalAmount(long j) {
                this.bitField0_ |= 16;
                this.totalAmount_ = j;
                onChanged();
                return this;
            }

            public final Builder clearTotalAmount() {
                this.bitField0_ &= -17;
                this.totalAmount_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasDiscountAmount() {
                return (this.bitField0_ & 32) == 32;
            }

            public final long getDiscountAmount() {
                return this.discountAmount_;
            }

            public final Builder setDiscountAmount(long j) {
                this.bitField0_ |= 32;
                this.discountAmount_ = j;
                onChanged();
                return this;
            }

            public final Builder clearDiscountAmount() {
                this.bitField0_ &= -33;
                this.discountAmount_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasPayAmount() {
                return (this.bitField0_ & 64) == 64;
            }

            public final long getPayAmount() {
                return this.payAmount_;
            }

            public final Builder setPayAmount(long j) {
                this.bitField0_ |= 64;
                this.payAmount_ = j;
                onChanged();
                return this;
            }

            public final Builder clearPayAmount() {
                this.bitField0_ &= -65;
                this.payAmount_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasEncryptPayAmount() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getEncryptPayAmount() {
                Object obj = this.encryptPayAmount_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.encryptPayAmount_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getEncryptPayAmountBytes() {
                Object obj = this.encryptPayAmount_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.encryptPayAmount_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setEncryptPayAmount(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.encryptPayAmount_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearEncryptPayAmount() {
                this.bitField0_ &= -129;
                this.encryptPayAmount_ = InAppTransData.getDefaultInstance().getEncryptPayAmount();
                onChanged();
                return this;
            }

            public final Builder setEncryptPayAmountBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.encryptPayAmount_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPan() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getPan() {
                Object obj = this.pan_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pan_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPanBytes() {
                Object obj = this.pan_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.pan_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPan(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.pan_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPan() {
                this.bitField0_ &= -257;
                this.pan_ = InAppTransData.getDefaultInstance().getPan();
                onChanged();
                return this;
            }

            public final Builder setPanBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.pan_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCurrencyCode() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getCurrencyCode() {
                Object obj = this.currencyCode_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.currencyCode_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCurrencyCodeBytes() {
                Object obj = this.currencyCode_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.currencyCode_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCurrencyCode(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.currencyCode_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCurrencyCode() {
                this.bitField0_ &= -513;
                this.currencyCode_ = InAppTransData.getDefaultInstance().getCurrencyCode();
                onChanged();
                return this;
            }

            public final Builder setCurrencyCodeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.currencyCode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSign() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getSign() {
                Object obj = this.sign_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sign_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSignBytes() {
                Object obj = this.sign_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sign_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSign(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.sign_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSign() {
                this.bitField0_ &= -1025;
                this.sign_ = InAppTransData.getDefaultInstance().getSign();
                onChanged();
                return this;
            }

            public final Builder setSignBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.sign_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSignKeyIndex() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public final int getSignKeyIndex() {
                return this.signKeyIndex_;
            }

            public final Builder setSignKeyIndex(int i) {
                this.bitField0_ |= 2048;
                this.signKeyIndex_ = i;
                onChanged();
                return this;
            }

            public final Builder clearSignKeyIndex() {
                this.bitField0_ &= -2049;
                this.signKeyIndex_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasVerifyMethod() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public final int getVerifyMethod() {
                return this.verifyMethod_;
            }

            public final Builder setVerifyMethod(int i) {
                this.bitField0_ |= 4096;
                this.verifyMethod_ = i;
                onChanged();
                return this;
            }

            public final Builder clearVerifyMethod() {
                this.bitField0_ &= -4097;
                this.verifyMethod_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasPbocAid() {
                return (this.bitField0_ & 8192) == 8192;
            }

            public final String getPbocAid() {
                Object obj = this.pbocAid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pbocAid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPbocAidBytes() {
                Object obj = this.pbocAid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.pbocAid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPbocAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 8192;
                    this.pbocAid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPbocAid() {
                this.bitField0_ &= -8193;
                this.pbocAid_ = InAppTransData.getDefaultInstance().getPbocAid();
                onChanged();
                return this;
            }

            public final Builder setPbocAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8192;
                    this.pbocAid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardReferenceId() {
                return (this.bitField0_ & 16384) == 16384;
            }

            public final String getCardReferenceId() {
                Object obj = this.cardReferenceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardReferenceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardReferenceIdBytes() {
                Object obj = this.cardReferenceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardReferenceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardReferenceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 16384;
                    this.cardReferenceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardReferenceId() {
                this.bitField0_ &= -16385;
                this.cardReferenceId_ = InAppTransData.getDefaultInstance().getCardReferenceId();
                onChanged();
                return this;
            }

            public final Builder setCardReferenceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16384;
                    this.cardReferenceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 32768) == 32768;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 32768;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -32769;
                this.deviceId_ = InAppTransData.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32768;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class InAppTransCommand extends GeneratedMessage implements InAppTransCommandOrBuilder {
        public static Parser<InAppTransCommand> PARSER = new AbstractParser<InAppTransCommand>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.InAppTransCommand.AnonymousClass1 */

            public final InAppTransCommand parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new InAppTransCommand(codedInputStream, extensionRegistryLite);
            }
        };
        private static final InAppTransCommand defaultInstance;
        private static final long serialVersionUID = 0;
        public TsmCAPDU apdus_;
        public int bitField0_;
        public Object errorDesc_;
        public int keyIndex_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        public Object sign_;
        public Object timestamp_;
        private final UnknownFieldSet unknownFields;

        private InAppTransCommand(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private InAppTransCommand(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static InAppTransCommand getDefaultInstance() {
            return defaultInstance;
        }

        public final InAppTransCommand getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private InAppTransCommand(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 26) {
                            TsmCAPDU.Builder builder = (this.bitField0_ & 2) == 2 ? this.apdus_.toBuilder() : null;
                            this.apdus_ = (TsmCAPDU) codedInputStream.readMessage(TsmCAPDU.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.apdus_);
                                this.apdus_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 2;
                        } else if (readTag == 34) {
                            this.bitField0_ |= 4;
                            this.sign_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 8;
                            this.timestamp_ = codedInputStream.readBytes();
                        } else if (readTag == 48) {
                            this.bitField0_ |= 16;
                            this.keyIndex_ = codedInputStream.readInt32();
                        } else if (readTag == 58) {
                            this.bitField0_ |= 32;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_fieldAccessorTable.ensureFieldAccessorsInitialized(InAppTransCommand.class, Builder.class);
        }

        static {
            InAppTransCommand inAppTransCommand = new InAppTransCommand(true);
            defaultInstance = inAppTransCommand;
            inAppTransCommand.initFields();
        }

        public final Parser<InAppTransCommand> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasApdus() {
            return (this.bitField0_ & 2) == 2;
        }

        public final TsmCAPDU getApdus() {
            return this.apdus_;
        }

        public final TsmCAPDUOrBuilder getApdusOrBuilder() {
            return this.apdus_;
        }

        public final boolean hasSign() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getSign() {
            Object obj = this.sign_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sign_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSignBytes() {
            Object obj = this.sign_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sign_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasTimestamp() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getTimestamp() {
            Object obj = this.timestamp_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.timestamp_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getTimestampBytes() {
            Object obj = this.timestamp_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.timestamp_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasKeyIndex() {
            return (this.bitField0_ & 16) == 16;
        }

        public final int getKeyIndex() {
            return this.keyIndex_;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 32) == 32;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.apdus_ = TsmCAPDU.getDefaultInstance();
            this.sign_ = "";
            this.timestamp_ = "";
            this.keyIndex_ = 0;
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasApdus() || getApdus().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(3, this.apdus_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(4, getSignBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(5, getTimestampBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(6, this.keyIndex_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeBytes(7, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeMessageSize(3, this.apdus_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(4, getSignBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(5, getTimestampBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(6, this.keyIndex_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeBytesSize(7, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static InAppTransCommand parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static InAppTransCommand parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static InAppTransCommand parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static InAppTransCommand parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static InAppTransCommand parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static InAppTransCommand parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static InAppTransCommand parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static InAppTransCommand parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static InAppTransCommand parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static InAppTransCommand parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(InAppTransCommand inAppTransCommand) {
            return newBuilder().mergeFrom(inAppTransCommand);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements InAppTransCommandOrBuilder {
            private SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> apdusBuilder_;
            private TsmCAPDU apdus_;
            private int bitField0_;
            private Object errorDesc_;
            private int keyIndex_;
            private int result_;
            private Object sign_;
            private Object timestamp_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_fieldAccessorTable.ensureFieldAccessorsInitialized(InAppTransCommand.class, Builder.class);
            }

            private Builder() {
                this.apdus_ = TsmCAPDU.getDefaultInstance();
                this.sign_ = "";
                this.timestamp_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.apdus_ = TsmCAPDU.getDefaultInstance();
                this.sign_ = "";
                this.timestamp_ = "";
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (InAppTransCommand.alwaysUseFieldBuilders) {
                    getApdusFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder == null) {
                    this.apdus_ = TsmCAPDU.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                this.sign_ = "";
                this.bitField0_ &= -5;
                this.timestamp_ = "";
                this.bitField0_ &= -9;
                this.keyIndex_ = 0;
                this.bitField0_ &= -17;
                this.errorDesc_ = "";
                this.bitField0_ &= -33;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppTransCommand_descriptor;
            }

            public final InAppTransCommand getDefaultInstanceForType() {
                return InAppTransCommand.getDefaultInstance();
            }

            public final InAppTransCommand build() {
                InAppTransCommand buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final InAppTransCommand buildPartial() {
                InAppTransCommand inAppTransCommand = new InAppTransCommand(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                inAppTransCommand.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder == null) {
                    inAppTransCommand.apdus_ = this.apdus_;
                } else {
                    inAppTransCommand.apdus_ = singleFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                inAppTransCommand.sign_ = this.sign_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                inAppTransCommand.timestamp_ = this.timestamp_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                inAppTransCommand.keyIndex_ = this.keyIndex_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                inAppTransCommand.errorDesc_ = this.errorDesc_;
                inAppTransCommand.bitField0_ = i2;
                onBuilt();
                return inAppTransCommand;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof InAppTransCommand) {
                    return mergeFrom((InAppTransCommand) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(InAppTransCommand inAppTransCommand) {
                if (inAppTransCommand == InAppTransCommand.getDefaultInstance()) {
                    return this;
                }
                if (inAppTransCommand.hasResult()) {
                    setResult(inAppTransCommand.getResult());
                }
                if (inAppTransCommand.hasApdus()) {
                    mergeApdus(inAppTransCommand.getApdus());
                }
                if (inAppTransCommand.hasSign()) {
                    this.bitField0_ |= 4;
                    this.sign_ = inAppTransCommand.sign_;
                    onChanged();
                }
                if (inAppTransCommand.hasTimestamp()) {
                    this.bitField0_ |= 8;
                    this.timestamp_ = inAppTransCommand.timestamp_;
                    onChanged();
                }
                if (inAppTransCommand.hasKeyIndex()) {
                    setKeyIndex(inAppTransCommand.getKeyIndex());
                }
                if (inAppTransCommand.hasErrorDesc()) {
                    this.bitField0_ |= 32;
                    this.errorDesc_ = inAppTransCommand.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(inAppTransCommand.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                if (!hasApdus() || getApdus().isInitialized()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                InAppTransCommand inAppTransCommand;
                InAppTransCommand inAppTransCommand2 = null;
                try {
                    InAppTransCommand parsePartialFrom = InAppTransCommand.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    inAppTransCommand = (InAppTransCommand) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    inAppTransCommand2 = inAppTransCommand;
                }
                if (inAppTransCommand2 != null) {
                    mergeFrom(inAppTransCommand2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasApdus() {
                return (this.bitField0_ & 2) == 2;
            }

            public final TsmCAPDU getApdus() {
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder == null) {
                    return this.apdus_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setApdus(TsmCAPDU tsmCAPDU) {
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(tsmCAPDU);
                } else if (tsmCAPDU != null) {
                    this.apdus_ = tsmCAPDU;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setApdus(TsmCAPDU.Builder builder) {
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder == null) {
                    this.apdus_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder mergeApdus(TsmCAPDU tsmCAPDU) {
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 2) != 2 || this.apdus_ == TsmCAPDU.getDefaultInstance()) {
                        this.apdus_ = tsmCAPDU;
                    } else {
                        this.apdus_ = TsmCAPDU.newBuilder(this.apdus_).mergeFrom(tsmCAPDU).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(tsmCAPDU);
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder clearApdus() {
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder == null) {
                    this.apdus_ = TsmCAPDU.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                return this;
            }

            public final TsmCAPDU.Builder getApdusBuilder() {
                this.bitField0_ |= 2;
                onChanged();
                return getApdusFieldBuilder().getBuilder();
            }

            public final TsmCAPDUOrBuilder getApdusOrBuilder() {
                SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> singleFieldBuilder = this.apdusBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.apdus_;
            }

            private SingleFieldBuilder<TsmCAPDU, TsmCAPDU.Builder, TsmCAPDUOrBuilder> getApdusFieldBuilder() {
                if (this.apdusBuilder_ == null) {
                    this.apdusBuilder_ = new SingleFieldBuilder<>(this.apdus_, getParentForChildren(), isClean());
                    this.apdus_ = null;
                }
                return this.apdusBuilder_;
            }

            public final boolean hasSign() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getSign() {
                Object obj = this.sign_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sign_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSignBytes() {
                Object obj = this.sign_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sign_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSign(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.sign_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSign() {
                this.bitField0_ &= -5;
                this.sign_ = InAppTransCommand.getDefaultInstance().getSign();
                onChanged();
                return this;
            }

            public final Builder setSignBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.sign_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasTimestamp() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getTimestamp() {
                Object obj = this.timestamp_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.timestamp_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getTimestampBytes() {
                Object obj = this.timestamp_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.timestamp_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setTimestamp(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.timestamp_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearTimestamp() {
                this.bitField0_ &= -9;
                this.timestamp_ = InAppTransCommand.getDefaultInstance().getTimestamp();
                onChanged();
                return this;
            }

            public final Builder setTimestampBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.timestamp_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasKeyIndex() {
                return (this.bitField0_ & 16) == 16;
            }

            public final int getKeyIndex() {
                return this.keyIndex_;
            }

            public final Builder setKeyIndex(int i) {
                this.bitField0_ |= 16;
                this.keyIndex_ = i;
                onChanged();
                return this;
            }

            public final Builder clearKeyIndex() {
                this.bitField0_ &= -17;
                this.keyIndex_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 32) == 32;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 32;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -33;
                this.errorDesc_ = InAppTransCommand.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 32;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class TransDataForNonNFCResponse extends GeneratedMessage implements TransDataForNonNFCResponseOrBuilder {
        public static Parser<TransDataForNonNFCResponse> PARSER = new AbstractParser<TransDataForNonNFCResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.TransDataForNonNFCResponse.AnonymousClass1 */

            public final TransDataForNonNFCResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new TransDataForNonNFCResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final TransDataForNonNFCResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public int keyIndex_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object qrToken_;
        public int result_;
        public Object sign_;
        private final UnknownFieldSet unknownFields;
        public Object vrfMode_;

        private TransDataForNonNFCResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private TransDataForNonNFCResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static TransDataForNonNFCResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final TransDataForNonNFCResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private TransDataForNonNFCResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.qrToken_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.vrfMode_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.sign_ = codedInputStream.readBytes();
                        } else if (readTag == 40) {
                            this.bitField0_ |= 16;
                            this.keyIndex_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TransDataForNonNFCResponse.class, Builder.class);
        }

        static {
            TransDataForNonNFCResponse transDataForNonNFCResponse = new TransDataForNonNFCResponse(true);
            defaultInstance = transDataForNonNFCResponse;
            transDataForNonNFCResponse.initFields();
        }

        public final Parser<TransDataForNonNFCResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasQrToken() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getQrToken() {
            Object obj = this.qrToken_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.qrToken_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getQrTokenBytes() {
            Object obj = this.qrToken_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.qrToken_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVrfMode() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getVrfMode() {
            Object obj = this.vrfMode_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.vrfMode_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getVrfModeBytes() {
            Object obj = this.vrfMode_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.vrfMode_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSign() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getSign() {
            Object obj = this.sign_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sign_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSignBytes() {
            Object obj = this.sign_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sign_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasKeyIndex() {
            return (this.bitField0_ & 16) == 16;
        }

        public final int getKeyIndex() {
            return this.keyIndex_;
        }

        private void initFields() {
            this.result_ = 0;
            this.qrToken_ = "";
            this.vrfMode_ = "";
            this.sign_ = "";
            this.keyIndex_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getQrTokenBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getVrfModeBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getSignBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.keyIndex_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getQrTokenBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getVrfModeBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getSignBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.keyIndex_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static TransDataForNonNFCResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static TransDataForNonNFCResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static TransDataForNonNFCResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static TransDataForNonNFCResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static TransDataForNonNFCResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static TransDataForNonNFCResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static TransDataForNonNFCResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static TransDataForNonNFCResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static TransDataForNonNFCResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static TransDataForNonNFCResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(TransDataForNonNFCResponse transDataForNonNFCResponse) {
            return newBuilder().mergeFrom(transDataForNonNFCResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements TransDataForNonNFCResponseOrBuilder {
            private int bitField0_;
            private int keyIndex_;
            private Object qrToken_;
            private int result_;
            private Object sign_;
            private Object vrfMode_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(TransDataForNonNFCResponse.class, Builder.class);
            }

            private Builder() {
                this.qrToken_ = "";
                this.vrfMode_ = "";
                this.sign_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.qrToken_ = "";
                this.vrfMode_ = "";
                this.sign_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = TransDataForNonNFCResponse.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.qrToken_ = "";
                this.bitField0_ &= -3;
                this.vrfMode_ = "";
                this.bitField0_ &= -5;
                this.sign_ = "";
                this.bitField0_ &= -9;
                this.keyIndex_ = 0;
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_TransDataForNonNFCResponse_descriptor;
            }

            public final TransDataForNonNFCResponse getDefaultInstanceForType() {
                return TransDataForNonNFCResponse.getDefaultInstance();
            }

            public final TransDataForNonNFCResponse build() {
                TransDataForNonNFCResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final TransDataForNonNFCResponse buildPartial() {
                TransDataForNonNFCResponse transDataForNonNFCResponse = new TransDataForNonNFCResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                transDataForNonNFCResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                transDataForNonNFCResponse.qrToken_ = this.qrToken_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                transDataForNonNFCResponse.vrfMode_ = this.vrfMode_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                transDataForNonNFCResponse.sign_ = this.sign_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                transDataForNonNFCResponse.keyIndex_ = this.keyIndex_;
                transDataForNonNFCResponse.bitField0_ = i2;
                onBuilt();
                return transDataForNonNFCResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof TransDataForNonNFCResponse) {
                    return mergeFrom((TransDataForNonNFCResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(TransDataForNonNFCResponse transDataForNonNFCResponse) {
                if (transDataForNonNFCResponse == TransDataForNonNFCResponse.getDefaultInstance()) {
                    return this;
                }
                if (transDataForNonNFCResponse.hasResult()) {
                    setResult(transDataForNonNFCResponse.getResult());
                }
                if (transDataForNonNFCResponse.hasQrToken()) {
                    this.bitField0_ |= 2;
                    this.qrToken_ = transDataForNonNFCResponse.qrToken_;
                    onChanged();
                }
                if (transDataForNonNFCResponse.hasVrfMode()) {
                    this.bitField0_ |= 4;
                    this.vrfMode_ = transDataForNonNFCResponse.vrfMode_;
                    onChanged();
                }
                if (transDataForNonNFCResponse.hasSign()) {
                    this.bitField0_ |= 8;
                    this.sign_ = transDataForNonNFCResponse.sign_;
                    onChanged();
                }
                if (transDataForNonNFCResponse.hasKeyIndex()) {
                    setKeyIndex(transDataForNonNFCResponse.getKeyIndex());
                }
                mergeUnknownFields(transDataForNonNFCResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                TransDataForNonNFCResponse transDataForNonNFCResponse;
                TransDataForNonNFCResponse transDataForNonNFCResponse2 = null;
                try {
                    TransDataForNonNFCResponse parsePartialFrom = TransDataForNonNFCResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    transDataForNonNFCResponse = (TransDataForNonNFCResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    transDataForNonNFCResponse2 = transDataForNonNFCResponse;
                }
                if (transDataForNonNFCResponse2 != null) {
                    mergeFrom(transDataForNonNFCResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasQrToken() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getQrToken() {
                Object obj = this.qrToken_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.qrToken_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getQrTokenBytes() {
                Object obj = this.qrToken_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.qrToken_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setQrToken(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.qrToken_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearQrToken() {
                this.bitField0_ &= -3;
                this.qrToken_ = TransDataForNonNFCResponse.getDefaultInstance().getQrToken();
                onChanged();
                return this;
            }

            public final Builder setQrTokenBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.qrToken_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVrfMode() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getVrfMode() {
                Object obj = this.vrfMode_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.vrfMode_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getVrfModeBytes() {
                Object obj = this.vrfMode_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.vrfMode_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setVrfMode(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.vrfMode_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearVrfMode() {
                this.bitField0_ &= -5;
                this.vrfMode_ = TransDataForNonNFCResponse.getDefaultInstance().getVrfMode();
                onChanged();
                return this;
            }

            public final Builder setVrfModeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.vrfMode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSign() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getSign() {
                Object obj = this.sign_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sign_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSignBytes() {
                Object obj = this.sign_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sign_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSign(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.sign_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSign() {
                this.bitField0_ &= -9;
                this.sign_ = TransDataForNonNFCResponse.getDefaultInstance().getSign();
                onChanged();
                return this;
            }

            public final Builder setSignBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.sign_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasKeyIndex() {
                return (this.bitField0_ & 16) == 16;
            }

            public final int getKeyIndex() {
                return this.keyIndex_;
            }

            public final Builder setKeyIndex(int i) {
                this.bitField0_ |= 16;
                this.keyIndex_ = i;
                onChanged();
                return this;
            }

            public final Builder clearKeyIndex() {
                this.bitField0_ &= -17;
                this.keyIndex_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class InAppPayResult extends GeneratedMessage implements InAppPayResultOrBuilder {
        public static Parser<InAppPayResult> PARSER = new AbstractParser<InAppPayResult>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.InAppPayResult.AnonymousClass1 */

            public final InAppPayResult parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new InAppPayResult(codedInputStream, extensionRegistryLite);
            }
        };
        private static final InAppPayResult defaultInstance;
        private static final long serialVersionUID = 0;
        public int acquirer_;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object merchantId_;
        public Object orderNumber_;
        public Object pan_;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private InAppPayResult(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private InAppPayResult(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static InAppPayResult getDefaultInstance() {
            return defaultInstance;
        }

        public final InAppPayResult getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private InAppPayResult(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 16) {
                            this.bitField0_ |= 2;
                            this.acquirer_ = codedInputStream.readInt32();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.orderNumber_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.merchantId_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.pan_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_fieldAccessorTable.ensureFieldAccessorsInitialized(InAppPayResult.class, Builder.class);
        }

        static {
            InAppPayResult inAppPayResult = new InAppPayResult(true);
            defaultInstance = inAppPayResult;
            inAppPayResult.initFields();
        }

        public final Parser<InAppPayResult> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasAcquirer() {
            return (this.bitField0_ & 2) == 2;
        }

        public final int getAcquirer() {
            return this.acquirer_;
        }

        public final boolean hasOrderNumber() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getOrderNumber() {
            Object obj = this.orderNumber_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.orderNumber_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getOrderNumberBytes() {
            Object obj = this.orderNumber_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.orderNumber_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMerchantId() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getMerchantId() {
            Object obj = this.merchantId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.merchantId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getMerchantIdBytes() {
            Object obj = this.merchantId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.merchantId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasPan() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getPan() {
            Object obj = this.pan_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.pan_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getPanBytes() {
            Object obj = this.pan_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.pan_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.acquirer_ = 0;
            this.orderNumber_ = "";
            this.merchantId_ = "";
            this.pan_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasOrderNumber()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasMerchantId()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasPan()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else {
                this.memoizedIsInitialized = 1;
                return true;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.acquirer_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getOrderNumberBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getMerchantIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getPanBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.acquirer_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getOrderNumberBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getMerchantIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getPanBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static InAppPayResult parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static InAppPayResult parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static InAppPayResult parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static InAppPayResult parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static InAppPayResult parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static InAppPayResult parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static InAppPayResult parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static InAppPayResult parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static InAppPayResult parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static InAppPayResult parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(InAppPayResult inAppPayResult) {
            return newBuilder().mergeFrom(inAppPayResult);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements InAppPayResultOrBuilder {
            private int acquirer_;
            private int bitField0_;
            private Object merchantId_;
            private Object orderNumber_;
            private Object pan_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_fieldAccessorTable.ensureFieldAccessorsInitialized(InAppPayResult.class, Builder.class);
            }

            private Builder() {
                this.orderNumber_ = "";
                this.merchantId_ = "";
                this.pan_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.orderNumber_ = "";
                this.merchantId_ = "";
                this.pan_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = InAppPayResult.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.acquirer_ = 0;
                this.bitField0_ &= -3;
                this.orderNumber_ = "";
                this.bitField0_ &= -5;
                this.merchantId_ = "";
                this.bitField0_ &= -9;
                this.pan_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_InAppPayResult_descriptor;
            }

            public final InAppPayResult getDefaultInstanceForType() {
                return InAppPayResult.getDefaultInstance();
            }

            public final InAppPayResult build() {
                InAppPayResult buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final InAppPayResult buildPartial() {
                InAppPayResult inAppPayResult = new InAppPayResult(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                inAppPayResult.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                inAppPayResult.acquirer_ = this.acquirer_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                inAppPayResult.orderNumber_ = this.orderNumber_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                inAppPayResult.merchantId_ = this.merchantId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                inAppPayResult.pan_ = this.pan_;
                inAppPayResult.bitField0_ = i2;
                onBuilt();
                return inAppPayResult;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof InAppPayResult) {
                    return mergeFrom((InAppPayResult) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(InAppPayResult inAppPayResult) {
                if (inAppPayResult == InAppPayResult.getDefaultInstance()) {
                    return this;
                }
                if (inAppPayResult.hasResult()) {
                    setResult(inAppPayResult.getResult());
                }
                if (inAppPayResult.hasAcquirer()) {
                    setAcquirer(inAppPayResult.getAcquirer());
                }
                if (inAppPayResult.hasOrderNumber()) {
                    this.bitField0_ |= 4;
                    this.orderNumber_ = inAppPayResult.orderNumber_;
                    onChanged();
                }
                if (inAppPayResult.hasMerchantId()) {
                    this.bitField0_ |= 8;
                    this.merchantId_ = inAppPayResult.merchantId_;
                    onChanged();
                }
                if (inAppPayResult.hasPan()) {
                    this.bitField0_ |= 16;
                    this.pan_ = inAppPayResult.pan_;
                    onChanged();
                }
                mergeUnknownFields(inAppPayResult.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (hasResult() && hasOrderNumber() && hasMerchantId() && hasPan()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                InAppPayResult inAppPayResult;
                InAppPayResult inAppPayResult2 = null;
                try {
                    InAppPayResult parsePartialFrom = InAppPayResult.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    inAppPayResult = (InAppPayResult) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    inAppPayResult2 = inAppPayResult;
                }
                if (inAppPayResult2 != null) {
                    mergeFrom(inAppPayResult2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasAcquirer() {
                return (this.bitField0_ & 2) == 2;
            }

            public final int getAcquirer() {
                return this.acquirer_;
            }

            public final Builder setAcquirer(int i) {
                this.bitField0_ |= 2;
                this.acquirer_ = i;
                onChanged();
                return this;
            }

            public final Builder clearAcquirer() {
                this.bitField0_ &= -3;
                this.acquirer_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasOrderNumber() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getOrderNumber() {
                Object obj = this.orderNumber_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.orderNumber_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getOrderNumberBytes() {
                Object obj = this.orderNumber_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.orderNumber_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setOrderNumber(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.orderNumber_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearOrderNumber() {
                this.bitField0_ &= -5;
                this.orderNumber_ = InAppPayResult.getDefaultInstance().getOrderNumber();
                onChanged();
                return this;
            }

            public final Builder setOrderNumberBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.orderNumber_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMerchantId() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getMerchantId() {
                Object obj = this.merchantId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.merchantId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getMerchantIdBytes() {
                Object obj = this.merchantId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.merchantId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setMerchantId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.merchantId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearMerchantId() {
                this.bitField0_ &= -9;
                this.merchantId_ = InAppPayResult.getDefaultInstance().getMerchantId();
                onChanged();
                return this;
            }

            public final Builder setMerchantIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.merchantId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasPan() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getPan() {
                Object obj = this.pan_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.pan_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getPanBytes() {
                Object obj = this.pan_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.pan_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setPan(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.pan_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearPan() {
                this.bitField0_ &= -17;
                this.pan_ = InAppPayResult.getDefaultInstance().getPan();
                onChanged();
                return this;
            }

            public final Builder setPanBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.pan_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class MifareCardParam extends GeneratedMessage implements MifareCardParamOrBuilder {
        public static Parser<MifareCardParam> PARSER = new AbstractParser<MifareCardParam>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.MifareCardParam.AnonymousClass1 */

            public final MifareCardParam parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new MifareCardParam(codedInputStream, extensionRegistryLite);
            }
        };
        private static final MifareCardParam defaultInstance;
        private static final long serialVersionUID = 0;
        public Object atqa_;
        public int bitField0_;
        public Object content_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sak_;
        public int sectorType_;
        public int size_;
        public Object uid_;
        private final UnknownFieldSet unknownFields;

        private MifareCardParam(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private MifareCardParam(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static MifareCardParam getDefaultInstance() {
            return defaultInstance;
        }

        public final MifareCardParam getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private MifareCardParam(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.uid_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.atqa_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.sak_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.content_ = codedInputStream.readBytes();
                        } else if (readTag == 40) {
                            this.bitField0_ |= 16;
                            this.size_ = codedInputStream.readInt32();
                        } else if (readTag == 48) {
                            this.bitField0_ |= 32;
                            this.sectorType_ = codedInputStream.readInt32();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_fieldAccessorTable.ensureFieldAccessorsInitialized(MifareCardParam.class, Builder.class);
        }

        static {
            MifareCardParam mifareCardParam = new MifareCardParam(true);
            defaultInstance = mifareCardParam;
            mifareCardParam.initFields();
        }

        public final Parser<MifareCardParam> getParserForType() {
            return PARSER;
        }

        public final boolean hasUid() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getUid() {
            Object obj = this.uid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.uid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUidBytes() {
            Object obj = this.uid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.uid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAtqa() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAtqa() {
            Object obj = this.atqa_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.atqa_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAtqaBytes() {
            Object obj = this.atqa_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.atqa_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSak() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getSak() {
            Object obj = this.sak_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sak_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSakBytes() {
            Object obj = this.sak_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sak_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasContent() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getContent() {
            Object obj = this.content_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.content_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getContentBytes() {
            Object obj = this.content_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.content_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSize() {
            return (this.bitField0_ & 16) == 16;
        }

        public final int getSize() {
            return this.size_;
        }

        public final boolean hasSectorType() {
            return (this.bitField0_ & 32) == 32;
        }

        public final int getSectorType() {
            return this.sectorType_;
        }

        private void initFields() {
            this.uid_ = "";
            this.atqa_ = "";
            this.sak_ = "";
            this.content_ = "";
            this.size_ = 0;
            this.sectorType_ = 0;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getUidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAtqaBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getSakBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getContentBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeInt32(5, this.size_);
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(6, this.sectorType_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getUidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAtqaBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getSakBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getContentBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeInt32Size(5, this.size_);
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt32Size(6, this.sectorType_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static MifareCardParam parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static MifareCardParam parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static MifareCardParam parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static MifareCardParam parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static MifareCardParam parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static MifareCardParam parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static MifareCardParam parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static MifareCardParam parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static MifareCardParam parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static MifareCardParam parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(MifareCardParam mifareCardParam) {
            return newBuilder().mergeFrom(mifareCardParam);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements MifareCardParamOrBuilder {
            private Object atqa_;
            private int bitField0_;
            private Object content_;
            private Object sak_;
            private int sectorType_;
            private int size_;
            private Object uid_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_fieldAccessorTable.ensureFieldAccessorsInitialized(MifareCardParam.class, Builder.class);
            }

            private Builder() {
                this.uid_ = "";
                this.atqa_ = "";
                this.sak_ = "";
                this.content_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.uid_ = "";
                this.atqa_ = "";
                this.sak_ = "";
                this.content_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = MifareCardParam.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.uid_ = "";
                this.bitField0_ &= -2;
                this.atqa_ = "";
                this.bitField0_ &= -3;
                this.sak_ = "";
                this.bitField0_ &= -5;
                this.content_ = "";
                this.bitField0_ &= -9;
                this.size_ = 0;
                this.bitField0_ &= -17;
                this.sectorType_ = 0;
                this.bitField0_ &= -33;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_MifareCardParam_descriptor;
            }

            public final MifareCardParam getDefaultInstanceForType() {
                return MifareCardParam.getDefaultInstance();
            }

            public final MifareCardParam build() {
                MifareCardParam buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final MifareCardParam buildPartial() {
                MifareCardParam mifareCardParam = new MifareCardParam(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                mifareCardParam.uid_ = this.uid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                mifareCardParam.atqa_ = this.atqa_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                mifareCardParam.sak_ = this.sak_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                mifareCardParam.content_ = this.content_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                mifareCardParam.size_ = this.size_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                mifareCardParam.sectorType_ = this.sectorType_;
                mifareCardParam.bitField0_ = i2;
                onBuilt();
                return mifareCardParam;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof MifareCardParam) {
                    return mergeFrom((MifareCardParam) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(MifareCardParam mifareCardParam) {
                if (mifareCardParam == MifareCardParam.getDefaultInstance()) {
                    return this;
                }
                if (mifareCardParam.hasUid()) {
                    this.bitField0_ |= 1;
                    this.uid_ = mifareCardParam.uid_;
                    onChanged();
                }
                if (mifareCardParam.hasAtqa()) {
                    this.bitField0_ |= 2;
                    this.atqa_ = mifareCardParam.atqa_;
                    onChanged();
                }
                if (mifareCardParam.hasSak()) {
                    this.bitField0_ |= 4;
                    this.sak_ = mifareCardParam.sak_;
                    onChanged();
                }
                if (mifareCardParam.hasContent()) {
                    this.bitField0_ |= 8;
                    this.content_ = mifareCardParam.content_;
                    onChanged();
                }
                if (mifareCardParam.hasSize()) {
                    setSize(mifareCardParam.getSize());
                }
                if (mifareCardParam.hasSectorType()) {
                    setSectorType(mifareCardParam.getSectorType());
                }
                mergeUnknownFields(mifareCardParam.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                MifareCardParam mifareCardParam;
                MifareCardParam mifareCardParam2 = null;
                try {
                    MifareCardParam parsePartialFrom = MifareCardParam.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    mifareCardParam = (MifareCardParam) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    mifareCardParam2 = mifareCardParam;
                }
                if (mifareCardParam2 != null) {
                    mergeFrom(mifareCardParam2);
                }
                throw th;
            }

            public final boolean hasUid() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getUid() {
                Object obj = this.uid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.uid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUidBytes() {
                Object obj = this.uid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.uid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.uid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUid() {
                this.bitField0_ &= -2;
                this.uid_ = MifareCardParam.getDefaultInstance().getUid();
                onChanged();
                return this;
            }

            public final Builder setUidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.uid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAtqa() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAtqa() {
                Object obj = this.atqa_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.atqa_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAtqaBytes() {
                Object obj = this.atqa_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.atqa_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAtqa(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.atqa_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAtqa() {
                this.bitField0_ &= -3;
                this.atqa_ = MifareCardParam.getDefaultInstance().getAtqa();
                onChanged();
                return this;
            }

            public final Builder setAtqaBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.atqa_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSak() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getSak() {
                Object obj = this.sak_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sak_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSakBytes() {
                Object obj = this.sak_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sak_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSak(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.sak_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSak() {
                this.bitField0_ &= -5;
                this.sak_ = MifareCardParam.getDefaultInstance().getSak();
                onChanged();
                return this;
            }

            public final Builder setSakBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.sak_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasContent() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getContent() {
                Object obj = this.content_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.content_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getContentBytes() {
                Object obj = this.content_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.content_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setContent(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.content_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearContent() {
                this.bitField0_ &= -9;
                this.content_ = MifareCardParam.getDefaultInstance().getContent();
                onChanged();
                return this;
            }

            public final Builder setContentBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.content_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSize() {
                return (this.bitField0_ & 16) == 16;
            }

            public final int getSize() {
                return this.size_;
            }

            public final Builder setSize(int i) {
                this.bitField0_ |= 16;
                this.size_ = i;
                onChanged();
                return this;
            }

            public final Builder clearSize() {
                this.bitField0_ &= -17;
                this.size_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasSectorType() {
                return (this.bitField0_ & 32) == 32;
            }

            public final int getSectorType() {
                return this.sectorType_;
            }

            public final Builder setSectorType(int i) {
                this.bitField0_ |= 32;
                this.sectorType_ = i;
                onChanged();
                return this;
            }

            public final Builder clearSectorType() {
                this.bitField0_ &= -33;
                this.sectorType_ = 0;
                onChanged();
                return this;
            }
        }
    }

    public static final class EnrollDoorCardRequest extends GeneratedMessage implements EnrollDoorCardRequestOrBuilder {
        public static Parser<EnrollDoorCardRequest> PARSER = new AbstractParser<EnrollDoorCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.EnrollDoorCardRequest.AnonymousClass1 */

            public final EnrollDoorCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new EnrollDoorCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final EnrollDoorCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object applyChannel_;
        public int bitField0_;
        public Object businessId_;
        public DoorCardType cardType_;
        public Object communityCode_;
        public Object issuerId_;
        public Object issuerToken_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public MifareCardParam mifareCardParam_;
        public boolean overwrite_;
        public Object productId_;
        public Object sessionId_;
        public Object ticket_;
        private final UnknownFieldSet unknownFields;

        private EnrollDoorCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnrollDoorCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnrollDoorCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final EnrollDoorCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnrollDoorCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case 10:
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.issuerId_ = codedInputStream.readBytes();
                            continue;
                        case 26:
                            this.bitField0_ |= 4;
                            this.productId_ = codedInputStream.readBytes();
                            continue;
                        case 34:
                            MifareCardParam.Builder builder = (this.bitField0_ & 8) == 8 ? this.mifareCardParam_.toBuilder() : null;
                            this.mifareCardParam_ = (MifareCardParam) codedInputStream.readMessage(MifareCardParam.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.mifareCardParam_);
                                this.mifareCardParam_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 8;
                            continue;
                        case 42:
                            this.bitField0_ |= 16;
                            this.applyChannel_ = codedInputStream.readBytes();
                            continue;
                        case 48:
                            int readEnum = codedInputStream.readEnum();
                            DoorCardType valueOf = DoorCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(6, readEnum);
                                continue;
                            } else {
                                this.bitField0_ |= 32;
                                this.cardType_ = valueOf;
                            }
                        case 58:
                            this.bitField0_ |= 64;
                            this.issuerToken_ = codedInputStream.readBytes();
                            continue;
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.communityCode_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.businessId_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.ticket_ = codedInputStream.readBytes();
                            continue;
                        case 88:
                            this.bitField0_ |= 1024;
                            this.overwrite_ = codedInputStream.readBool();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnrollDoorCardRequest.class, Builder.class);
        }

        static {
            EnrollDoorCardRequest enrollDoorCardRequest = new EnrollDoorCardRequest(true);
            defaultInstance = enrollDoorCardRequest;
            enrollDoorCardRequest.initFields();
        }

        public final Parser<EnrollDoorCardRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasIssuerId() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getIssuerId() {
            Object obj = this.issuerId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.issuerId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIssuerIdBytes() {
            Object obj = this.issuerId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.issuerId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasProductId() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getProductId() {
            Object obj = this.productId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.productId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getProductIdBytes() {
            Object obj = this.productId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.productId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasMifareCardParam() {
            return (this.bitField0_ & 8) == 8;
        }

        public final MifareCardParam getMifareCardParam() {
            return this.mifareCardParam_;
        }

        public final MifareCardParamOrBuilder getMifareCardParamOrBuilder() {
            return this.mifareCardParam_;
        }

        public final boolean hasApplyChannel() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getApplyChannel() {
            Object obj = this.applyChannel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.applyChannel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getApplyChannelBytes() {
            Object obj = this.applyChannel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.applyChannel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 32) == 32;
        }

        public final DoorCardType getCardType() {
            return this.cardType_;
        }

        public final boolean hasIssuerToken() {
            return (this.bitField0_ & 64) == 64;
        }

        public final String getIssuerToken() {
            Object obj = this.issuerToken_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.issuerToken_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getIssuerTokenBytes() {
            Object obj = this.issuerToken_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.issuerToken_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCommunityCode() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getCommunityCode() {
            Object obj = this.communityCode_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.communityCode_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCommunityCodeBytes() {
            Object obj = this.communityCode_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.communityCode_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBusinessId() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getBusinessId() {
            Object obj = this.businessId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.businessId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBusinessIdBytes() {
            Object obj = this.businessId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.businessId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasTicket() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getTicket() {
            Object obj = this.ticket_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.ticket_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getTicketBytes() {
            Object obj = this.ticket_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.ticket_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasOverwrite() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final boolean getOverwrite() {
            return this.overwrite_;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.issuerId_ = "";
            this.productId_ = "";
            this.mifareCardParam_ = MifareCardParam.getDefaultInstance();
            this.applyChannel_ = "00";
            this.cardType_ = DoorCardType.M1_NORMAL;
            this.issuerToken_ = "";
            this.communityCode_ = "";
            this.businessId_ = "";
            this.ticket_ = "";
            this.overwrite_ = false;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getIssuerIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getProductIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeMessage(4, this.mifareCardParam_);
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getApplyChannelBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeEnum(6, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeBytes(7, getIssuerTokenBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getCommunityCodeBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getBusinessIdBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getTicketBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBool(11, this.overwrite_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getIssuerIdBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getProductIdBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeMessageSize(4, this.mifareCardParam_);
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getApplyChannelBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeEnumSize(6, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeBytesSize(7, getIssuerTokenBytes());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getCommunityCodeBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getBusinessIdBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getTicketBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBoolSize(11, this.overwrite_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnrollDoorCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static EnrollDoorCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static EnrollDoorCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static EnrollDoorCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static EnrollDoorCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static EnrollDoorCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static EnrollDoorCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static EnrollDoorCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static EnrollDoorCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static EnrollDoorCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnrollDoorCardRequest enrollDoorCardRequest) {
            return newBuilder().mergeFrom(enrollDoorCardRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements EnrollDoorCardRequestOrBuilder {
            private Object applyChannel_;
            private int bitField0_;
            private Object businessId_;
            private DoorCardType cardType_;
            private Object communityCode_;
            private Object issuerId_;
            private Object issuerToken_;
            private SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> mifareCardParamBuilder_;
            private MifareCardParam mifareCardParam_;
            private boolean overwrite_;
            private Object productId_;
            private Object sessionId_;
            private Object ticket_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnrollDoorCardRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.issuerId_ = "";
                this.productId_ = "";
                this.mifareCardParam_ = MifareCardParam.getDefaultInstance();
                this.applyChannel_ = "00";
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.issuerToken_ = "";
                this.communityCode_ = "";
                this.businessId_ = "";
                this.ticket_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.issuerId_ = "";
                this.productId_ = "";
                this.mifareCardParam_ = MifareCardParam.getDefaultInstance();
                this.applyChannel_ = "00";
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.issuerToken_ = "";
                this.communityCode_ = "";
                this.businessId_ = "";
                this.ticket_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (EnrollDoorCardRequest.alwaysUseFieldBuilders) {
                    getMifareCardParamFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.issuerId_ = "";
                this.bitField0_ &= -3;
                this.productId_ = "";
                this.bitField0_ &= -5;
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder == null) {
                    this.mifareCardParam_ = MifareCardParam.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                this.applyChannel_ = "00";
                this.bitField0_ &= -17;
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.bitField0_ &= -33;
                this.issuerToken_ = "";
                this.bitField0_ &= -65;
                this.communityCode_ = "";
                this.bitField0_ &= -129;
                this.businessId_ = "";
                this.bitField0_ &= -257;
                this.ticket_ = "";
                this.bitField0_ &= -513;
                this.overwrite_ = false;
                this.bitField0_ &= -1025;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollDoorCardRequest_descriptor;
            }

            public final EnrollDoorCardRequest getDefaultInstanceForType() {
                return EnrollDoorCardRequest.getDefaultInstance();
            }

            public final EnrollDoorCardRequest build() {
                EnrollDoorCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final EnrollDoorCardRequest buildPartial() {
                EnrollDoorCardRequest enrollDoorCardRequest = new EnrollDoorCardRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                enrollDoorCardRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                enrollDoorCardRequest.issuerId_ = this.issuerId_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                enrollDoorCardRequest.productId_ = this.productId_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder == null) {
                    enrollDoorCardRequest.mifareCardParam_ = this.mifareCardParam_;
                } else {
                    enrollDoorCardRequest.mifareCardParam_ = singleFieldBuilder.build();
                }
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                enrollDoorCardRequest.applyChannel_ = this.applyChannel_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                enrollDoorCardRequest.cardType_ = this.cardType_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                enrollDoorCardRequest.issuerToken_ = this.issuerToken_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                enrollDoorCardRequest.communityCode_ = this.communityCode_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                enrollDoorCardRequest.businessId_ = this.businessId_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                enrollDoorCardRequest.ticket_ = this.ticket_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                enrollDoorCardRequest.overwrite_ = this.overwrite_;
                enrollDoorCardRequest.bitField0_ = i2;
                onBuilt();
                return enrollDoorCardRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof EnrollDoorCardRequest) {
                    return mergeFrom((EnrollDoorCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(EnrollDoorCardRequest enrollDoorCardRequest) {
                if (enrollDoorCardRequest == EnrollDoorCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (enrollDoorCardRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = enrollDoorCardRequest.sessionId_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasIssuerId()) {
                    this.bitField0_ |= 2;
                    this.issuerId_ = enrollDoorCardRequest.issuerId_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasProductId()) {
                    this.bitField0_ |= 4;
                    this.productId_ = enrollDoorCardRequest.productId_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasMifareCardParam()) {
                    mergeMifareCardParam(enrollDoorCardRequest.getMifareCardParam());
                }
                if (enrollDoorCardRequest.hasApplyChannel()) {
                    this.bitField0_ |= 16;
                    this.applyChannel_ = enrollDoorCardRequest.applyChannel_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasCardType()) {
                    setCardType(enrollDoorCardRequest.getCardType());
                }
                if (enrollDoorCardRequest.hasIssuerToken()) {
                    this.bitField0_ |= 64;
                    this.issuerToken_ = enrollDoorCardRequest.issuerToken_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasCommunityCode()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.communityCode_ = enrollDoorCardRequest.communityCode_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasBusinessId()) {
                    this.bitField0_ |= 256;
                    this.businessId_ = enrollDoorCardRequest.businessId_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasTicket()) {
                    this.bitField0_ |= 512;
                    this.ticket_ = enrollDoorCardRequest.ticket_;
                    onChanged();
                }
                if (enrollDoorCardRequest.hasOverwrite()) {
                    setOverwrite(enrollDoorCardRequest.getOverwrite());
                }
                mergeUnknownFields(enrollDoorCardRequest.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                EnrollDoorCardRequest enrollDoorCardRequest;
                EnrollDoorCardRequest enrollDoorCardRequest2 = null;
                try {
                    EnrollDoorCardRequest parsePartialFrom = EnrollDoorCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    enrollDoorCardRequest = (EnrollDoorCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    enrollDoorCardRequest2 = enrollDoorCardRequest;
                }
                if (enrollDoorCardRequest2 != null) {
                    mergeFrom(enrollDoorCardRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = EnrollDoorCardRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasIssuerId() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getIssuerId() {
                Object obj = this.issuerId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.issuerId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIssuerIdBytes() {
                Object obj = this.issuerId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.issuerId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setIssuerId(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.issuerId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearIssuerId() {
                this.bitField0_ &= -3;
                this.issuerId_ = EnrollDoorCardRequest.getDefaultInstance().getIssuerId();
                onChanged();
                return this;
            }

            public final Builder setIssuerIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.issuerId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasProductId() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getProductId() {
                Object obj = this.productId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.productId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getProductIdBytes() {
                Object obj = this.productId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.productId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setProductId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.productId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearProductId() {
                this.bitField0_ &= -5;
                this.productId_ = EnrollDoorCardRequest.getDefaultInstance().getProductId();
                onChanged();
                return this;
            }

            public final Builder setProductIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.productId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasMifareCardParam() {
                return (this.bitField0_ & 8) == 8;
            }

            public final MifareCardParam getMifareCardParam() {
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder == null) {
                    return this.mifareCardParam_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setMifareCardParam(MifareCardParam mifareCardParam) {
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(mifareCardParam);
                } else if (mifareCardParam != null) {
                    this.mifareCardParam_ = mifareCardParam;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder setMifareCardParam(MifareCardParam.Builder builder) {
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder == null) {
                    this.mifareCardParam_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder mergeMifareCardParam(MifareCardParam mifareCardParam) {
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 8) != 8 || this.mifareCardParam_ == MifareCardParam.getDefaultInstance()) {
                        this.mifareCardParam_ = mifareCardParam;
                    } else {
                        this.mifareCardParam_ = MifareCardParam.newBuilder(this.mifareCardParam_).mergeFrom(mifareCardParam).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(mifareCardParam);
                }
                this.bitField0_ |= 8;
                return this;
            }

            public final Builder clearMifareCardParam() {
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder == null) {
                    this.mifareCardParam_ = MifareCardParam.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -9;
                return this;
            }

            public final MifareCardParam.Builder getMifareCardParamBuilder() {
                this.bitField0_ |= 8;
                onChanged();
                return getMifareCardParamFieldBuilder().getBuilder();
            }

            public final MifareCardParamOrBuilder getMifareCardParamOrBuilder() {
                SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> singleFieldBuilder = this.mifareCardParamBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.mifareCardParam_;
            }

            private SingleFieldBuilder<MifareCardParam, MifareCardParam.Builder, MifareCardParamOrBuilder> getMifareCardParamFieldBuilder() {
                if (this.mifareCardParamBuilder_ == null) {
                    this.mifareCardParamBuilder_ = new SingleFieldBuilder<>(this.mifareCardParam_, getParentForChildren(), isClean());
                    this.mifareCardParam_ = null;
                }
                return this.mifareCardParamBuilder_;
            }

            public final boolean hasApplyChannel() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getApplyChannel() {
                Object obj = this.applyChannel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.applyChannel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getApplyChannelBytes() {
                Object obj = this.applyChannel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.applyChannel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setApplyChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.applyChannel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearApplyChannel() {
                this.bitField0_ &= -17;
                this.applyChannel_ = EnrollDoorCardRequest.getDefaultInstance().getApplyChannel();
                onChanged();
                return this;
            }

            public final Builder setApplyChannelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.applyChannel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 32) == 32;
            }

            public final DoorCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(DoorCardType doorCardType) {
                if (doorCardType != null) {
                    this.bitField0_ |= 32;
                    this.cardType_ = doorCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -33;
                this.cardType_ = DoorCardType.M1_NORMAL;
                onChanged();
                return this;
            }

            public final boolean hasIssuerToken() {
                return (this.bitField0_ & 64) == 64;
            }

            public final String getIssuerToken() {
                Object obj = this.issuerToken_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.issuerToken_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getIssuerTokenBytes() {
                Object obj = this.issuerToken_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.issuerToken_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setIssuerToken(String str) {
                if (str != null) {
                    this.bitField0_ |= 64;
                    this.issuerToken_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearIssuerToken() {
                this.bitField0_ &= -65;
                this.issuerToken_ = EnrollDoorCardRequest.getDefaultInstance().getIssuerToken();
                onChanged();
                return this;
            }

            public final Builder setIssuerTokenBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 64;
                    this.issuerToken_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCommunityCode() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getCommunityCode() {
                Object obj = this.communityCode_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.communityCode_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCommunityCodeBytes() {
                Object obj = this.communityCode_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.communityCode_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCommunityCode(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.communityCode_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCommunityCode() {
                this.bitField0_ &= -129;
                this.communityCode_ = EnrollDoorCardRequest.getDefaultInstance().getCommunityCode();
                onChanged();
                return this;
            }

            public final Builder setCommunityCodeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.communityCode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBusinessId() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getBusinessId() {
                Object obj = this.businessId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.businessId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBusinessIdBytes() {
                Object obj = this.businessId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.businessId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBusinessId(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.businessId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBusinessId() {
                this.bitField0_ &= -257;
                this.businessId_ = EnrollDoorCardRequest.getDefaultInstance().getBusinessId();
                onChanged();
                return this;
            }

            public final Builder setBusinessIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.businessId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasTicket() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getTicket() {
                Object obj = this.ticket_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.ticket_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getTicketBytes() {
                Object obj = this.ticket_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.ticket_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setTicket(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.ticket_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearTicket() {
                this.bitField0_ &= -513;
                this.ticket_ = EnrollDoorCardRequest.getDefaultInstance().getTicket();
                onChanged();
                return this;
            }

            public final Builder setTicketBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.ticket_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasOverwrite() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final boolean getOverwrite() {
                return this.overwrite_;
            }

            public final Builder setOverwrite(boolean z) {
                this.bitField0_ |= 1024;
                this.overwrite_ = z;
                onChanged();
                return this;
            }

            public final Builder clearOverwrite() {
                this.bitField0_ &= -1025;
                this.overwrite_ = false;
                onChanged();
                return this;
            }
        }
    }

    public static final class DoorCardInfo extends GeneratedMessage implements DoorCardInfoOrBuilder {
        public static Parser<DoorCardInfo> PARSER = new AbstractParser<DoorCardInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.DoorCardInfo.AnonymousClass1 */

            public final DoorCardInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new DoorCardInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final DoorCardInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public Object applyChannel_;
        public int bitField0_;
        public Object businessId_;
        public Object cardArt_;
        public DoorCardType cardType_;
        public Object cid_;
        public Object communityCode_;
        public int fingerFlag_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object name_;
        public Object productId_;
        public Object productName_;
        public Object seId_;
        public Object status_;
        private final UnknownFieldSet unknownFields;
        public Object userTerms_;
        public int vcStatus_;

        private DoorCardInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private DoorCardInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static DoorCardInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final DoorCardInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private DoorCardInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    switch (readTag) {
                        case 0:
                            break;
                        case 10:
                            this.bitField0_ |= 1;
                            this.aid_ = codedInputStream.readBytes();
                            continue;
                        case 18:
                            this.bitField0_ |= 2;
                            this.name_ = codedInputStream.readBytes();
                            continue;
                        case 24:
                            this.bitField0_ |= 4;
                            this.vcStatus_ = codedInputStream.readInt32();
                            continue;
                        case 34:
                            this.bitField0_ |= 8;
                            this.userTerms_ = codedInputStream.readBytes();
                            continue;
                        case 42:
                            this.bitField0_ |= 16;
                            this.cardArt_ = codedInputStream.readBytes();
                            continue;
                        case 48:
                            this.bitField0_ |= 32;
                            this.fingerFlag_ = codedInputStream.readInt32();
                            continue;
                        case 56:
                            int readEnum = codedInputStream.readEnum();
                            DoorCardType valueOf = DoorCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(7, readEnum);
                                continue;
                            } else {
                                this.bitField0_ |= 64;
                                this.cardType_ = valueOf;
                            }
                        case 66:
                            this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                            this.cid_ = codedInputStream.readBytes();
                            continue;
                        case 74:
                            this.bitField0_ |= 256;
                            this.productId_ = codedInputStream.readBytes();
                            continue;
                        case XiaomiOAuthConstants.VERSION_MINOR /*82*/:
                            this.bitField0_ |= 512;
                            this.applyChannel_ = codedInputStream.readBytes();
                            continue;
                        case 90:
                            this.bitField0_ |= 1024;
                            this.communityCode_ = codedInputStream.readBytes();
                            continue;
                        case 98:
                            this.bitField0_ |= 2048;
                            this.status_ = codedInputStream.readBytes();
                            continue;
                        case 106:
                            this.bitField0_ |= 4096;
                            this.businessId_ = codedInputStream.readBytes();
                            continue;
                        case 114:
                            this.bitField0_ |= 8192;
                            this.seId_ = codedInputStream.readBytes();
                            continue;
                        case 122:
                            this.bitField0_ |= 16384;
                            this.productName_ = codedInputStream.readBytes();
                            continue;
                        default:
                            if (parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                                continue;
                            }
                            break;
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DoorCardInfo.class, Builder.class);
        }

        static {
            DoorCardInfo doorCardInfo = new DoorCardInfo(true);
            defaultInstance = doorCardInfo;
            doorCardInfo.initFields();
        }

        public final Parser<DoorCardInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasName() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVcStatus() {
            return (this.bitField0_ & 4) == 4;
        }

        public final int getVcStatus() {
            return this.vcStatus_;
        }

        public final boolean hasUserTerms() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getUserTerms() {
            Object obj = this.userTerms_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userTerms_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserTermsBytes() {
            Object obj = this.userTerms_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userTerms_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardArt() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getCardArt() {
            Object obj = this.cardArt_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardArt_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardArtBytes() {
            Object obj = this.cardArt_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardArt_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasFingerFlag() {
            return (this.bitField0_ & 32) == 32;
        }

        public final int getFingerFlag() {
            return this.fingerFlag_;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 64) == 64;
        }

        public final DoorCardType getCardType() {
            return this.cardType_;
        }

        public final boolean hasCid() {
            return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
        }

        public final String getCid() {
            Object obj = this.cid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCidBytes() {
            Object obj = this.cid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasProductId() {
            return (this.bitField0_ & 256) == 256;
        }

        public final String getProductId() {
            Object obj = this.productId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.productId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getProductIdBytes() {
            Object obj = this.productId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.productId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasApplyChannel() {
            return (this.bitField0_ & 512) == 512;
        }

        public final String getApplyChannel() {
            Object obj = this.applyChannel_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.applyChannel_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getApplyChannelBytes() {
            Object obj = this.applyChannel_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.applyChannel_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCommunityCode() {
            return (this.bitField0_ & 1024) == 1024;
        }

        public final String getCommunityCode() {
            Object obj = this.communityCode_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.communityCode_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCommunityCodeBytes() {
            Object obj = this.communityCode_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.communityCode_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasStatus() {
            return (this.bitField0_ & 2048) == 2048;
        }

        public final String getStatus() {
            Object obj = this.status_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.status_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getStatusBytes() {
            Object obj = this.status_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.status_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasBusinessId() {
            return (this.bitField0_ & 4096) == 4096;
        }

        public final String getBusinessId() {
            Object obj = this.businessId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.businessId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getBusinessIdBytes() {
            Object obj = this.businessId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.businessId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSeId() {
            return (this.bitField0_ & 8192) == 8192;
        }

        public final String getSeId() {
            Object obj = this.seId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.seId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSeIdBytes() {
            Object obj = this.seId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.seId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasProductName() {
            return (this.bitField0_ & 16384) == 16384;
        }

        public final String getProductName() {
            Object obj = this.productName_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.productName_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getProductNameBytes() {
            Object obj = this.productName_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.productName_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.aid_ = "";
            this.name_ = "";
            this.vcStatus_ = 0;
            this.userTerms_ = "";
            this.cardArt_ = "";
            this.fingerFlag_ = 0;
            this.cardType_ = DoorCardType.M1_NORMAL;
            this.cid_ = "";
            this.productId_ = "";
            this.applyChannel_ = "";
            this.communityCode_ = "";
            this.status_ = "";
            this.businessId_ = "";
            this.seId_ = "";
            this.productName_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getAidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeInt32(3, this.vcStatus_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getUserTermsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getCardArtBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                codedOutputStream.writeInt32(6, this.fingerFlag_);
            }
            if ((this.bitField0_ & 64) == 64) {
                codedOutputStream.writeEnum(7, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                codedOutputStream.writeBytes(8, getCidBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                codedOutputStream.writeBytes(9, getProductIdBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                codedOutputStream.writeBytes(10, getApplyChannelBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                codedOutputStream.writeBytes(11, getCommunityCodeBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                codedOutputStream.writeBytes(12, getStatusBytes());
            }
            if ((this.bitField0_ & 4096) == 4096) {
                codedOutputStream.writeBytes(13, getBusinessIdBytes());
            }
            if ((this.bitField0_ & 8192) == 8192) {
                codedOutputStream.writeBytes(14, getSeIdBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                codedOutputStream.writeBytes(15, getProductNameBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getAidBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getNameBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeInt32Size(3, this.vcStatus_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getUserTermsBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getCardArtBytes());
            }
            if ((this.bitField0_ & 32) == 32) {
                i2 += CodedOutputStream.computeInt32Size(6, this.fingerFlag_);
            }
            if ((this.bitField0_ & 64) == 64) {
                i2 += CodedOutputStream.computeEnumSize(7, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                i2 += CodedOutputStream.computeBytesSize(8, getCidBytes());
            }
            if ((this.bitField0_ & 256) == 256) {
                i2 += CodedOutputStream.computeBytesSize(9, getProductIdBytes());
            }
            if ((this.bitField0_ & 512) == 512) {
                i2 += CodedOutputStream.computeBytesSize(10, getApplyChannelBytes());
            }
            if ((this.bitField0_ & 1024) == 1024) {
                i2 += CodedOutputStream.computeBytesSize(11, getCommunityCodeBytes());
            }
            if ((this.bitField0_ & 2048) == 2048) {
                i2 += CodedOutputStream.computeBytesSize(12, getStatusBytes());
            }
            if ((this.bitField0_ & 4096) == 4096) {
                i2 += CodedOutputStream.computeBytesSize(13, getBusinessIdBytes());
            }
            if ((this.bitField0_ & 8192) == 8192) {
                i2 += CodedOutputStream.computeBytesSize(14, getSeIdBytes());
            }
            if ((this.bitField0_ & 16384) == 16384) {
                i2 += CodedOutputStream.computeBytesSize(15, getProductNameBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static DoorCardInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static DoorCardInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static DoorCardInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static DoorCardInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static DoorCardInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static DoorCardInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static DoorCardInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static DoorCardInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static DoorCardInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static DoorCardInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(DoorCardInfo doorCardInfo) {
            return newBuilder().mergeFrom(doorCardInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements DoorCardInfoOrBuilder {
            private Object aid_;
            private Object applyChannel_;
            private int bitField0_;
            private Object businessId_;
            private Object cardArt_;
            private DoorCardType cardType_;
            private Object cid_;
            private Object communityCode_;
            private int fingerFlag_;
            private Object name_;
            private Object productId_;
            private Object productName_;
            private Object seId_;
            private Object status_;
            private Object userTerms_;
            private int vcStatus_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(DoorCardInfo.class, Builder.class);
            }

            private Builder() {
                this.aid_ = "";
                this.name_ = "";
                this.userTerms_ = "";
                this.cardArt_ = "";
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.cid_ = "";
                this.productId_ = "";
                this.applyChannel_ = "";
                this.communityCode_ = "";
                this.status_ = "";
                this.businessId_ = "";
                this.seId_ = "";
                this.productName_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.aid_ = "";
                this.name_ = "";
                this.userTerms_ = "";
                this.cardArt_ = "";
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.cid_ = "";
                this.productId_ = "";
                this.applyChannel_ = "";
                this.communityCode_ = "";
                this.status_ = "";
                this.businessId_ = "";
                this.seId_ = "";
                this.productName_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = DoorCardInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.aid_ = "";
                this.bitField0_ &= -2;
                this.name_ = "";
                this.bitField0_ &= -3;
                this.vcStatus_ = 0;
                this.bitField0_ &= -5;
                this.userTerms_ = "";
                this.bitField0_ &= -9;
                this.cardArt_ = "";
                this.bitField0_ &= -17;
                this.fingerFlag_ = 0;
                this.bitField0_ &= -33;
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.bitField0_ &= -65;
                this.cid_ = "";
                this.bitField0_ &= -129;
                this.productId_ = "";
                this.bitField0_ &= -257;
                this.applyChannel_ = "";
                this.bitField0_ &= -513;
                this.communityCode_ = "";
                this.bitField0_ &= -1025;
                this.status_ = "";
                this.bitField0_ &= -2049;
                this.businessId_ = "";
                this.bitField0_ &= -4097;
                this.seId_ = "";
                this.bitField0_ &= -8193;
                this.productName_ = "";
                this.bitField0_ &= -16385;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_DoorCardInfo_descriptor;
            }

            public final DoorCardInfo getDefaultInstanceForType() {
                return DoorCardInfo.getDefaultInstance();
            }

            public final DoorCardInfo build() {
                DoorCardInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final DoorCardInfo buildPartial() {
                DoorCardInfo doorCardInfo = new DoorCardInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                doorCardInfo.aid_ = this.aid_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                doorCardInfo.name_ = this.name_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                doorCardInfo.vcStatus_ = this.vcStatus_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                doorCardInfo.userTerms_ = this.userTerms_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                doorCardInfo.cardArt_ = this.cardArt_;
                if ((i & 32) == 32) {
                    i2 |= 32;
                }
                doorCardInfo.fingerFlag_ = this.fingerFlag_;
                if ((i & 64) == 64) {
                    i2 |= 64;
                }
                doorCardInfo.cardType_ = this.cardType_;
                if ((i & NotificationCompat.FLAG_HIGH_PRIORITY) == 128) {
                    i2 |= NotificationCompat.FLAG_HIGH_PRIORITY;
                }
                doorCardInfo.cid_ = this.cid_;
                if ((i & 256) == 256) {
                    i2 |= 256;
                }
                doorCardInfo.productId_ = this.productId_;
                if ((i & 512) == 512) {
                    i2 |= 512;
                }
                doorCardInfo.applyChannel_ = this.applyChannel_;
                if ((i & 1024) == 1024) {
                    i2 |= 1024;
                }
                doorCardInfo.communityCode_ = this.communityCode_;
                if ((i & 2048) == 2048) {
                    i2 |= 2048;
                }
                doorCardInfo.status_ = this.status_;
                if ((i & 4096) == 4096) {
                    i2 |= 4096;
                }
                doorCardInfo.businessId_ = this.businessId_;
                if ((i & 8192) == 8192) {
                    i2 |= 8192;
                }
                doorCardInfo.seId_ = this.seId_;
                if ((i & 16384) == 16384) {
                    i2 |= 16384;
                }
                doorCardInfo.productName_ = this.productName_;
                doorCardInfo.bitField0_ = i2;
                onBuilt();
                return doorCardInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof DoorCardInfo) {
                    return mergeFrom((DoorCardInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(DoorCardInfo doorCardInfo) {
                if (doorCardInfo == DoorCardInfo.getDefaultInstance()) {
                    return this;
                }
                if (doorCardInfo.hasAid()) {
                    this.bitField0_ |= 1;
                    this.aid_ = doorCardInfo.aid_;
                    onChanged();
                }
                if (doorCardInfo.hasName()) {
                    this.bitField0_ |= 2;
                    this.name_ = doorCardInfo.name_;
                    onChanged();
                }
                if (doorCardInfo.hasVcStatus()) {
                    setVcStatus(doorCardInfo.getVcStatus());
                }
                if (doorCardInfo.hasUserTerms()) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = doorCardInfo.userTerms_;
                    onChanged();
                }
                if (doorCardInfo.hasCardArt()) {
                    this.bitField0_ |= 16;
                    this.cardArt_ = doorCardInfo.cardArt_;
                    onChanged();
                }
                if (doorCardInfo.hasFingerFlag()) {
                    setFingerFlag(doorCardInfo.getFingerFlag());
                }
                if (doorCardInfo.hasCardType()) {
                    setCardType(doorCardInfo.getCardType());
                }
                if (doorCardInfo.hasCid()) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cid_ = doorCardInfo.cid_;
                    onChanged();
                }
                if (doorCardInfo.hasProductId()) {
                    this.bitField0_ |= 256;
                    this.productId_ = doorCardInfo.productId_;
                    onChanged();
                }
                if (doorCardInfo.hasApplyChannel()) {
                    this.bitField0_ |= 512;
                    this.applyChannel_ = doorCardInfo.applyChannel_;
                    onChanged();
                }
                if (doorCardInfo.hasCommunityCode()) {
                    this.bitField0_ |= 1024;
                    this.communityCode_ = doorCardInfo.communityCode_;
                    onChanged();
                }
                if (doorCardInfo.hasStatus()) {
                    this.bitField0_ |= 2048;
                    this.status_ = doorCardInfo.status_;
                    onChanged();
                }
                if (doorCardInfo.hasBusinessId()) {
                    this.bitField0_ |= 4096;
                    this.businessId_ = doorCardInfo.businessId_;
                    onChanged();
                }
                if (doorCardInfo.hasSeId()) {
                    this.bitField0_ |= 8192;
                    this.seId_ = doorCardInfo.seId_;
                    onChanged();
                }
                if (doorCardInfo.hasProductName()) {
                    this.bitField0_ |= 16384;
                    this.productName_ = doorCardInfo.productName_;
                    onChanged();
                }
                mergeUnknownFields(doorCardInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                DoorCardInfo doorCardInfo;
                DoorCardInfo doorCardInfo2 = null;
                try {
                    DoorCardInfo parsePartialFrom = DoorCardInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    doorCardInfo = (DoorCardInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    doorCardInfo2 = doorCardInfo;
                }
                if (doorCardInfo2 != null) {
                    mergeFrom(doorCardInfo2);
                }
                throw th;
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -2;
                this.aid_ = DoorCardInfo.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasName() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getNameBytes() {
                Object obj = this.name_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.name_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.name_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearName() {
                this.bitField0_ &= -3;
                this.name_ = DoorCardInfo.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public final Builder setNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.name_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVcStatus() {
                return (this.bitField0_ & 4) == 4;
            }

            public final int getVcStatus() {
                return this.vcStatus_;
            }

            public final Builder setVcStatus(int i) {
                this.bitField0_ |= 4;
                this.vcStatus_ = i;
                onChanged();
                return this;
            }

            public final Builder clearVcStatus() {
                this.bitField0_ &= -5;
                this.vcStatus_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasUserTerms() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getUserTerms() {
                Object obj = this.userTerms_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userTerms_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserTermsBytes() {
                Object obj = this.userTerms_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userTerms_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUserTerms(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUserTerms() {
                this.bitField0_ &= -9;
                this.userTerms_ = DoorCardInfo.getDefaultInstance().getUserTerms();
                onChanged();
                return this;
            }

            public final Builder setUserTermsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.userTerms_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardArt() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getCardArt() {
                Object obj = this.cardArt_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardArt_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardArtBytes() {
                Object obj = this.cardArt_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardArt_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardArt(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.cardArt_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardArt() {
                this.bitField0_ &= -17;
                this.cardArt_ = DoorCardInfo.getDefaultInstance().getCardArt();
                onChanged();
                return this;
            }

            public final Builder setCardArtBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.cardArt_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasFingerFlag() {
                return (this.bitField0_ & 32) == 32;
            }

            public final int getFingerFlag() {
                return this.fingerFlag_;
            }

            public final Builder setFingerFlag(int i) {
                this.bitField0_ |= 32;
                this.fingerFlag_ = i;
                onChanged();
                return this;
            }

            public final Builder clearFingerFlag() {
                this.bitField0_ &= -33;
                this.fingerFlag_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 64) == 64;
            }

            public final DoorCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(DoorCardType doorCardType) {
                if (doorCardType != null) {
                    this.bitField0_ |= 64;
                    this.cardType_ = doorCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -65;
                this.cardType_ = DoorCardType.M1_NORMAL;
                onChanged();
                return this;
            }

            public final boolean hasCid() {
                return (this.bitField0_ & NotificationCompat.FLAG_HIGH_PRIORITY) == 128;
            }

            public final String getCid() {
                Object obj = this.cid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCidBytes() {
                Object obj = this.cid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCid(String str) {
                if (str != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCid() {
                this.bitField0_ &= -129;
                this.cid_ = DoorCardInfo.getDefaultInstance().getCid();
                onChanged();
                return this;
            }

            public final Builder setCidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= NotificationCompat.FLAG_HIGH_PRIORITY;
                    this.cid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasProductId() {
                return (this.bitField0_ & 256) == 256;
            }

            public final String getProductId() {
                Object obj = this.productId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.productId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getProductIdBytes() {
                Object obj = this.productId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.productId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setProductId(String str) {
                if (str != null) {
                    this.bitField0_ |= 256;
                    this.productId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearProductId() {
                this.bitField0_ &= -257;
                this.productId_ = DoorCardInfo.getDefaultInstance().getProductId();
                onChanged();
                return this;
            }

            public final Builder setProductIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 256;
                    this.productId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasApplyChannel() {
                return (this.bitField0_ & 512) == 512;
            }

            public final String getApplyChannel() {
                Object obj = this.applyChannel_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.applyChannel_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getApplyChannelBytes() {
                Object obj = this.applyChannel_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.applyChannel_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setApplyChannel(String str) {
                if (str != null) {
                    this.bitField0_ |= 512;
                    this.applyChannel_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearApplyChannel() {
                this.bitField0_ &= -513;
                this.applyChannel_ = DoorCardInfo.getDefaultInstance().getApplyChannel();
                onChanged();
                return this;
            }

            public final Builder setApplyChannelBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 512;
                    this.applyChannel_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCommunityCode() {
                return (this.bitField0_ & 1024) == 1024;
            }

            public final String getCommunityCode() {
                Object obj = this.communityCode_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.communityCode_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCommunityCodeBytes() {
                Object obj = this.communityCode_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.communityCode_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCommunityCode(String str) {
                if (str != null) {
                    this.bitField0_ |= 1024;
                    this.communityCode_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCommunityCode() {
                this.bitField0_ &= -1025;
                this.communityCode_ = DoorCardInfo.getDefaultInstance().getCommunityCode();
                onChanged();
                return this;
            }

            public final Builder setCommunityCodeBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1024;
                    this.communityCode_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasStatus() {
                return (this.bitField0_ & 2048) == 2048;
            }

            public final String getStatus() {
                Object obj = this.status_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.status_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getStatusBytes() {
                Object obj = this.status_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.status_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setStatus(String str) {
                if (str != null) {
                    this.bitField0_ |= 2048;
                    this.status_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearStatus() {
                this.bitField0_ &= -2049;
                this.status_ = DoorCardInfo.getDefaultInstance().getStatus();
                onChanged();
                return this;
            }

            public final Builder setStatusBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2048;
                    this.status_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasBusinessId() {
                return (this.bitField0_ & 4096) == 4096;
            }

            public final String getBusinessId() {
                Object obj = this.businessId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.businessId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getBusinessIdBytes() {
                Object obj = this.businessId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.businessId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setBusinessId(String str) {
                if (str != null) {
                    this.bitField0_ |= 4096;
                    this.businessId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearBusinessId() {
                this.bitField0_ &= -4097;
                this.businessId_ = DoorCardInfo.getDefaultInstance().getBusinessId();
                onChanged();
                return this;
            }

            public final Builder setBusinessIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4096;
                    this.businessId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSeId() {
                return (this.bitField0_ & 8192) == 8192;
            }

            public final String getSeId() {
                Object obj = this.seId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.seId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSeIdBytes() {
                Object obj = this.seId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.seId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSeId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8192;
                    this.seId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSeId() {
                this.bitField0_ &= -8193;
                this.seId_ = DoorCardInfo.getDefaultInstance().getSeId();
                onChanged();
                return this;
            }

            public final Builder setSeIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8192;
                    this.seId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasProductName() {
                return (this.bitField0_ & 16384) == 16384;
            }

            public final String getProductName() {
                Object obj = this.productName_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.productName_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getProductNameBytes() {
                Object obj = this.productName_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.productName_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setProductName(String str) {
                if (str != null) {
                    this.bitField0_ |= 16384;
                    this.productName_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearProductName() {
                this.bitField0_ &= -16385;
                this.productName_ = DoorCardInfo.getDefaultInstance().getProductName();
                onChanged();
                return this;
            }

            public final Builder setProductNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16384;
                    this.productName_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class QueryDoorCardInfoResponse extends GeneratedMessage implements QueryDoorCardInfoResponseOrBuilder {
        public static Parser<QueryDoorCardInfoResponse> PARSER = new AbstractParser<QueryDoorCardInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryDoorCardInfoResponse.AnonymousClass1 */

            public final QueryDoorCardInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryDoorCardInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryDoorCardInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public List<DoorCardInfo> cardInfoList_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private QueryDoorCardInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryDoorCardInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryDoorCardInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryDoorCardInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryDoorCardInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.cardInfoList_ = new ArrayList();
                                z2 |= true;
                            }
                            this.cardInfoList_.add(codedInputStream.readMessage(DoorCardInfo.PARSER, extensionRegistryLite));
                        } else if (readTag == 26) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryDoorCardInfoResponse.class, Builder.class);
        }

        static {
            QueryDoorCardInfoResponse queryDoorCardInfoResponse = new QueryDoorCardInfoResponse(true);
            defaultInstance = queryDoorCardInfoResponse;
            queryDoorCardInfoResponse.initFields();
        }

        public final Parser<QueryDoorCardInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final List<DoorCardInfo> getCardInfoListList() {
            return this.cardInfoList_;
        }

        public final List<? extends DoorCardInfoOrBuilder> getCardInfoListOrBuilderList() {
            return this.cardInfoList_;
        }

        public final int getCardInfoListCount() {
            return this.cardInfoList_.size();
        }

        public final DoorCardInfo getCardInfoList(int i) {
            return this.cardInfoList_.get(i);
        }

        public final DoorCardInfoOrBuilder getCardInfoListOrBuilder(int i) {
            return this.cardInfoList_.get(i);
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.cardInfoList_ = Collections.emptyList();
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            for (int i = 0; i < this.cardInfoList_.size(); i++) {
                codedOutputStream.writeMessage(2, this.cardInfoList_.get(i));
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeInt32Size = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeInt32Size(1, this.result_) + 0 : 0;
            for (int i2 = 0; i2 < this.cardInfoList_.size(); i2++) {
                computeInt32Size += CodedOutputStream.computeMessageSize(2, this.cardInfoList_.get(i2));
            }
            if ((this.bitField0_ & 2) == 2) {
                computeInt32Size += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = computeInt32Size + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryDoorCardInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryDoorCardInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryDoorCardInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryDoorCardInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryDoorCardInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryDoorCardInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryDoorCardInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryDoorCardInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryDoorCardInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryDoorCardInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryDoorCardInfoResponse queryDoorCardInfoResponse) {
            return newBuilder().mergeFrom(queryDoorCardInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryDoorCardInfoResponseOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> cardInfoListBuilder_;
            private List<DoorCardInfo> cardInfoList_;
            private Object errorDesc_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryDoorCardInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.cardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardInfoList_ = Collections.emptyList();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (QueryDoorCardInfoResponse.alwaysUseFieldBuilders) {
                    getCardInfoListFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardInfoResponse_descriptor;
            }

            public final QueryDoorCardInfoResponse getDefaultInstanceForType() {
                return QueryDoorCardInfoResponse.getDefaultInstance();
            }

            public final QueryDoorCardInfoResponse build() {
                QueryDoorCardInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryDoorCardInfoResponse buildPartial() {
                QueryDoorCardInfoResponse queryDoorCardInfoResponse = new QueryDoorCardInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryDoorCardInfoResponse.result_ = this.result_;
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.cardInfoList_ = Collections.unmodifiableList(this.cardInfoList_);
                        this.bitField0_ &= -3;
                    }
                    queryDoorCardInfoResponse.cardInfoList_ = this.cardInfoList_;
                } else {
                    queryDoorCardInfoResponse.cardInfoList_ = repeatedFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 2;
                }
                queryDoorCardInfoResponse.errorDesc_ = this.errorDesc_;
                queryDoorCardInfoResponse.bitField0_ = i2;
                onBuilt();
                return queryDoorCardInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryDoorCardInfoResponse) {
                    return mergeFrom((QueryDoorCardInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryDoorCardInfoResponse queryDoorCardInfoResponse) {
                if (queryDoorCardInfoResponse == QueryDoorCardInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (queryDoorCardInfoResponse.hasResult()) {
                    setResult(queryDoorCardInfoResponse.getResult());
                }
                if (this.cardInfoListBuilder_ == null) {
                    if (!queryDoorCardInfoResponse.cardInfoList_.isEmpty()) {
                        if (this.cardInfoList_.isEmpty()) {
                            this.cardInfoList_ = queryDoorCardInfoResponse.cardInfoList_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureCardInfoListIsMutable();
                            this.cardInfoList_.addAll(queryDoorCardInfoResponse.cardInfoList_);
                        }
                        onChanged();
                    }
                } else if (!queryDoorCardInfoResponse.cardInfoList_.isEmpty()) {
                    if (this.cardInfoListBuilder_.isEmpty()) {
                        this.cardInfoListBuilder_.dispose();
                        RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = null;
                        this.cardInfoListBuilder_ = null;
                        this.cardInfoList_ = queryDoorCardInfoResponse.cardInfoList_;
                        this.bitField0_ &= -3;
                        if (QueryDoorCardInfoResponse.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getCardInfoListFieldBuilder();
                        }
                        this.cardInfoListBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.cardInfoListBuilder_.addAllMessages(queryDoorCardInfoResponse.cardInfoList_);
                    }
                }
                if (queryDoorCardInfoResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = queryDoorCardInfoResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(queryDoorCardInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryDoorCardInfoResponse queryDoorCardInfoResponse;
                QueryDoorCardInfoResponse queryDoorCardInfoResponse2 = null;
                try {
                    QueryDoorCardInfoResponse parsePartialFrom = QueryDoorCardInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryDoorCardInfoResponse = (QueryDoorCardInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryDoorCardInfoResponse2 = queryDoorCardInfoResponse;
                }
                if (queryDoorCardInfoResponse2 != null) {
                    mergeFrom(queryDoorCardInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            private void ensureCardInfoListIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.cardInfoList_ = new ArrayList(this.cardInfoList_);
                    this.bitField0_ |= 2;
                }
            }

            public final List<DoorCardInfo> getCardInfoListList() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.cardInfoList_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getCardInfoListCount() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfoList_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final DoorCardInfo getCardInfoList(int i) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfoList_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setCardInfoList(int i, DoorCardInfo doorCardInfo) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, doorCardInfo);
                } else if (doorCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.set(i, doorCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setCardInfoList(int i, DoorCardInfo.Builder builder) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addCardInfoList(DoorCardInfo doorCardInfo) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(doorCardInfo);
                } else if (doorCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(doorCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfoList(int i, DoorCardInfo doorCardInfo) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, doorCardInfo);
                } else if (doorCardInfo != null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(i, doorCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfoList(DoorCardInfo.Builder builder) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addCardInfoList(int i, DoorCardInfo.Builder builder) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$DoorCardInfo>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$DoorCardInfo>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllCardInfoList(Iterable<? extends DoorCardInfo> iterable) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.cardInfoList_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearCardInfoList() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfoList_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeCardInfoList(int i) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoListIsMutable();
                    this.cardInfoList_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final DoorCardInfo.Builder getCardInfoListBuilder(int i) {
                return getCardInfoListFieldBuilder().getBuilder(i);
            }

            public final DoorCardInfoOrBuilder getCardInfoListOrBuilder(int i) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfoList_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends DoorCardInfoOrBuilder> getCardInfoListOrBuilderList() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoListBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.cardInfoList_);
            }

            public final DoorCardInfo.Builder addCardInfoListBuilder() {
                return getCardInfoListFieldBuilder().addBuilder(DoorCardInfo.getDefaultInstance());
            }

            public final DoorCardInfo.Builder addCardInfoListBuilder(int i) {
                return getCardInfoListFieldBuilder().addBuilder(i, DoorCardInfo.getDefaultInstance());
            }

            public final List<DoorCardInfo.Builder> getCardInfoListBuilderList() {
                return getCardInfoListFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> getCardInfoListFieldBuilder() {
                if (this.cardInfoListBuilder_ == null) {
                    this.cardInfoListBuilder_ = new RepeatedFieldBuilder<>(this.cardInfoList_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.cardInfoList_ = null;
                }
                return this.cardInfoListBuilder_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = QueryDoorCardInfoResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class UpdateDoorCardRequest extends GeneratedMessage implements UpdateDoorCardRequestOrBuilder {
        public static Parser<UpdateDoorCardRequest> PARSER = new AbstractParser<UpdateDoorCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.UpdateDoorCardRequest.AnonymousClass1 */

            public final UpdateDoorCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new UpdateDoorCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final UpdateDoorCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public List<DoorCardInfo> cardInfo_;
        public Object cplc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private UpdateDoorCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private UpdateDoorCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static UpdateDoorCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final UpdateDoorCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private UpdateDoorCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            boolean z2 = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            if (!(z2 & true)) {
                                this.cardInfo_ = new ArrayList();
                                z2 |= true;
                            }
                            this.cardInfo_.add(codedInputStream.readMessage(DoorCardInfo.PARSER, extensionRegistryLite));
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    if (z2 & true) {
                        this.cardInfo_ = Collections.unmodifiableList(this.cardInfo_);
                    }
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            if (z2 & true) {
                this.cardInfo_ = Collections.unmodifiableList(this.cardInfo_);
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpdateDoorCardRequest.class, Builder.class);
        }

        static {
            UpdateDoorCardRequest updateDoorCardRequest = new UpdateDoorCardRequest(true);
            defaultInstance = updateDoorCardRequest;
            updateDoorCardRequest.initFields();
        }

        public final Parser<UpdateDoorCardRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final List<DoorCardInfo> getCardInfoList() {
            return this.cardInfo_;
        }

        public final List<? extends DoorCardInfoOrBuilder> getCardInfoOrBuilderList() {
            return this.cardInfo_;
        }

        public final int getCardInfoCount() {
            return this.cardInfo_.size();
        }

        public final DoorCardInfo getCardInfo(int i) {
            return this.cardInfo_.get(i);
        }

        public final DoorCardInfoOrBuilder getCardInfoOrBuilder(int i) {
            return this.cardInfo_.get(i);
        }

        private void initFields() {
            this.cplc_ = "";
            this.cardInfo_ = Collections.emptyList();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCplcBytes());
            }
            for (int i = 0; i < this.cardInfo_.size(); i++) {
                codedOutputStream.writeMessage(2, this.cardInfo_.get(i));
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int computeBytesSize = (this.bitField0_ & 1) == 1 ? CodedOutputStream.computeBytesSize(1, getCplcBytes()) + 0 : 0;
            for (int i2 = 0; i2 < this.cardInfo_.size(); i2++) {
                computeBytesSize += CodedOutputStream.computeMessageSize(2, this.cardInfo_.get(i2));
            }
            int serializedSize = computeBytesSize + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static UpdateDoorCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static UpdateDoorCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static UpdateDoorCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static UpdateDoorCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static UpdateDoorCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static UpdateDoorCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static UpdateDoorCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static UpdateDoorCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static UpdateDoorCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static UpdateDoorCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(UpdateDoorCardRequest updateDoorCardRequest) {
            return newBuilder().mergeFrom(updateDoorCardRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements UpdateDoorCardRequestOrBuilder {
            private int bitField0_;
            private RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> cardInfoBuilder_;
            private List<DoorCardInfo> cardInfo_;
            private Object cplc_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(UpdateDoorCardRequest.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = "";
                this.cardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = "";
                this.cardInfo_ = Collections.emptyList();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (UpdateDoorCardRequest.alwaysUseFieldBuilders) {
                    getCardInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = "";
                this.bitField0_ &= -2;
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfo_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_UpdateDoorCardRequest_descriptor;
            }

            public final UpdateDoorCardRequest getDefaultInstanceForType() {
                return UpdateDoorCardRequest.getDefaultInstance();
            }

            public final UpdateDoorCardRequest build() {
                UpdateDoorCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final UpdateDoorCardRequest buildPartial() {
                UpdateDoorCardRequest updateDoorCardRequest = new UpdateDoorCardRequest(this);
                int i = 1;
                if ((this.bitField0_ & 1) != 1) {
                    i = 0;
                }
                updateDoorCardRequest.cplc_ = this.cplc_;
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    if ((this.bitField0_ & 2) == 2) {
                        this.cardInfo_ = Collections.unmodifiableList(this.cardInfo_);
                        this.bitField0_ &= -3;
                    }
                    updateDoorCardRequest.cardInfo_ = this.cardInfo_;
                } else {
                    updateDoorCardRequest.cardInfo_ = repeatedFieldBuilder.build();
                }
                updateDoorCardRequest.bitField0_ = i;
                onBuilt();
                return updateDoorCardRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof UpdateDoorCardRequest) {
                    return mergeFrom((UpdateDoorCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(UpdateDoorCardRequest updateDoorCardRequest) {
                if (updateDoorCardRequest == UpdateDoorCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (updateDoorCardRequest.hasCplc()) {
                    this.bitField0_ |= 1;
                    this.cplc_ = updateDoorCardRequest.cplc_;
                    onChanged();
                }
                if (this.cardInfoBuilder_ == null) {
                    if (!updateDoorCardRequest.cardInfo_.isEmpty()) {
                        if (this.cardInfo_.isEmpty()) {
                            this.cardInfo_ = updateDoorCardRequest.cardInfo_;
                            this.bitField0_ &= -3;
                        } else {
                            ensureCardInfoIsMutable();
                            this.cardInfo_.addAll(updateDoorCardRequest.cardInfo_);
                        }
                        onChanged();
                    }
                } else if (!updateDoorCardRequest.cardInfo_.isEmpty()) {
                    if (this.cardInfoBuilder_.isEmpty()) {
                        this.cardInfoBuilder_.dispose();
                        RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = null;
                        this.cardInfoBuilder_ = null;
                        this.cardInfo_ = updateDoorCardRequest.cardInfo_;
                        this.bitField0_ &= -3;
                        if (UpdateDoorCardRequest.alwaysUseFieldBuilders) {
                            repeatedFieldBuilder = getCardInfoFieldBuilder();
                        }
                        this.cardInfoBuilder_ = repeatedFieldBuilder;
                    } else {
                        this.cardInfoBuilder_.addAllMessages(updateDoorCardRequest.cardInfo_);
                    }
                }
                mergeUnknownFields(updateDoorCardRequest.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                UpdateDoorCardRequest updateDoorCardRequest;
                UpdateDoorCardRequest updateDoorCardRequest2 = null;
                try {
                    UpdateDoorCardRequest parsePartialFrom = UpdateDoorCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    updateDoorCardRequest = (UpdateDoorCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    updateDoorCardRequest2 = updateDoorCardRequest;
                }
                if (updateDoorCardRequest2 != null) {
                    mergeFrom(updateDoorCardRequest2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = UpdateDoorCardRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            private void ensureCardInfoIsMutable() {
                if ((this.bitField0_ & 2) != 2) {
                    this.cardInfo_ = new ArrayList(this.cardInfo_);
                    this.bitField0_ |= 2;
                }
            }

            public final List<DoorCardInfo> getCardInfoList() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return Collections.unmodifiableList(this.cardInfo_);
                }
                return repeatedFieldBuilder.getMessageList();
            }

            public final int getCardInfoCount() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfo_.size();
                }
                return repeatedFieldBuilder.getCount();
            }

            public final DoorCardInfo getCardInfo(int i) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfo_.get(i);
                }
                return repeatedFieldBuilder.getMessage(i);
            }

            public final Builder setCardInfo(int i, DoorCardInfo doorCardInfo) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.setMessage(i, doorCardInfo);
                } else if (doorCardInfo != null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.set(i, doorCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder setCardInfo(int i, DoorCardInfo.Builder builder) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.set(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.setMessage(i, builder.build());
                }
                return this;
            }

            public final Builder addCardInfo(DoorCardInfo doorCardInfo) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(doorCardInfo);
                } else if (doorCardInfo != null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(doorCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfo(int i, DoorCardInfo doorCardInfo) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    repeatedFieldBuilder.addMessage(i, doorCardInfo);
                } else if (doorCardInfo != null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(i, doorCardInfo);
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                return this;
            }

            public final Builder addCardInfo(DoorCardInfo.Builder builder) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(builder.build());
                }
                return this;
            }

            public final Builder addCardInfo(int i, DoorCardInfo.Builder builder) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.add(i, builder.build());
                    onChanged();
                } else {
                    repeatedFieldBuilder.addMessage(i, builder.build());
                }
                return this;
            }

            /* JADX DEBUG: Failed to find minimal casts for resolve overloaded methods, cast all args instead
             method: com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void
             arg types: [java.lang.Iterable<? extends com.miui.tsmclient.seitsm.TsmRpcModels$DoorCardInfo>, java.util.List<com.miui.tsmclient.seitsm.TsmRpcModels$DoorCardInfo>]
             candidates:
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.List):void
              com.google.protobuf.AbstractMessageLite.Builder.addAll(java.lang.Iterable, java.util.Collection):void */
            public final Builder addAllCardInfo(Iterable<? extends DoorCardInfo> iterable) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    GeneratedMessage.Builder.addAll((Iterable) iterable, (Collection) this.cardInfo_);
                    onChanged();
                } else {
                    repeatedFieldBuilder.addAllMessages(iterable);
                }
                return this;
            }

            public final Builder clearCardInfo() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    this.cardInfo_ = Collections.emptyList();
                    this.bitField0_ &= -3;
                    onChanged();
                } else {
                    repeatedFieldBuilder.clear();
                }
                return this;
            }

            public final Builder removeCardInfo(int i) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    ensureCardInfoIsMutable();
                    this.cardInfo_.remove(i);
                    onChanged();
                } else {
                    repeatedFieldBuilder.remove(i);
                }
                return this;
            }

            public final DoorCardInfo.Builder getCardInfoBuilder(int i) {
                return getCardInfoFieldBuilder().getBuilder(i);
            }

            public final DoorCardInfoOrBuilder getCardInfoOrBuilder(int i) {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder == null) {
                    return this.cardInfo_.get(i);
                }
                return repeatedFieldBuilder.getMessageOrBuilder(i);
            }

            public final List<? extends DoorCardInfoOrBuilder> getCardInfoOrBuilderList() {
                RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> repeatedFieldBuilder = this.cardInfoBuilder_;
                if (repeatedFieldBuilder != null) {
                    return repeatedFieldBuilder.getMessageOrBuilderList();
                }
                return Collections.unmodifiableList(this.cardInfo_);
            }

            public final DoorCardInfo.Builder addCardInfoBuilder() {
                return getCardInfoFieldBuilder().addBuilder(DoorCardInfo.getDefaultInstance());
            }

            public final DoorCardInfo.Builder addCardInfoBuilder(int i) {
                return getCardInfoFieldBuilder().addBuilder(i, DoorCardInfo.getDefaultInstance());
            }

            public final List<DoorCardInfo.Builder> getCardInfoBuilderList() {
                return getCardInfoFieldBuilder().getBuilderList();
            }

            private RepeatedFieldBuilder<DoorCardInfo, DoorCardInfo.Builder, DoorCardInfoOrBuilder> getCardInfoFieldBuilder() {
                if (this.cardInfoBuilder_ == null) {
                    this.cardInfoBuilder_ = new RepeatedFieldBuilder<>(this.cardInfo_, (this.bitField0_ & 2) == 2, getParentForChildren(), isClean());
                    this.cardInfo_ = null;
                }
                return this.cardInfoBuilder_;
            }
        }
    }

    public static final class QueryDoorCardRequest extends GeneratedMessage implements QueryDoorCardRequestOrBuilder {
        public static Parser<QueryDoorCardRequest> PARSER = new AbstractParser<QueryDoorCardRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryDoorCardRequest.AnonymousClass1 */

            public final QueryDoorCardRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryDoorCardRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryDoorCardRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public DoorCardType cardType_;
        public Object cplc_;
        public DeviceInfo deviceInfo_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object productId_;
        private final UnknownFieldSet unknownFields;

        private QueryDoorCardRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryDoorCardRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryDoorCardRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryDoorCardRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryDoorCardRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.cplc_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            int readEnum = codedInputStream.readEnum();
                            DoorCardType valueOf = DoorCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(3, readEnum);
                            } else {
                                this.bitField0_ |= 4;
                                this.cardType_ = valueOf;
                            }
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.productId_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            DeviceInfo.Builder builder = (this.bitField0_ & 16) == 16 ? this.deviceInfo_.toBuilder() : null;
                            this.deviceInfo_ = (DeviceInfo) codedInputStream.readMessage(DeviceInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.deviceInfo_);
                                this.deviceInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 16;
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryDoorCardRequest.class, Builder.class);
        }

        static {
            QueryDoorCardRequest queryDoorCardRequest = new QueryDoorCardRequest(true);
            defaultInstance = queryDoorCardRequest;
            queryDoorCardRequest.initFields();
        }

        public final Parser<QueryDoorCardRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasCplc() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getCplc() {
            Object obj = this.cplc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cplc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCplcBytes() {
            Object obj = this.cplc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cplc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 4) == 4;
        }

        public final DoorCardType getCardType() {
            return this.cardType_;
        }

        public final boolean hasProductId() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getProductId() {
            Object obj = this.productId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.productId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getProductIdBytes() {
            Object obj = this.productId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.productId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasDeviceInfo() {
            return (this.bitField0_ & 16) == 16;
        }

        public final DeviceInfo getDeviceInfo() {
            return this.deviceInfo_;
        }

        public final DeviceInfoOrBuilder getDeviceInfoOrBuilder() {
            return this.deviceInfo_;
        }

        private void initFields() {
            this.cplc_ = "";
            this.aid_ = "";
            this.cardType_ = DoorCardType.M1_NORMAL;
            this.productId_ = "";
            this.deviceInfo_ = DeviceInfo.getDefaultInstance();
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasDeviceInfo() || getDeviceInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            }
            this.memoizedIsInitialized = 0;
            return false;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getCplcBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getProductIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeMessage(5, this.deviceInfo_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getCplcBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getAidBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeEnumSize(3, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getProductIdBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeMessageSize(5, this.deviceInfo_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryDoorCardRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryDoorCardRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryDoorCardRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryDoorCardRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryDoorCardRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryDoorCardRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryDoorCardRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryDoorCardRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryDoorCardRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryDoorCardRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryDoorCardRequest queryDoorCardRequest) {
            return newBuilder().mergeFrom(queryDoorCardRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryDoorCardRequestOrBuilder {
            private Object aid_;
            private int bitField0_;
            private DoorCardType cardType_;
            private Object cplc_;
            private SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> deviceInfoBuilder_;
            private DeviceInfo deviceInfo_;
            private Object productId_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryDoorCardRequest.class, Builder.class);
            }

            private Builder() {
                this.cplc_ = "";
                this.aid_ = "";
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.productId_ = "";
                this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cplc_ = "";
                this.aid_ = "";
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.productId_ = "";
                this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (QueryDoorCardRequest.alwaysUseFieldBuilders) {
                    getDeviceInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.cplc_ = "";
                this.bitField0_ &= -2;
                this.aid_ = "";
                this.bitField0_ &= -3;
                this.cardType_ = DoorCardType.M1_NORMAL;
                this.bitField0_ &= -5;
                this.productId_ = "";
                this.bitField0_ &= -9;
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryDoorCardRequest_descriptor;
            }

            public final QueryDoorCardRequest getDefaultInstanceForType() {
                return QueryDoorCardRequest.getDefaultInstance();
            }

            public final QueryDoorCardRequest build() {
                QueryDoorCardRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryDoorCardRequest buildPartial() {
                QueryDoorCardRequest queryDoorCardRequest = new QueryDoorCardRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryDoorCardRequest.cplc_ = this.cplc_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                queryDoorCardRequest.aid_ = this.aid_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                queryDoorCardRequest.cardType_ = this.cardType_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                queryDoorCardRequest.productId_ = this.productId_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    queryDoorCardRequest.deviceInfo_ = this.deviceInfo_;
                } else {
                    queryDoorCardRequest.deviceInfo_ = singleFieldBuilder.build();
                }
                queryDoorCardRequest.bitField0_ = i2;
                onBuilt();
                return queryDoorCardRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryDoorCardRequest) {
                    return mergeFrom((QueryDoorCardRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryDoorCardRequest queryDoorCardRequest) {
                if (queryDoorCardRequest == QueryDoorCardRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryDoorCardRequest.hasCplc()) {
                    this.bitField0_ |= 1;
                    this.cplc_ = queryDoorCardRequest.cplc_;
                    onChanged();
                }
                if (queryDoorCardRequest.hasAid()) {
                    this.bitField0_ |= 2;
                    this.aid_ = queryDoorCardRequest.aid_;
                    onChanged();
                }
                if (queryDoorCardRequest.hasCardType()) {
                    setCardType(queryDoorCardRequest.getCardType());
                }
                if (queryDoorCardRequest.hasProductId()) {
                    this.bitField0_ |= 8;
                    this.productId_ = queryDoorCardRequest.productId_;
                    onChanged();
                }
                if (queryDoorCardRequest.hasDeviceInfo()) {
                    mergeDeviceInfo(queryDoorCardRequest.getDeviceInfo());
                }
                mergeUnknownFields(queryDoorCardRequest.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return !hasDeviceInfo() || getDeviceInfo().isInitialized();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryDoorCardRequest queryDoorCardRequest;
                QueryDoorCardRequest queryDoorCardRequest2 = null;
                try {
                    QueryDoorCardRequest parsePartialFrom = QueryDoorCardRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryDoorCardRequest = (QueryDoorCardRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryDoorCardRequest2 = queryDoorCardRequest;
                }
                if (queryDoorCardRequest2 != null) {
                    mergeFrom(queryDoorCardRequest2);
                }
                throw th;
            }

            public final boolean hasCplc() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getCplc() {
                Object obj = this.cplc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cplc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCplcBytes() {
                Object obj = this.cplc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cplc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCplc(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCplc() {
                this.bitField0_ &= -2;
                this.cplc_ = QueryDoorCardRequest.getDefaultInstance().getCplc();
                onChanged();
                return this;
            }

            public final Builder setCplcBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.cplc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -3;
                this.aid_ = QueryDoorCardRequest.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 4) == 4;
            }

            public final DoorCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(DoorCardType doorCardType) {
                if (doorCardType != null) {
                    this.bitField0_ |= 4;
                    this.cardType_ = doorCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -5;
                this.cardType_ = DoorCardType.M1_NORMAL;
                onChanged();
                return this;
            }

            public final boolean hasProductId() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getProductId() {
                Object obj = this.productId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.productId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getProductIdBytes() {
                Object obj = this.productId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.productId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setProductId(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.productId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearProductId() {
                this.bitField0_ &= -9;
                this.productId_ = QueryDoorCardRequest.getDefaultInstance().getProductId();
                onChanged();
                return this;
            }

            public final Builder setProductIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.productId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasDeviceInfo() {
                return (this.bitField0_ & 16) == 16;
            }

            public final DeviceInfo getDeviceInfo() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.deviceInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setDeviceInfo(DeviceInfo deviceInfo) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(deviceInfo);
                } else if (deviceInfo != null) {
                    this.deviceInfo_ = deviceInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 16;
                return this;
            }

            public final Builder setDeviceInfo(DeviceInfo.Builder builder) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 16;
                return this;
            }

            public final Builder mergeDeviceInfo(DeviceInfo deviceInfo) {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 16) != 16 || this.deviceInfo_ == DeviceInfo.getDefaultInstance()) {
                        this.deviceInfo_ = deviceInfo;
                    } else {
                        this.deviceInfo_ = DeviceInfo.newBuilder(this.deviceInfo_).mergeFrom(deviceInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(deviceInfo);
                }
                this.bitField0_ |= 16;
                return this;
            }

            public final Builder clearDeviceInfo() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.deviceInfo_ = DeviceInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -17;
                return this;
            }

            public final DeviceInfo.Builder getDeviceInfoBuilder() {
                this.bitField0_ |= 16;
                onChanged();
                return getDeviceInfoFieldBuilder().getBuilder();
            }

            public final DeviceInfoOrBuilder getDeviceInfoOrBuilder() {
                SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> singleFieldBuilder = this.deviceInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.deviceInfo_;
            }

            private SingleFieldBuilder<DeviceInfo, DeviceInfo.Builder, DeviceInfoOrBuilder> getDeviceInfoFieldBuilder() {
                if (this.deviceInfoBuilder_ == null) {
                    this.deviceInfoBuilder_ = new SingleFieldBuilder<>(this.deviceInfo_, getParentForChildren(), isClean());
                    this.deviceInfo_ = null;
                }
                return this.deviceInfoBuilder_;
            }
        }
    }

    public static final class CheckSeUpgradeResponse extends GeneratedMessage implements CheckSeUpgradeResponseOrBuilder {
        public static Parser<CheckSeUpgradeResponse> PARSER = new AbstractParser<CheckSeUpgradeResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.CheckSeUpgradeResponse.AnonymousClass1 */

            public final CheckSeUpgradeResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new CheckSeUpgradeResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final CheckSeUpgradeResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public Object errorDesc_;
        public Object frontConfig_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public boolean needUpgrade_;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private CheckSeUpgradeResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private CheckSeUpgradeResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static CheckSeUpgradeResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final CheckSeUpgradeResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private CheckSeUpgradeResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 24) {
                            this.bitField0_ |= 4;
                            this.needUpgrade_ = codedInputStream.readBool();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.frontConfig_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CheckSeUpgradeResponse.class, Builder.class);
        }

        static {
            CheckSeUpgradeResponse checkSeUpgradeResponse = new CheckSeUpgradeResponse(true);
            defaultInstance = checkSeUpgradeResponse;
            checkSeUpgradeResponse.initFields();
        }

        public final Parser<CheckSeUpgradeResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasNeedUpgrade() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean getNeedUpgrade() {
            return this.needUpgrade_;
        }

        public final boolean hasFrontConfig() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getFrontConfig() {
            Object obj = this.frontConfig_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.frontConfig_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getFrontConfigBytes() {
            Object obj = this.frontConfig_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.frontConfig_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.errorDesc_ = "";
            this.needUpgrade_ = false;
            this.frontConfig_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getErrorDescBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBool(3, this.needUpgrade_);
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getFrontConfigBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getErrorDescBytes());
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBoolSize(3, this.needUpgrade_);
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getFrontConfigBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static CheckSeUpgradeResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static CheckSeUpgradeResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static CheckSeUpgradeResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static CheckSeUpgradeResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static CheckSeUpgradeResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static CheckSeUpgradeResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static CheckSeUpgradeResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static CheckSeUpgradeResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static CheckSeUpgradeResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static CheckSeUpgradeResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(CheckSeUpgradeResponse checkSeUpgradeResponse) {
            return newBuilder().mergeFrom(checkSeUpgradeResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements CheckSeUpgradeResponseOrBuilder {
            private int bitField0_;
            private Object errorDesc_;
            private Object frontConfig_;
            private boolean needUpgrade_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(CheckSeUpgradeResponse.class, Builder.class);
            }

            private Builder() {
                this.errorDesc_ = "";
                this.frontConfig_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.errorDesc_ = "";
                this.frontConfig_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = CheckSeUpgradeResponse.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                this.errorDesc_ = "";
                this.bitField0_ &= -3;
                this.needUpgrade_ = false;
                this.bitField0_ &= -5;
                this.frontConfig_ = "";
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_CheckSeUpgradeResponse_descriptor;
            }

            public final CheckSeUpgradeResponse getDefaultInstanceForType() {
                return CheckSeUpgradeResponse.getDefaultInstance();
            }

            public final CheckSeUpgradeResponse build() {
                CheckSeUpgradeResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final CheckSeUpgradeResponse buildPartial() {
                CheckSeUpgradeResponse checkSeUpgradeResponse = new CheckSeUpgradeResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                checkSeUpgradeResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                checkSeUpgradeResponse.errorDesc_ = this.errorDesc_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                checkSeUpgradeResponse.needUpgrade_ = this.needUpgrade_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                checkSeUpgradeResponse.frontConfig_ = this.frontConfig_;
                checkSeUpgradeResponse.bitField0_ = i2;
                onBuilt();
                return checkSeUpgradeResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof CheckSeUpgradeResponse) {
                    return mergeFrom((CheckSeUpgradeResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(CheckSeUpgradeResponse checkSeUpgradeResponse) {
                if (checkSeUpgradeResponse == CheckSeUpgradeResponse.getDefaultInstance()) {
                    return this;
                }
                if (checkSeUpgradeResponse.hasResult()) {
                    setResult(checkSeUpgradeResponse.getResult());
                }
                if (checkSeUpgradeResponse.hasErrorDesc()) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = checkSeUpgradeResponse.errorDesc_;
                    onChanged();
                }
                if (checkSeUpgradeResponse.hasNeedUpgrade()) {
                    setNeedUpgrade(checkSeUpgradeResponse.getNeedUpgrade());
                }
                if (checkSeUpgradeResponse.hasFrontConfig()) {
                    this.bitField0_ |= 8;
                    this.frontConfig_ = checkSeUpgradeResponse.frontConfig_;
                    onChanged();
                }
                mergeUnknownFields(checkSeUpgradeResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                CheckSeUpgradeResponse checkSeUpgradeResponse;
                CheckSeUpgradeResponse checkSeUpgradeResponse2 = null;
                try {
                    CheckSeUpgradeResponse parsePartialFrom = CheckSeUpgradeResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    checkSeUpgradeResponse = (CheckSeUpgradeResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    checkSeUpgradeResponse2 = checkSeUpgradeResponse;
                }
                if (checkSeUpgradeResponse2 != null) {
                    mergeFrom(checkSeUpgradeResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -3;
                this.errorDesc_ = CheckSeUpgradeResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasNeedUpgrade() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean getNeedUpgrade() {
                return this.needUpgrade_;
            }

            public final Builder setNeedUpgrade(boolean z) {
                this.bitField0_ |= 4;
                this.needUpgrade_ = z;
                onChanged();
                return this;
            }

            public final Builder clearNeedUpgrade() {
                this.bitField0_ &= -5;
                this.needUpgrade_ = false;
                onChanged();
                return this;
            }

            public final boolean hasFrontConfig() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getFrontConfig() {
                Object obj = this.frontConfig_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.frontConfig_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getFrontConfigBytes() {
                Object obj = this.frontConfig_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.frontConfig_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setFrontConfig(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.frontConfig_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearFrontConfig() {
                this.bitField0_ &= -9;
                this.frontConfig_ = CheckSeUpgradeResponse.getDefaultInstance().getFrontConfig();
                onChanged();
                return this;
            }

            public final Builder setFrontConfigBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.frontConfig_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class EnrollEidRequest extends GeneratedMessage implements EnrollEidRequestOrBuilder {
        public static Parser<EnrollEidRequest> PARSER = new AbstractParser<EnrollEidRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.EnrollEidRequest.AnonymousClass1 */

            public final EnrollEidRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new EnrollEidRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final EnrollEidRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object sessionId_;
        public Object spToken_;
        private final UnknownFieldSet unknownFields;

        private EnrollEidRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EnrollEidRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EnrollEidRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final EnrollEidRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EnrollEidRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.sessionId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.spToken_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnrollEidRequest.class, Builder.class);
        }

        static {
            EnrollEidRequest enrollEidRequest = new EnrollEidRequest(true);
            defaultInstance = enrollEidRequest;
            enrollEidRequest.initFields();
        }

        public final Parser<EnrollEidRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasSessionId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getSessionId() {
            Object obj = this.sessionId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.sessionId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSessionIdBytes() {
            Object obj = this.sessionId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.sessionId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasSpToken() {
            return (this.bitField0_ & 2) == 2;
        }

        public final String getSpToken() {
            Object obj = this.spToken_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.spToken_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getSpTokenBytes() {
            Object obj = this.spToken_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.spToken_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.sessionId_ = "";
            this.spToken_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, getSpTokenBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getSessionIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, getSpTokenBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EnrollEidRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static EnrollEidRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static EnrollEidRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static EnrollEidRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static EnrollEidRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static EnrollEidRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static EnrollEidRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static EnrollEidRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static EnrollEidRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static EnrollEidRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EnrollEidRequest enrollEidRequest) {
            return newBuilder().mergeFrom(enrollEidRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements EnrollEidRequestOrBuilder {
            private int bitField0_;
            private Object sessionId_;
            private Object spToken_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(EnrollEidRequest.class, Builder.class);
            }

            private Builder() {
                this.sessionId_ = "";
                this.spToken_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.sessionId_ = "";
                this.spToken_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = EnrollEidRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.sessionId_ = "";
                this.bitField0_ &= -2;
                this.spToken_ = "";
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EnrollEidRequest_descriptor;
            }

            public final EnrollEidRequest getDefaultInstanceForType() {
                return EnrollEidRequest.getDefaultInstance();
            }

            public final EnrollEidRequest build() {
                EnrollEidRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final EnrollEidRequest buildPartial() {
                EnrollEidRequest enrollEidRequest = new EnrollEidRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                enrollEidRequest.sessionId_ = this.sessionId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                enrollEidRequest.spToken_ = this.spToken_;
                enrollEidRequest.bitField0_ = i2;
                onBuilt();
                return enrollEidRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof EnrollEidRequest) {
                    return mergeFrom((EnrollEidRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(EnrollEidRequest enrollEidRequest) {
                if (enrollEidRequest == EnrollEidRequest.getDefaultInstance()) {
                    return this;
                }
                if (enrollEidRequest.hasSessionId()) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = enrollEidRequest.sessionId_;
                    onChanged();
                }
                if (enrollEidRequest.hasSpToken()) {
                    this.bitField0_ |= 2;
                    this.spToken_ = enrollEidRequest.spToken_;
                    onChanged();
                }
                mergeUnknownFields(enrollEidRequest.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                EnrollEidRequest enrollEidRequest;
                EnrollEidRequest enrollEidRequest2 = null;
                try {
                    EnrollEidRequest parsePartialFrom = EnrollEidRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    enrollEidRequest = (EnrollEidRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    enrollEidRequest2 = enrollEidRequest;
                }
                if (enrollEidRequest2 != null) {
                    mergeFrom(enrollEidRequest2);
                }
                throw th;
            }

            public final boolean hasSessionId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getSessionId() {
                Object obj = this.sessionId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.sessionId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSessionIdBytes() {
                Object obj = this.sessionId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.sessionId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSessionId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSessionId() {
                this.bitField0_ &= -2;
                this.sessionId_ = EnrollEidRequest.getDefaultInstance().getSessionId();
                onChanged();
                return this;
            }

            public final Builder setSessionIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.sessionId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasSpToken() {
                return (this.bitField0_ & 2) == 2;
            }

            public final String getSpToken() {
                Object obj = this.spToken_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.spToken_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getSpTokenBytes() {
                Object obj = this.spToken_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.spToken_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setSpToken(String str) {
                if (str != null) {
                    this.bitField0_ |= 2;
                    this.spToken_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearSpToken() {
                this.bitField0_ &= -3;
                this.spToken_ = EnrollEidRequest.getDefaultInstance().getSpToken();
                onChanged();
                return this;
            }

            public final Builder setSpTokenBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.spToken_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class EidInfo extends GeneratedMessage implements EidInfoOrBuilder {
        public static Parser<EidInfo> PARSER = new AbstractParser<EidInfo>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.EidInfo.AnonymousClass1 */

            public final EidInfo parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new EidInfo(codedInputStream, extensionRegistryLite);
            }
        };
        private static final EidInfo defaultInstance;
        private static final long serialVersionUID = 0;
        public Object aid_;
        public int bitField0_;
        public Object cardArt_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public Object name_;
        private final UnknownFieldSet unknownFields;
        public int vcStatus_;

        private EidInfo(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EidInfo(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EidInfo getDefaultInstance() {
            return defaultInstance;
        }

        public final EidInfo getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EidInfo(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.name_ = codedInputStream.readBytes();
                        } else if (readTag == 16) {
                            this.bitField0_ |= 2;
                            this.vcStatus_ = codedInputStream.readInt32();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.cardArt_ = codedInputStream.readBytes();
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.aid_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(EidInfo.class, Builder.class);
        }

        static {
            EidInfo eidInfo = new EidInfo(true);
            defaultInstance = eidInfo;
            eidInfo.initFields();
        }

        public final Parser<EidInfo> getParserForType() {
            return PARSER;
        }

        public final boolean hasName() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getName() {
            Object obj = this.name_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.name_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getNameBytes() {
            Object obj = this.name_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.name_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasVcStatus() {
            return (this.bitField0_ & 2) == 2;
        }

        public final int getVcStatus() {
            return this.vcStatus_;
        }

        public final boolean hasCardArt() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getCardArt() {
            Object obj = this.cardArt_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.cardArt_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getCardArtBytes() {
            Object obj = this.cardArt_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.cardArt_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasAid() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getAid() {
            Object obj = this.aid_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.aid_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getAidBytes() {
            Object obj = this.aid_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.aid_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.name_ = "";
            this.vcStatus_ = 0;
            this.cardArt_ = "";
            this.aid_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeInt32(2, this.vcStatus_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getCardArtBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getAidBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getNameBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeInt32Size(2, this.vcStatus_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getCardArtBytes());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getAidBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EidInfo parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static EidInfo parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static EidInfo parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static EidInfo parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static EidInfo parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static EidInfo parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static EidInfo parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static EidInfo parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static EidInfo parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static EidInfo parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EidInfo eidInfo) {
            return newBuilder().mergeFrom(eidInfo);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements EidInfoOrBuilder {
            private Object aid_;
            private int bitField0_;
            private Object cardArt_;
            private Object name_;
            private int vcStatus_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_fieldAccessorTable.ensureFieldAccessorsInitialized(EidInfo.class, Builder.class);
            }

            private Builder() {
                this.name_ = "";
                this.cardArt_ = "";
                this.aid_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.name_ = "";
                this.cardArt_ = "";
                this.aid_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = EidInfo.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.name_ = "";
                this.bitField0_ &= -2;
                this.vcStatus_ = 0;
                this.bitField0_ &= -3;
                this.cardArt_ = "";
                this.bitField0_ &= -5;
                this.aid_ = "";
                this.bitField0_ &= -9;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfo_descriptor;
            }

            public final EidInfo getDefaultInstanceForType() {
                return EidInfo.getDefaultInstance();
            }

            public final EidInfo build() {
                EidInfo buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final EidInfo buildPartial() {
                EidInfo eidInfo = new EidInfo(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                eidInfo.name_ = this.name_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                eidInfo.vcStatus_ = this.vcStatus_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                eidInfo.cardArt_ = this.cardArt_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                eidInfo.aid_ = this.aid_;
                eidInfo.bitField0_ = i2;
                onBuilt();
                return eidInfo;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof EidInfo) {
                    return mergeFrom((EidInfo) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(EidInfo eidInfo) {
                if (eidInfo == EidInfo.getDefaultInstance()) {
                    return this;
                }
                if (eidInfo.hasName()) {
                    this.bitField0_ |= 1;
                    this.name_ = eidInfo.name_;
                    onChanged();
                }
                if (eidInfo.hasVcStatus()) {
                    setVcStatus(eidInfo.getVcStatus());
                }
                if (eidInfo.hasCardArt()) {
                    this.bitField0_ |= 4;
                    this.cardArt_ = eidInfo.cardArt_;
                    onChanged();
                }
                if (eidInfo.hasAid()) {
                    this.bitField0_ |= 8;
                    this.aid_ = eidInfo.aid_;
                    onChanged();
                }
                mergeUnknownFields(eidInfo.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                EidInfo eidInfo;
                EidInfo eidInfo2 = null;
                try {
                    EidInfo parsePartialFrom = EidInfo.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    eidInfo = (EidInfo) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    eidInfo2 = eidInfo;
                }
                if (eidInfo2 != null) {
                    mergeFrom(eidInfo2);
                }
                throw th;
            }

            public final boolean hasName() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getName() {
                Object obj = this.name_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.name_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getNameBytes() {
                Object obj = this.name_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.name_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setName(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.name_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearName() {
                this.bitField0_ &= -2;
                this.name_ = EidInfo.getDefaultInstance().getName();
                onChanged();
                return this;
            }

            public final Builder setNameBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.name_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasVcStatus() {
                return (this.bitField0_ & 2) == 2;
            }

            public final int getVcStatus() {
                return this.vcStatus_;
            }

            public final Builder setVcStatus(int i) {
                this.bitField0_ |= 2;
                this.vcStatus_ = i;
                onChanged();
                return this;
            }

            public final Builder clearVcStatus() {
                this.bitField0_ &= -3;
                this.vcStatus_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasCardArt() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getCardArt() {
                Object obj = this.cardArt_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.cardArt_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getCardArtBytes() {
                Object obj = this.cardArt_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.cardArt_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setCardArt(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.cardArt_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardArt() {
                this.bitField0_ &= -5;
                this.cardArt_ = EidInfo.getDefaultInstance().getCardArt();
                onChanged();
                return this;
            }

            public final Builder setCardArtBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.cardArt_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasAid() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getAid() {
                Object obj = this.aid_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.aid_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getAidBytes() {
                Object obj = this.aid_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.aid_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setAid(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.aid_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearAid() {
                this.bitField0_ &= -9;
                this.aid_ = EidInfo.getDefaultInstance().getAid();
                onChanged();
                return this;
            }

            public final Builder setAidBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.aid_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class EidInfoResponse extends GeneratedMessage implements EidInfoResponseOrBuilder {
        public static Parser<EidInfoResponse> PARSER = new AbstractParser<EidInfoResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.EidInfoResponse.AnonymousClass1 */

            public final EidInfoResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new EidInfoResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final EidInfoResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public EidInfo eidInfo_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;

        private EidInfoResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private EidInfoResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static EidInfoResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final EidInfoResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private EidInfoResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            EidInfo.Builder builder = (this.bitField0_ & 2) == 2 ? this.eidInfo_.toBuilder() : null;
                            this.eidInfo_ = (EidInfo) codedInputStream.readMessage(EidInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.eidInfo_);
                                this.eidInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 2;
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EidInfoResponse.class, Builder.class);
        }

        static {
            EidInfoResponse eidInfoResponse = new EidInfoResponse(true);
            defaultInstance = eidInfoResponse;
            eidInfoResponse.initFields();
        }

        public final Parser<EidInfoResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasEidInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final EidInfo getEidInfo() {
            return this.eidInfo_;
        }

        public final EidInfoOrBuilder getEidInfoOrBuilder() {
            return this.eidInfo_;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 4) == 4;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.eidInfo_ = EidInfo.getDefaultInstance();
            this.errorDesc_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(2, this.eidInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, getErrorDescBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeMessageSize(2, this.eidInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, getErrorDescBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static EidInfoResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static EidInfoResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static EidInfoResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static EidInfoResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static EidInfoResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static EidInfoResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static EidInfoResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static EidInfoResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static EidInfoResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static EidInfoResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(EidInfoResponse eidInfoResponse) {
            return newBuilder().mergeFrom(eidInfoResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements EidInfoResponseOrBuilder {
            private int bitField0_;
            private SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> eidInfoBuilder_;
            private EidInfo eidInfo_;
            private Object errorDesc_;
            private int result_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(EidInfoResponse.class, Builder.class);
            }

            private Builder() {
                this.eidInfo_ = EidInfo.getDefaultInstance();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.eidInfo_ = EidInfo.getDefaultInstance();
                this.errorDesc_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (EidInfoResponse.alwaysUseFieldBuilders) {
                    getEidInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.eidInfo_ = EidInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                this.errorDesc_ = "";
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_EidInfoResponse_descriptor;
            }

            public final EidInfoResponse getDefaultInstanceForType() {
                return EidInfoResponse.getDefaultInstance();
            }

            public final EidInfoResponse build() {
                EidInfoResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final EidInfoResponse buildPartial() {
                EidInfoResponse eidInfoResponse = new EidInfoResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                eidInfoResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder == null) {
                    eidInfoResponse.eidInfo_ = this.eidInfo_;
                } else {
                    eidInfoResponse.eidInfo_ = singleFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                eidInfoResponse.errorDesc_ = this.errorDesc_;
                eidInfoResponse.bitField0_ = i2;
                onBuilt();
                return eidInfoResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof EidInfoResponse) {
                    return mergeFrom((EidInfoResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(EidInfoResponse eidInfoResponse) {
                if (eidInfoResponse == EidInfoResponse.getDefaultInstance()) {
                    return this;
                }
                if (eidInfoResponse.hasResult()) {
                    setResult(eidInfoResponse.getResult());
                }
                if (eidInfoResponse.hasEidInfo()) {
                    mergeEidInfo(eidInfoResponse.getEidInfo());
                }
                if (eidInfoResponse.hasErrorDesc()) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = eidInfoResponse.errorDesc_;
                    onChanged();
                }
                mergeUnknownFields(eidInfoResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                return hasResult();
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                EidInfoResponse eidInfoResponse;
                EidInfoResponse eidInfoResponse2 = null;
                try {
                    EidInfoResponse parsePartialFrom = EidInfoResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    eidInfoResponse = (EidInfoResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    eidInfoResponse2 = eidInfoResponse;
                }
                if (eidInfoResponse2 != null) {
                    mergeFrom(eidInfoResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasEidInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final EidInfo getEidInfo() {
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.eidInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setEidInfo(EidInfo eidInfo) {
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(eidInfo);
                } else if (eidInfo != null) {
                    this.eidInfo_ = eidInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setEidInfo(EidInfo.Builder builder) {
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.eidInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder mergeEidInfo(EidInfo eidInfo) {
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 2) != 2 || this.eidInfo_ == EidInfo.getDefaultInstance()) {
                        this.eidInfo_ = eidInfo;
                    } else {
                        this.eidInfo_ = EidInfo.newBuilder(this.eidInfo_).mergeFrom(eidInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(eidInfo);
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder clearEidInfo() {
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.eidInfo_ = EidInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                return this;
            }

            public final EidInfo.Builder getEidInfoBuilder() {
                this.bitField0_ |= 2;
                onChanged();
                return getEidInfoFieldBuilder().getBuilder();
            }

            public final EidInfoOrBuilder getEidInfoOrBuilder() {
                SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> singleFieldBuilder = this.eidInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.eidInfo_;
            }

            private SingleFieldBuilder<EidInfo, EidInfo.Builder, EidInfoOrBuilder> getEidInfoFieldBuilder() {
                if (this.eidInfoBuilder_ == null) {
                    this.eidInfoBuilder_ = new SingleFieldBuilder<>(this.eidInfo_, getParentForChildren(), isClean());
                    this.eidInfo_ = null;
                }
                return this.eidInfoBuilder_;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 4) == 4;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -5;
                this.errorDesc_ = EidInfoResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class QueryPanForQrRequest extends GeneratedMessage implements QueryPanForQrRequestOrBuilder {
        public static Parser<QueryPanForQrRequest> PARSER = new AbstractParser<QueryPanForQrRequest>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryPanForQrRequest.AnonymousClass1 */

            public final QueryPanForQrRequest parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryPanForQrRequest(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryPanForQrRequest defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public ByteString cipheredPan_;
        public Object deviceId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        private QueryPanForQrRequest(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryPanForQrRequest(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryPanForQrRequest getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryPanForQrRequest getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryPanForQrRequest(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.cipheredPan_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanForQrRequest.class, Builder.class);
        }

        static {
            QueryPanForQrRequest queryPanForQrRequest = new QueryPanForQrRequest(true);
            defaultInstance = queryPanForQrRequest;
            queryPanForQrRequest.initFields();
        }

        public final Parser<QueryPanForQrRequest> getParserForType() {
            return PARSER;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasCipheredPan() {
            return (this.bitField0_ & 2) == 2;
        }

        public final ByteString getCipheredPan() {
            return this.cipheredPan_;
        }

        private void initFields() {
            this.deviceId_ = "";
            this.cipheredPan_ = ByteString.EMPTY;
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, this.cipheredPan_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, this.cipheredPan_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryPanForQrRequest parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryPanForQrRequest parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryPanForQrRequest parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryPanForQrRequest parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryPanForQrRequest parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryPanForQrRequest parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanForQrRequest parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryPanForQrRequest parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanForQrRequest parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryPanForQrRequest parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryPanForQrRequest queryPanForQrRequest) {
            return newBuilder().mergeFrom(queryPanForQrRequest);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryPanForQrRequestOrBuilder {
            private int bitField0_;
            private ByteString cipheredPan_;
            private Object deviceId_;

            public final boolean isInitialized() {
                return true;
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanForQrRequest.class, Builder.class);
            }

            private Builder() {
                this.deviceId_ = "";
                this.cipheredPan_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceId_ = "";
                this.cipheredPan_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                boolean z = QueryPanForQrRequest.alwaysUseFieldBuilders;
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.deviceId_ = "";
                this.bitField0_ &= -2;
                this.cipheredPan_ = ByteString.EMPTY;
                this.bitField0_ &= -3;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrRequest_descriptor;
            }

            public final QueryPanForQrRequest getDefaultInstanceForType() {
                return QueryPanForQrRequest.getDefaultInstance();
            }

            public final QueryPanForQrRequest build() {
                QueryPanForQrRequest buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryPanForQrRequest buildPartial() {
                QueryPanForQrRequest queryPanForQrRequest = new QueryPanForQrRequest(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryPanForQrRequest.deviceId_ = this.deviceId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                queryPanForQrRequest.cipheredPan_ = this.cipheredPan_;
                queryPanForQrRequest.bitField0_ = i2;
                onBuilt();
                return queryPanForQrRequest;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryPanForQrRequest) {
                    return mergeFrom((QueryPanForQrRequest) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryPanForQrRequest queryPanForQrRequest) {
                if (queryPanForQrRequest == QueryPanForQrRequest.getDefaultInstance()) {
                    return this;
                }
                if (queryPanForQrRequest.hasDeviceId()) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = queryPanForQrRequest.deviceId_;
                    onChanged();
                }
                if (queryPanForQrRequest.hasCipheredPan()) {
                    setCipheredPan(queryPanForQrRequest.getCipheredPan());
                }
                mergeUnknownFields(queryPanForQrRequest.getUnknownFields());
                return this;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryPanForQrRequest queryPanForQrRequest;
                QueryPanForQrRequest queryPanForQrRequest2 = null;
                try {
                    QueryPanForQrRequest parsePartialFrom = QueryPanForQrRequest.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryPanForQrRequest = (QueryPanForQrRequest) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryPanForQrRequest2 = queryPanForQrRequest;
                }
                if (queryPanForQrRequest2 != null) {
                    mergeFrom(queryPanForQrRequest2);
                }
                throw th;
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -2;
                this.deviceId_ = QueryPanForQrRequest.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasCipheredPan() {
                return (this.bitField0_ & 2) == 2;
            }

            public final ByteString getCipheredPan() {
                return this.cipheredPan_;
            }

            public final Builder setCipheredPan(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cipheredPan_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCipheredPan() {
                this.bitField0_ &= -3;
                this.cipheredPan_ = QueryPanForQrRequest.getDefaultInstance().getCipheredPan();
                onChanged();
                return this;
            }
        }
    }

    public static final class QueryPanForQrResponse extends GeneratedMessage implements QueryPanForQrResponseOrBuilder {
        public static Parser<QueryPanForQrResponse> PARSER = new AbstractParser<QueryPanForQrResponse>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.QueryPanForQrResponse.AnonymousClass1 */

            public final QueryPanForQrResponse parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new QueryPanForQrResponse(codedInputStream, extensionRegistryLite);
            }
        };
        private static final QueryPanForQrResponse defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public CardIssuerInfo cardIssuerInfo_;
        public BankCardType cardType_;
        public Object errorDesc_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        public int result_;
        private final UnknownFieldSet unknownFields;
        public Object userTerms_;

        private QueryPanForQrResponse(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private QueryPanForQrResponse(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static QueryPanForQrResponse getDefaultInstance() {
            return defaultInstance;
        }

        public final QueryPanForQrResponse getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private QueryPanForQrResponse(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 8) {
                            this.bitField0_ |= 1;
                            this.result_ = codedInputStream.readInt32();
                        } else if (readTag == 18) {
                            CardIssuerInfo.Builder builder = (this.bitField0_ & 2) == 2 ? this.cardIssuerInfo_.toBuilder() : null;
                            this.cardIssuerInfo_ = (CardIssuerInfo) codedInputStream.readMessage(CardIssuerInfo.PARSER, extensionRegistryLite);
                            if (builder != null) {
                                builder.mergeFrom(this.cardIssuerInfo_);
                                this.cardIssuerInfo_ = builder.buildPartial();
                            }
                            this.bitField0_ |= 2;
                        } else if (readTag == 24) {
                            int readEnum = codedInputStream.readEnum();
                            BankCardType valueOf = BankCardType.valueOf(readEnum);
                            if (valueOf == null) {
                                newBuilder.mergeVarintField(3, readEnum);
                            } else {
                                this.bitField0_ |= 4;
                                this.cardType_ = valueOf;
                            }
                        } else if (readTag == 34) {
                            this.bitField0_ |= 8;
                            this.errorDesc_ = codedInputStream.readBytes();
                        } else if (readTag == 42) {
                            this.bitField0_ |= 16;
                            this.userTerms_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_descriptor;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanForQrResponse.class, Builder.class);
        }

        static {
            QueryPanForQrResponse queryPanForQrResponse = new QueryPanForQrResponse(true);
            defaultInstance = queryPanForQrResponse;
            queryPanForQrResponse.initFields();
        }

        public final Parser<QueryPanForQrResponse> getParserForType() {
            return PARSER;
        }

        public final boolean hasResult() {
            return (this.bitField0_ & 1) == 1;
        }

        public final int getResult() {
            return this.result_;
        }

        public final boolean hasCardIssuerInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final CardIssuerInfo getCardIssuerInfo() {
            return this.cardIssuerInfo_;
        }

        public final CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder() {
            return this.cardIssuerInfo_;
        }

        public final boolean hasCardType() {
            return (this.bitField0_ & 4) == 4;
        }

        public final BankCardType getCardType() {
            return this.cardType_;
        }

        public final boolean hasErrorDesc() {
            return (this.bitField0_ & 8) == 8;
        }

        public final String getErrorDesc() {
            Object obj = this.errorDesc_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.errorDesc_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getErrorDescBytes() {
            Object obj = this.errorDesc_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.errorDesc_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final boolean hasUserTerms() {
            return (this.bitField0_ & 16) == 16;
        }

        public final String getUserTerms() {
            Object obj = this.userTerms_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.userTerms_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getUserTermsBytes() {
            Object obj = this.userTerms_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.userTerms_ = copyFromUtf8;
            return copyFromUtf8;
        }

        private void initFields() {
            this.result_ = 0;
            this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
            this.cardType_ = BankCardType.DEBIT;
            this.errorDesc_ = "";
            this.userTerms_ = "";
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            if (!hasResult()) {
                this.memoizedIsInitialized = 0;
                return false;
            } else if (!hasCardIssuerInfo() || getCardIssuerInfo().isInitialized()) {
                this.memoizedIsInitialized = 1;
                return true;
            } else {
                this.memoizedIsInitialized = 0;
                return false;
            }
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeInt32(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeMessage(2, this.cardIssuerInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeEnum(3, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                codedOutputStream.writeBytes(4, getErrorDescBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                codedOutputStream.writeBytes(5, getUserTermsBytes());
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeInt32Size(1, this.result_);
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeMessageSize(2, this.cardIssuerInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeEnumSize(3, this.cardType_.getNumber());
            }
            if ((this.bitField0_ & 8) == 8) {
                i2 += CodedOutputStream.computeBytesSize(4, getErrorDescBytes());
            }
            if ((this.bitField0_ & 16) == 16) {
                i2 += CodedOutputStream.computeBytesSize(5, getUserTermsBytes());
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public static QueryPanForQrResponse parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static QueryPanForQrResponse parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static QueryPanForQrResponse parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static QueryPanForQrResponse parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public static QueryPanForQrResponse parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static QueryPanForQrResponse parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanForQrResponse parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static QueryPanForQrResponse parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static QueryPanForQrResponse parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static QueryPanForQrResponse parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        public static Builder newBuilder(QueryPanForQrResponse queryPanForQrResponse) {
            return newBuilder().mergeFrom(queryPanForQrResponse);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements QueryPanForQrResponseOrBuilder {
            private int bitField0_;
            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> cardIssuerInfoBuilder_;
            private CardIssuerInfo cardIssuerInfo_;
            private BankCardType cardType_;
            private Object errorDesc_;
            private int result_;
            private Object userTerms_;

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_descriptor;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_fieldAccessorTable.ensureFieldAccessorsInitialized(QueryPanForQrResponse.class, Builder.class);
            }

            private Builder() {
                this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                this.errorDesc_ = "";
                this.userTerms_ = "";
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                this.cardType_ = BankCardType.DEBIT;
                this.errorDesc_ = "";
                this.userTerms_ = "";
                maybeForceBuilderInitialization();
            }

            private void maybeForceBuilderInitialization() {
                if (QueryPanForQrResponse.alwaysUseFieldBuilders) {
                    getCardIssuerInfoFieldBuilder();
                }
            }

            public static Builder create() {
                return new Builder();
            }

            public final Builder clear() {
                super.clear();
                this.result_ = 0;
                this.bitField0_ &= -2;
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                this.cardType_ = BankCardType.DEBIT;
                this.bitField0_ &= -5;
                this.errorDesc_ = "";
                this.bitField0_ &= -9;
                this.userTerms_ = "";
                this.bitField0_ &= -17;
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_QueryPanForQrResponse_descriptor;
            }

            public final QueryPanForQrResponse getDefaultInstanceForType() {
                return QueryPanForQrResponse.getDefaultInstance();
            }

            public final QueryPanForQrResponse build() {
                QueryPanForQrResponse buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final QueryPanForQrResponse buildPartial() {
                QueryPanForQrResponse queryPanForQrResponse = new QueryPanForQrResponse(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                queryPanForQrResponse.result_ = this.result_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    queryPanForQrResponse.cardIssuerInfo_ = this.cardIssuerInfo_;
                } else {
                    queryPanForQrResponse.cardIssuerInfo_ = singleFieldBuilder.build();
                }
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                queryPanForQrResponse.cardType_ = this.cardType_;
                if ((i & 8) == 8) {
                    i2 |= 8;
                }
                queryPanForQrResponse.errorDesc_ = this.errorDesc_;
                if ((i & 16) == 16) {
                    i2 |= 16;
                }
                queryPanForQrResponse.userTerms_ = this.userTerms_;
                queryPanForQrResponse.bitField0_ = i2;
                onBuilt();
                return queryPanForQrResponse;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof QueryPanForQrResponse) {
                    return mergeFrom((QueryPanForQrResponse) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(QueryPanForQrResponse queryPanForQrResponse) {
                if (queryPanForQrResponse == QueryPanForQrResponse.getDefaultInstance()) {
                    return this;
                }
                if (queryPanForQrResponse.hasResult()) {
                    setResult(queryPanForQrResponse.getResult());
                }
                if (queryPanForQrResponse.hasCardIssuerInfo()) {
                    mergeCardIssuerInfo(queryPanForQrResponse.getCardIssuerInfo());
                }
                if (queryPanForQrResponse.hasCardType()) {
                    setCardType(queryPanForQrResponse.getCardType());
                }
                if (queryPanForQrResponse.hasErrorDesc()) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = queryPanForQrResponse.errorDesc_;
                    onChanged();
                }
                if (queryPanForQrResponse.hasUserTerms()) {
                    this.bitField0_ |= 16;
                    this.userTerms_ = queryPanForQrResponse.userTerms_;
                    onChanged();
                }
                mergeUnknownFields(queryPanForQrResponse.getUnknownFields());
                return this;
            }

            public final boolean isInitialized() {
                if (!hasResult()) {
                    return false;
                }
                if (!hasCardIssuerInfo() || getCardIssuerInfo().isInitialized()) {
                    return true;
                }
                return false;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                QueryPanForQrResponse queryPanForQrResponse;
                QueryPanForQrResponse queryPanForQrResponse2 = null;
                try {
                    QueryPanForQrResponse parsePartialFrom = QueryPanForQrResponse.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    queryPanForQrResponse = (QueryPanForQrResponse) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    queryPanForQrResponse2 = queryPanForQrResponse;
                }
                if (queryPanForQrResponse2 != null) {
                    mergeFrom(queryPanForQrResponse2);
                }
                throw th;
            }

            public final boolean hasResult() {
                return (this.bitField0_ & 1) == 1;
            }

            public final int getResult() {
                return this.result_;
            }

            public final Builder setResult(int i) {
                this.bitField0_ |= 1;
                this.result_ = i;
                onChanged();
                return this;
            }

            public final Builder clearResult() {
                this.bitField0_ &= -2;
                this.result_ = 0;
                onChanged();
                return this;
            }

            public final boolean hasCardIssuerInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final CardIssuerInfo getCardIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    return this.cardIssuerInfo_;
                }
                return singleFieldBuilder.getMessage();
            }

            public final Builder setCardIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    singleFieldBuilder.setMessage(cardIssuerInfo);
                } else if (cardIssuerInfo != null) {
                    this.cardIssuerInfo_ = cardIssuerInfo;
                    onChanged();
                } else {
                    throw new NullPointerException();
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder setCardIssuerInfo(CardIssuerInfo.Builder builder) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = builder.build();
                    onChanged();
                } else {
                    singleFieldBuilder.setMessage(builder.build());
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder mergeCardIssuerInfo(CardIssuerInfo cardIssuerInfo) {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    if ((this.bitField0_ & 2) != 2 || this.cardIssuerInfo_ == CardIssuerInfo.getDefaultInstance()) {
                        this.cardIssuerInfo_ = cardIssuerInfo;
                    } else {
                        this.cardIssuerInfo_ = CardIssuerInfo.newBuilder(this.cardIssuerInfo_).mergeFrom(cardIssuerInfo).buildPartial();
                    }
                    onChanged();
                } else {
                    singleFieldBuilder.mergeFrom(cardIssuerInfo);
                }
                this.bitField0_ |= 2;
                return this;
            }

            public final Builder clearCardIssuerInfo() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder == null) {
                    this.cardIssuerInfo_ = CardIssuerInfo.getDefaultInstance();
                    onChanged();
                } else {
                    singleFieldBuilder.clear();
                }
                this.bitField0_ &= -3;
                return this;
            }

            public final CardIssuerInfo.Builder getCardIssuerInfoBuilder() {
                this.bitField0_ |= 2;
                onChanged();
                return getCardIssuerInfoFieldBuilder().getBuilder();
            }

            public final CardIssuerInfoOrBuilder getCardIssuerInfoOrBuilder() {
                SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> singleFieldBuilder = this.cardIssuerInfoBuilder_;
                if (singleFieldBuilder != null) {
                    return singleFieldBuilder.getMessageOrBuilder();
                }
                return this.cardIssuerInfo_;
            }

            private SingleFieldBuilder<CardIssuerInfo, CardIssuerInfo.Builder, CardIssuerInfoOrBuilder> getCardIssuerInfoFieldBuilder() {
                if (this.cardIssuerInfoBuilder_ == null) {
                    this.cardIssuerInfoBuilder_ = new SingleFieldBuilder<>(this.cardIssuerInfo_, getParentForChildren(), isClean());
                    this.cardIssuerInfo_ = null;
                }
                return this.cardIssuerInfoBuilder_;
            }

            public final boolean hasCardType() {
                return (this.bitField0_ & 4) == 4;
            }

            public final BankCardType getCardType() {
                return this.cardType_;
            }

            public final Builder setCardType(BankCardType bankCardType) {
                if (bankCardType != null) {
                    this.bitField0_ |= 4;
                    this.cardType_ = bankCardType;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearCardType() {
                this.bitField0_ &= -5;
                this.cardType_ = BankCardType.DEBIT;
                onChanged();
                return this;
            }

            public final boolean hasErrorDesc() {
                return (this.bitField0_ & 8) == 8;
            }

            public final String getErrorDesc() {
                Object obj = this.errorDesc_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.errorDesc_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getErrorDescBytes() {
                Object obj = this.errorDesc_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.errorDesc_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setErrorDesc(String str) {
                if (str != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearErrorDesc() {
                this.bitField0_ &= -9;
                this.errorDesc_ = QueryPanForQrResponse.getDefaultInstance().getErrorDesc();
                onChanged();
                return this;
            }

            public final Builder setErrorDescBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 8;
                    this.errorDesc_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final boolean hasUserTerms() {
                return (this.bitField0_ & 16) == 16;
            }

            public final String getUserTerms() {
                Object obj = this.userTerms_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.userTerms_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getUserTermsBytes() {
                Object obj = this.userTerms_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.userTerms_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final Builder setUserTerms(String str) {
                if (str != null) {
                    this.bitField0_ |= 16;
                    this.userTerms_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder clearUserTerms() {
                this.bitField0_ &= -17;
                this.userTerms_ = QueryPanForQrResponse.getDefaultInstance().getUserTerms();
                onChanged();
                return this;
            }

            public final Builder setUserTermsBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 16;
                    this.userTerms_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }
    }

    public static final class RequestVerificationCodeForQr extends GeneratedMessage implements RequestVerificationCodeForQrOrBuilder {
        public static Parser<RequestVerificationCodeForQr> PARSER = new AbstractParser<RequestVerificationCodeForQr>() {
            /* class com.miui.tsmclient.seitsm.TsmRpcModels.RequestVerificationCodeForQr.AnonymousClass1 */

            public final RequestVerificationCodeForQr parsePartialFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
                return new RequestVerificationCodeForQr(codedInputStream, extensionRegistryLite);
            }
        };
        private static final RequestVerificationCodeForQr defaultInstance;
        private static final long serialVersionUID = 0;
        public int bitField0_;
        public ByteString cardInfo_;
        public ByteString cvn2_;
        public Object deviceId_;
        private byte memoizedIsInitialized;
        private int memoizedSerializedSize;
        private final UnknownFieldSet unknownFields;

        public static final class Builder extends GeneratedMessage.Builder<Builder> implements RequestVerificationCodeForQrOrBuilder {
            private int bitField0_;
            private ByteString cardInfo_;
            private ByteString cvn2_;
            private Object deviceId_;

            private Builder() {
                this.deviceId_ = "";
                this.cardInfo_ = ByteString.EMPTY;
                this.cvn2_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            private Builder(GeneratedMessage.BuilderParent builderParent) {
                super(builderParent);
                this.deviceId_ = "";
                this.cardInfo_ = ByteString.EMPTY;
                this.cvn2_ = ByteString.EMPTY;
                maybeForceBuilderInitialization();
            }

            public static Builder create() {
                return new Builder();
            }

            public static final Descriptors.Descriptor getDescriptor() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_descriptor;
            }

            private void maybeForceBuilderInitialization() {
                boolean z = RequestVerificationCodeForQr.alwaysUseFieldBuilders;
            }

            public final RequestVerificationCodeForQr build() {
                RequestVerificationCodeForQr buildPartial = buildPartial();
                if (buildPartial.isInitialized()) {
                    return buildPartial;
                }
                throw newUninitializedMessageException((Message) buildPartial);
            }

            public final RequestVerificationCodeForQr buildPartial() {
                RequestVerificationCodeForQr requestVerificationCodeForQr = new RequestVerificationCodeForQr(this);
                int i = this.bitField0_;
                int i2 = 1;
                if ((i & 1) != 1) {
                    i2 = 0;
                }
                requestVerificationCodeForQr.deviceId_ = this.deviceId_;
                if ((i & 2) == 2) {
                    i2 |= 2;
                }
                requestVerificationCodeForQr.cardInfo_ = this.cardInfo_;
                if ((i & 4) == 4) {
                    i2 |= 4;
                }
                requestVerificationCodeForQr.cvn2_ = this.cvn2_;
                requestVerificationCodeForQr.bitField0_ = i2;
                onBuilt();
                return requestVerificationCodeForQr;
            }

            public final Builder clear() {
                super.clear();
                this.deviceId_ = "";
                this.bitField0_ &= -2;
                this.cardInfo_ = ByteString.EMPTY;
                this.bitField0_ &= -3;
                this.cvn2_ = ByteString.EMPTY;
                this.bitField0_ &= -5;
                return this;
            }

            public final Builder clearCardInfo() {
                this.bitField0_ &= -3;
                this.cardInfo_ = RequestVerificationCodeForQr.getDefaultInstance().getCardInfo();
                onChanged();
                return this;
            }

            public final Builder clearCvn2() {
                this.bitField0_ &= -5;
                this.cvn2_ = RequestVerificationCodeForQr.getDefaultInstance().getCvn2();
                onChanged();
                return this;
            }

            public final Builder clearDeviceId() {
                this.bitField0_ &= -2;
                this.deviceId_ = RequestVerificationCodeForQr.getDefaultInstance().getDeviceId();
                onChanged();
                return this;
            }

            public final Builder clone() {
                return create().mergeFrom(buildPartial());
            }

            public final ByteString getCardInfo() {
                return this.cardInfo_;
            }

            public final ByteString getCvn2() {
                return this.cvn2_;
            }

            public final RequestVerificationCodeForQr getDefaultInstanceForType() {
                return RequestVerificationCodeForQr.getDefaultInstance();
            }

            public final Descriptors.Descriptor getDescriptorForType() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_descriptor;
            }

            public final String getDeviceId() {
                Object obj = this.deviceId_;
                if (obj instanceof String) {
                    return (String) obj;
                }
                String stringUtf8 = ((ByteString) obj).toStringUtf8();
                this.deviceId_ = stringUtf8;
                return stringUtf8;
            }

            public final ByteString getDeviceIdBytes() {
                Object obj = this.deviceId_;
                if (!(obj instanceof String)) {
                    return (ByteString) obj;
                }
                ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
                this.deviceId_ = copyFromUtf8;
                return copyFromUtf8;
            }

            public final boolean hasCardInfo() {
                return (this.bitField0_ & 2) == 2;
            }

            public final boolean hasCvn2() {
                return (this.bitField0_ & 4) == 4;
            }

            public final boolean hasDeviceId() {
                return (this.bitField0_ & 1) == 1;
            }

            public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
                return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_fieldAccessorTable.ensureFieldAccessorsInitialized(RequestVerificationCodeForQr.class, Builder.class);
            }

            public final boolean isInitialized() {
                return true;
            }

            public final Builder mergeFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
                RequestVerificationCodeForQr requestVerificationCodeForQr;
                RequestVerificationCodeForQr requestVerificationCodeForQr2 = null;
                try {
                    RequestVerificationCodeForQr parsePartialFrom = RequestVerificationCodeForQr.PARSER.parsePartialFrom(codedInputStream, extensionRegistryLite);
                    if (parsePartialFrom != null) {
                        mergeFrom(parsePartialFrom);
                    }
                    return this;
                } catch (InvalidProtocolBufferException e) {
                    requestVerificationCodeForQr = (RequestVerificationCodeForQr) e.getUnfinishedMessage();
                    throw e;
                } catch (Throwable th) {
                    th = th;
                    requestVerificationCodeForQr2 = requestVerificationCodeForQr;
                }
                if (requestVerificationCodeForQr2 != null) {
                    mergeFrom(requestVerificationCodeForQr2);
                }
                throw th;
            }

            public final Builder mergeFrom(Message message) {
                if (message instanceof RequestVerificationCodeForQr) {
                    return mergeFrom((RequestVerificationCodeForQr) message);
                }
                super.mergeFrom(message);
                return this;
            }

            public final Builder mergeFrom(RequestVerificationCodeForQr requestVerificationCodeForQr) {
                if (requestVerificationCodeForQr == RequestVerificationCodeForQr.getDefaultInstance()) {
                    return this;
                }
                if (requestVerificationCodeForQr.hasDeviceId()) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = requestVerificationCodeForQr.deviceId_;
                    onChanged();
                }
                if (requestVerificationCodeForQr.hasCardInfo()) {
                    setCardInfo(requestVerificationCodeForQr.getCardInfo());
                }
                if (requestVerificationCodeForQr.hasCvn2()) {
                    setCvn2(requestVerificationCodeForQr.getCvn2());
                }
                mergeUnknownFields(requestVerificationCodeForQr.getUnknownFields());
                return this;
            }

            public final Builder setCardInfo(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 2;
                    this.cardInfo_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setCvn2(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 4;
                    this.cvn2_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceId(String str) {
                if (str != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = str;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }

            public final Builder setDeviceIdBytes(ByteString byteString) {
                if (byteString != null) {
                    this.bitField0_ |= 1;
                    this.deviceId_ = byteString;
                    onChanged();
                    return this;
                }
                throw new NullPointerException();
            }
        }

        static {
            RequestVerificationCodeForQr requestVerificationCodeForQr = new RequestVerificationCodeForQr(true);
            defaultInstance = requestVerificationCodeForQr;
            requestVerificationCodeForQr.initFields();
        }

        public static final Descriptors.Descriptor getDescriptor() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_descriptor;
        }

        private void initFields() {
            this.deviceId_ = "";
            this.cardInfo_ = ByteString.EMPTY;
            this.cvn2_ = ByteString.EMPTY;
        }

        public static Builder newBuilder() {
            return Builder.create();
        }

        public static Builder newBuilder(RequestVerificationCodeForQr requestVerificationCodeForQr) {
            return newBuilder().mergeFrom(requestVerificationCodeForQr);
        }

        public static RequestVerificationCodeForQr parseDelimitedFrom(InputStream inputStream) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream);
        }

        public static RequestVerificationCodeForQr parseDelimitedFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseDelimitedFrom(inputStream, extensionRegistryLite);
        }

        public static RequestVerificationCodeForQr parseFrom(ByteString byteString) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString);
        }

        public static RequestVerificationCodeForQr parseFrom(ByteString byteString, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(byteString, extensionRegistryLite);
        }

        public static RequestVerificationCodeForQr parseFrom(CodedInputStream codedInputStream) throws IOException {
            return PARSER.parseFrom(codedInputStream);
        }

        public static RequestVerificationCodeForQr parseFrom(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(codedInputStream, extensionRegistryLite);
        }

        public static RequestVerificationCodeForQr parseFrom(InputStream inputStream) throws IOException {
            return PARSER.parseFrom(inputStream);
        }

        public static RequestVerificationCodeForQr parseFrom(InputStream inputStream, ExtensionRegistryLite extensionRegistryLite) throws IOException {
            return PARSER.parseFrom(inputStream, extensionRegistryLite);
        }

        public static RequestVerificationCodeForQr parseFrom(byte[] bArr) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr);
        }

        public static RequestVerificationCodeForQr parseFrom(byte[] bArr, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            return PARSER.parseFrom(bArr, extensionRegistryLite);
        }

        public final ByteString getCardInfo() {
            return this.cardInfo_;
        }

        public final ByteString getCvn2() {
            return this.cvn2_;
        }

        public final String getDeviceId() {
            Object obj = this.deviceId_;
            if (obj instanceof String) {
                return (String) obj;
            }
            ByteString byteString = (ByteString) obj;
            String stringUtf8 = byteString.toStringUtf8();
            if (byteString.isValidUtf8()) {
                this.deviceId_ = stringUtf8;
            }
            return stringUtf8;
        }

        public final ByteString getDeviceIdBytes() {
            Object obj = this.deviceId_;
            if (!(obj instanceof String)) {
                return (ByteString) obj;
            }
            ByteString copyFromUtf8 = ByteString.copyFromUtf8((String) obj);
            this.deviceId_ = copyFromUtf8;
            return copyFromUtf8;
        }

        public final Parser<RequestVerificationCodeForQr> getParserForType() {
            return PARSER;
        }

        public final int getSerializedSize() {
            int i = this.memoizedSerializedSize;
            if (i != -1) {
                return i;
            }
            int i2 = 0;
            if ((this.bitField0_ & 1) == 1) {
                i2 = 0 + CodedOutputStream.computeBytesSize(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                i2 += CodedOutputStream.computeBytesSize(2, this.cardInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                i2 += CodedOutputStream.computeBytesSize(3, this.cvn2_);
            }
            int serializedSize = i2 + getUnknownFields().getSerializedSize();
            this.memoizedSerializedSize = serializedSize;
            return serializedSize;
        }

        public final boolean hasCardInfo() {
            return (this.bitField0_ & 2) == 2;
        }

        public final boolean hasCvn2() {
            return (this.bitField0_ & 4) == 4;
        }

        public final boolean hasDeviceId() {
            return (this.bitField0_ & 1) == 1;
        }

        public final GeneratedMessage.FieldAccessorTable internalGetFieldAccessorTable() {
            return TsmRpcModels.internal_static_com_miui_tsmclient_seitsm_RequestVerificationCodeForQr_fieldAccessorTable.ensureFieldAccessorsInitialized(RequestVerificationCodeForQr.class, Builder.class);
        }

        public final boolean isInitialized() {
            byte b = this.memoizedIsInitialized;
            if (b != -1) {
                return b == 1;
            }
            this.memoizedIsInitialized = 1;
            return true;
        }

        public final Builder newBuilderForType() {
            return newBuilder();
        }

        /* access modifiers changed from: protected */
        public final Builder newBuilderForType(GeneratedMessage.BuilderParent builderParent) {
            return new Builder(builderParent);
        }

        public final Builder toBuilder() {
            return newBuilder(this);
        }

        public final Object writeReplace() throws ObjectStreamException {
            return super.writeReplace();
        }

        public final void writeTo(CodedOutputStream codedOutputStream) throws IOException {
            getSerializedSize();
            if ((this.bitField0_ & 1) == 1) {
                codedOutputStream.writeBytes(1, getDeviceIdBytes());
            }
            if ((this.bitField0_ & 2) == 2) {
                codedOutputStream.writeBytes(2, this.cardInfo_);
            }
            if ((this.bitField0_ & 4) == 4) {
                codedOutputStream.writeBytes(3, this.cvn2_);
            }
            getUnknownFields().writeTo(codedOutputStream);
        }

        private RequestVerificationCodeForQr(GeneratedMessage.Builder<?> builder) {
            super(builder);
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = builder.getUnknownFields();
        }

        private RequestVerificationCodeForQr(boolean z) {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            this.unknownFields = UnknownFieldSet.getDefaultInstance();
        }

        public static RequestVerificationCodeForQr getDefaultInstance() {
            return defaultInstance;
        }

        public final RequestVerificationCodeForQr getDefaultInstanceForType() {
            return defaultInstance;
        }

        public final UnknownFieldSet getUnknownFields() {
            return this.unknownFields;
        }

        private RequestVerificationCodeForQr(CodedInputStream codedInputStream, ExtensionRegistryLite extensionRegistryLite) throws InvalidProtocolBufferException {
            this.memoizedIsInitialized = -1;
            this.memoizedSerializedSize = -1;
            initFields();
            UnknownFieldSet.Builder newBuilder = UnknownFieldSet.newBuilder();
            boolean z = false;
            while (!z) {
                try {
                    int readTag = codedInputStream.readTag();
                    if (readTag != 0) {
                        if (readTag == 10) {
                            this.bitField0_ |= 1;
                            this.deviceId_ = codedInputStream.readBytes();
                        } else if (readTag == 18) {
                            this.bitField0_ |= 2;
                            this.cardInfo_ = codedInputStream.readBytes();
                        } else if (readTag == 26) {
                            this.bitField0_ |= 4;
                            this.cvn2_ = codedInputStream.readBytes();
                        } else if (!parseUnknownField(codedInputStream, newBuilder, extensionRegistryLite, readTag)) {
                        }
                    }
                    z = true;
                } catch (InvalidProtocolBufferException e) {
                    throw e.setUnfinishedMessage(this);
                } catch (IOException e2) {
                    throw new InvalidProtocolBufferException(e2.getMessage()).setUnfinishedMessage(this);
                } catch (Throwable th) {
                    this.unknownFields = newBuilder.build();
                    makeExtensionsImmutable();
                    throw th;
                }
            }
            this.unknownFields = newBuilder.build();
            makeExtensionsImmutable();
        }
    }
}
